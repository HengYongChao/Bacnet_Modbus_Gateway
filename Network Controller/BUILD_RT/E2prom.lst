C51 COMPILER V9.06   E2PROM                                                                05/28/2013 10:15:31 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE E2PROM
OBJECT MODULE PLACED IN .\E2prom.obj
COMPILER INVOKED BY: E:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\i2c\E2prom.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) IN
                    -CDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;..\
                    -SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\buf
                    -fer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..\S
                    -rc\FreeRTOSSource\include\;..\Src\schedule\;..\src\bacnet;..\src\include;..\src\LCD;..\src\version;..\src\modbusTCP;..\s
                    -rc\gs2e;..\src\adpter1;..\src\scan;..\src\gsm;..\src\dyndns) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\E2prom.lst) O
                    -BJECT(.\E2prom.obj)

line level    source

   1          
   2          #include "e2prom.h"
   3          #include "../cpu/ax11000.h"
   4          //  -------------
   5          //  note:       
   6          //      1. every time use new chip, should initial e2prom using WINDOWS ISP
   7          //      2. make sure the I2C interrupt vector is turned on.
   8          //  -------------
   9          
  10          #define         USER_BASE_ADDR  0x30   // if use 24c02, the usable range is 0x30 - 0xff, 208 bytes
  11          
  12          #if 1
  13          
  14          I2C_BUF Read_Data;
  15          
  16          static U16_T ADDROFDEV = 0x50;
  17          static U16_T delay_count = 2000;
  18          
  19          void E2prom_Initial(void)
  20          {
  21   1              U16_T   i2cpreclk = 0;
  22   1              U8_T    sysclk = 0;
  23   1              U32_T   Sysclk;
  24   1              sysclk = AX11000_GetSysClk();
  25   1              switch (sysclk)
  26   1              {
  27   2                      case SYS_CLK_100M :
  28   2                              Sysclk = 100000000;
  29   2                              i2cpreclk = I2C_STD_100M;
  30   2                              break;
  31   2                      case SYS_CLK_50M :
  32   2                              Sysclk = 50000000;
  33   2                              i2cpreclk = I2C_STD_50M;
  34   2                              break;
  35   2                      case SYS_CLK_25M :
  36   2                              Sysclk = 25000000;
  37   2                              i2cpreclk = I2C_STD_25M;
  38   2                              break;
  39   2              }
  40   1              I2C_Setup(I2C_ENB|I2C_STANDARD|I2C_MST_IE|I2C_7BIT|I2C_MASTER_MODE, i2cpreclk, 0x005A);
  41   1              //E2prom_Erase();
  42   1      }
  43          
  44          U8_T E2prom_Read_Byte(U8_T addr, U8_T *value)
  45          {
  46   1              I2C_RdmRead(ADDROFDEV, USER_BASE_ADDR + addr, &Read_Data, 1, I2C_STOP_COND);
  47   1              *value = Read_Data.I2cData[0];
  48   1              return 1;
  49   1      }
C51 COMPILER V9.06   E2PROM                                                                05/28/2013 10:15:31 PAGE 2   

  50          
  51          U8_T E2prom_Read_Byte_From_Absolute_Address(U8_T addr, U8_T *value)
  52          {
  53   1              I2C_RdmRead(ADDROFDEV, addr, &Read_Data, 1, I2C_STOP_COND);
  54   1              *value = Read_Data.I2cData[0];
  55   1              return 1;
  56   1      }
  57          
  58          
  59          U8_T E2prom_Read_Int(U8_T addr, U16_T *value)
  60          {
  61   1              //U8_T temp,temp1;
  62   1      //      E2prom_Read_Byte(addr,&temp);
  63   1      //      E2prom_Read_Byte(addr + 1,&temp1);
  64   1      //      *value = temp + temp1 * 256;
  65   1              I2C_RdmRead(ADDROFDEV, USER_BASE_ADDR + addr, &Read_Data, 2, I2C_STOP_COND);
  66   1              *value = Read_Data.I2cData[0];
  67   1                                 
  68   1              return 1;
  69   1      }
  70          
  71          U8_T E2prom_Write_Byte(U8_T addr, U8_T dat)
  72          {
  73   1              U8_T result;
  74   1              U16_T i;
  75   1              result = I2C_ByteWrite(ADDROFDEV, USER_BASE_ADDR + addr, dat, I2C_STOP_COND);
  76   1              for(i = 0; i < delay_count; i++)                        _nop_ ();
  77   1              return result;
  78   1      }
  79          
  80          U8_T E2prom_Write_Byte_To_Absolute_Address(U8_T addr, U8_T dat)
  81          {
  82   1              U8_T result;
  83   1              U16_T i;
  84   1              result = I2C_ByteWrite(ADDROFDEV, addr, dat, I2C_STOP_COND);
  85   1              for(i = 0; i < delay_count; i++)                        _nop_ ();
  86   1              return result;
  87   1      }
  88          
  89          
  90          U8_T E2prom_Write_Int(U8_T addr, U16_T dat)
  91          {       
  92   1              U16_T i;
  93   1              U8_T temp;
  94   1              temp = (U8_T)dat;   // first low byte
  95   1              I2C_ByteWrite(ADDROFDEV, USER_BASE_ADDR + addr, temp, I2C_STOP_COND);   
  96   1              for(i = 0; i < delay_count; i++)                        _nop_ ();
  97   1              temp = dat >> 8;
  98   1              I2C_ByteWrite(ADDROFDEV, USER_BASE_ADDR + addr + 1, temp, I2C_STOP_COND);       
  99   1              for(i = 0; i < delay_count; i++)                        _nop_ ();
 100   1              return 1;
 101   1      }
 102          
 103          // erase e2prom
 104          U8_T E2prom_Erase(void)
 105          {
 106   1              U8_T result;
 107   1              U16_T j,i;
 108   1              for(j = 0; j < 208; j++) 
 109   1              {
 110   2                      result = I2C_ByteWrite(ADDROFDEV, USER_BASE_ADDR + j, 0xFF, I2C_STOP_COND);
 111   2                      if(!result)     return result;
C51 COMPILER V9.06   E2PROM                                                                05/28/2013 10:15:31 PAGE 3   

 112   2                      for(i = 0; i < delay_count; i++)        _nop_ ();
 113   2              }
 114   1      
 115   1      
 116   1              return result;
 117   1      }
 118          
 119          
 120          #endif
 121          
 122          
 123          
 124          
 125          
 126          
 127          
 128          
 129          
 130          
 131          
 132          
 133          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    733    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     74      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

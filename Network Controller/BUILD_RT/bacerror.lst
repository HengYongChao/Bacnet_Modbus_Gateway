C51 COMPILER V9.06   BACERROR                                                              01/29/2013 10:19:48 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE BACERROR
OBJECT MODULE PLACED IN .\bacerror.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\bacnet\bacerror.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X602
                    -0) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur
                    -\;..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SR
                    -C\buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\
                    -;..\Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\bacerror.lst) OBJECT(.\b
                    -acerror.obj)

line level    source

   1          /*####COPYRIGHTBEGIN####
   2           -------------------------------------------
   3           Copyright (C) 2005 Steve Karg
   4          
   5           This program is free software; you can redistribute it and/or
   6           modify it under the terms of the GNU General Public License
   7           as published by the Free Software Foundation; either version 2
   8           of the License, or (at your option) any later version.
   9          
  10           This program is distributed in the hope that it will be useful,
  11           but WITHOUT ANY WARRANTY; without even the implied warranty of
  12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13           GNU General Public License for more details.
  14          
  15           You should have received a copy of the GNU General Public License
  16           along with this program; if not, write to:
  17           The Free Software Foundation, Inc.
  18           59 Temple Place - Suite 330
  19           Boston, MA  02111-1307, USA.
  20          
  21           As a special exception, if other files instantiate templates or
  22           use macros or inline functions from this file, or you compile
  23           this file and link it with other works to produce a work based
  24           on this file, this file does not by itself cause the resulting
  25           work to be covered by the GNU General Public License. However
  26           the source code for this file must still be made available in
  27           accordance with section (3) of the GNU General Public License.
  28          
  29           This exception does not invalidate any other reasons why a work
  30           based on this file might be covered by the GNU General Public
  31           License.
  32           -------------------------------------------
  33          ####COPYRIGHTEND####*/
  34          #include <stdint.h>
  35          #include "../include/bacenum.h"
  36          #include "../include/bacdcode.h"
  37          #include "../include/bacdef.h"               
  38          #include "../include/bacerror.h"
  39          
  40          /** @file bacerror.c  Encode/Decode BACnet Errors */
  41          
  42          /* encode service */
  43          int bacerror_encode_apdu(
  44              uint8_t * apdu,
  45              uint8_t invoke_id,
  46              BACNET_CONFIRMED_SERVICE service,
  47              BACNET_ERROR_CLASS error_class,
  48              BACNET_ERROR_CODE error_code)
  49          {
  50   1          int apdu_len = 0;   /* total length of the apdu, return value */
C51 COMPILER V9.06   BACERROR                                                              01/29/2013 10:19:48 PAGE 2   

  51   1      
  52   1          if (apdu) {
  53   2              apdu[0] = PDU_TYPE_ERROR;
  54   2              apdu[1] = invoke_id;
  55   2              apdu[2] = service;
  56   2              apdu_len = 3;
  57   2              /* service parameters */
  58   2              apdu_len +=
  59   2                  encode_application_enumerated(&apdu[apdu_len], error_class);
  60   2              apdu_len += encode_application_enumerated(&apdu[apdu_len], error_code);
  61   2          }
  62   1      
  63   1          return apdu_len;
  64   1      }
  65          
  66          #if !BACNET_SVC_SERVER
  67          /* decode the application class and code */
  68          int bacerror_decode_error_class_and_code(
  69              uint8_t * apdu,
  70              unsigned apdu_len,
  71              BACNET_ERROR_CLASS * error_class,
  72              BACNET_ERROR_CODE * error_code)
  73          {
  74   1          int len = 0;
  75   1          uint8_t tag_number = 0;
  76   1          uint32_t len_value_type = 0;
  77   1          uint32_t decoded_value = 0;
  78   1      
  79   1          if (apdu_len) {
  80   2              /* error class */
  81   2              len +=
  82   2                  decode_tag_number_and_value(&apdu[len], &tag_number,
  83   2                  &len_value_type);
  84   2              if (tag_number != BACNET_APPLICATION_TAG_ENUMERATED)
  85   2                  return 0;
  86   2              len += decode_enumerated(&apdu[len], len_value_type, &decoded_value);
  87   2              if (error_class)
  88   2                  *error_class = (BACNET_ERROR_CLASS) decoded_value;
  89   2              /* error code */
  90   2              len +=
  91   2                  decode_tag_number_and_value(&apdu[len], &tag_number,
  92   2                  &len_value_type);
  93   2              if (tag_number != BACNET_APPLICATION_TAG_ENUMERATED)
  94   2                  return 0;
  95   2              len += decode_enumerated(&apdu[len], len_value_type, &decoded_value);
  96   2              if (error_code)
  97   2                  *error_code = (BACNET_ERROR_CODE) decoded_value;
  98   2          }
  99   1      
 100   1          return len;
 101   1      }
 102          
 103          /* decode the service request only */
 104          int bacerror_decode_service_request(
 105              uint8_t * apdu,
 106              unsigned apdu_len,
 107              uint8_t * invoke_id,
 108              BACNET_CONFIRMED_SERVICE * service,
 109              BACNET_ERROR_CLASS * error_class,
 110              BACNET_ERROR_CODE * error_code)
 111          {
 112   1          int len = 0;
C51 COMPILER V9.06   BACERROR                                                              01/29/2013 10:19:48 PAGE 3   

 113   1      
 114   1          if (apdu_len > 2) {
 115   2              if (invoke_id)
 116   2                  *invoke_id = apdu[0];
 117   2              if (service)
 118   2                  *service = (BACNET_CONFIRMED_SERVICE) apdu[1];
 119   2              /* decode the application class and code */
 120   2              len =
 121   2                  bacerror_decode_error_class_and_code(&apdu[2], apdu_len - 2,
 122   2                  error_class, error_code);
 123   2          }
 124   1      
 125   1          return len;
 126   1      }
 127          #endif
 128          
 129          #ifdef TEST
              #include <assert.h>
              #include <string.h>
              #include "ctest.h"
              
              /* decode the whole APDU - mainly used for unit testing */
              int bacerror_decode_apdu(
                  uint8_t * apdu,
                  unsigned apdu_len,
                  uint8_t * invoke_id,
                  BACNET_CONFIRMED_SERVICE * service,
                  BACNET_ERROR_CLASS * error_class,
                  BACNET_ERROR_CODE * error_code)
              {
                  int len = 0;
              
                  if (!apdu)
                      return -1;
                  /* optional checking - most likely was already done prior to this call */
                  if (apdu_len) {
                      if (apdu[0] != PDU_TYPE_ERROR)
                          return -1;
                      if (apdu_len > 1) {
                          len =
                              bacerror_decode_service_request(&apdu[1], apdu_len - 1,
                              invoke_id, service, error_class, error_code);
                      }
                  }
              
                  return len;
              }
              
              void testBACError(
                  Test * pTest)
              {
                  uint8_t apdu[480] = { 0 };
                  int len = 0;
                  int apdu_len = 0;
                  uint8_t invoke_id = 0;
                  BACNET_CONFIRMED_SERVICE service = 0;
                  BACNET_ERROR_CLASS error_class = 0;
                  BACNET_ERROR_CODE error_code = 0;
                  uint8_t test_invoke_id = 0;
                  BACNET_CONFIRMED_SERVICE test_service = 0;
                  BACNET_ERROR_CLASS test_error_class = 0;
                  BACNET_ERROR_CODE test_error_code = 0;
C51 COMPILER V9.06   BACERROR                                                              01/29/2013 10:19:48 PAGE 4   

              
                  len =
                      bacerror_encode_apdu(&apdu[0], invoke_id, service, error_class,
                      error_code);
                  ct_test(pTest, len != 0);
                  apdu_len = len;
              
                  len =
                      bacerror_decode_apdu(&apdu[0], apdu_len, &test_invoke_id,
                      &test_service, &test_error_class, &test_error_code);
                  ct_test(pTest, len != -1);
                  ct_test(pTest, test_invoke_id == invoke_id);
                  ct_test(pTest, test_service == service);
                  ct_test(pTest, test_error_class == error_class);
                  ct_test(pTest, test_error_code == error_code);
              
                  /* change type to get negative response */
                  apdu[0] = PDU_TYPE_ABORT;
                  len =
                      bacerror_decode_apdu(&apdu[0], apdu_len, &test_invoke_id,
                      &test_service, &test_error_class, &test_error_code);
                  ct_test(pTest, len == -1);
              
                  /* test NULL APDU */
                  len =
                      bacerror_decode_apdu(NULL, apdu_len, &test_invoke_id, &test_service,
                      &test_error_class, &test_error_code);
                  ct_test(pTest, len == -1);
              
                  /* force a zero length */
                  len =
                      bacerror_decode_apdu(&apdu[0], 0, &test_invoke_id, &test_service,
                      &test_error_class, &test_error_code);
                  ct_test(pTest, len == 0);
              
              
                  /* check them all...   */
                  for (service = 0; service < MAX_BACNET_CONFIRMED_SERVICE; service++) {
                      for (error_class = 0; error_class < MAX_BACNET_ERROR_CLASS;
                          error_class++) {
                          for (error_code = 0; error_code < MAX_BACNET_ERROR_CODE;
                              error_code++) {
                              len =
                                  bacerror_encode_apdu(&apdu[0], invoke_id, service,
                                  error_class, error_code);
                              apdu_len = len;
                              ct_test(pTest, len != 0);
                              len =
                                  bacerror_decode_apdu(&apdu[0], apdu_len, &test_invoke_id,
                                  &test_service, &test_error_class, &test_error_code);
                              ct_test(pTest, len != -1);
                              ct_test(pTest, test_invoke_id == invoke_id);
                              ct_test(pTest, test_service == service);
                              ct_test(pTest, test_error_class == error_class);
                              ct_test(pTest, test_error_code == error_code);
                          }
                      }
                  }
              
                  /* max boundaries */
                  service = 255;
                  error_class = LAST_PROPRIETARY_ERROR_CLASS;
C51 COMPILER V9.06   BACERROR                                                              01/29/2013 10:19:48 PAGE 5   

                  error_code = LAST_PROPRIETARY_ERROR_CODE;
                  len =
                      bacerror_encode_apdu(&apdu[0], invoke_id, service, error_class,
                      error_code);
                  apdu_len = len;
                  ct_test(pTest, len != 0);
                  len =
                      bacerror_decode_apdu(&apdu[0], apdu_len, &test_invoke_id,
                      &test_service, &test_error_class, &test_error_code);
                  ct_test(pTest, len != -1);
                  ct_test(pTest, test_invoke_id == invoke_id);
                  ct_test(pTest, test_service == service);
                  ct_test(pTest, test_error_class == error_class);
                  ct_test(pTest, test_error_code == error_code);
              
              }
              
              #ifdef TEST_BACERROR
              int main(
                  void)
              {
                  Test *pTest;
                  bool rc;
              
                  pTest = ct_create("BACnet Error", NULL);
                  /* individual tests */
                  rc = ct_addTestFunction(pTest, testBACError);
                  assert(rc);
              
                  ct_setStream(pTest, stdout);
                  ct_run(pTest);
                  (void) ct_report(pTest);
                  ct_destroy(pTest);
              
                  return 0;
              }
              #endif /* TEST_ERROR */
              #endif /* TEST */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    904    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      50
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.06   PHY                                                                   03/13/2013 09:32:20 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE PHY
OBJECT MODULE PLACED IN .\phy.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\ethernet\phy.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) 
                    -INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;.
                    -.\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\b
                    -uffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..
                    -\Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\phy.lst) OBJECT(.\phy.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2006       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11          /*=============================================================================
  12           * Module Name: phy.c
  13           * Purpose:  
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: phy.c,v $
  18           * Revision 1.1.1.1  2006/06/20 05:50:28  borbin
  19           * no message
  20           *
  21           *=============================================================================
  22           */
  23          
  24          /* INCLUDE FILE DECLARATIONS */
  25          #include "reg80390.h"
  26          #include "phy.h"
  27          #include "stoe.h"
  28          #include "delay.h"
  29          #include <intrins.h>
  30          
  31          /* LOCAL VARIABLES DECLARATIONS */
  32          static U16_T XDATA phy_Control = 0;
  33          static U8_T XDATA phy_NetworkType;
  34          
  35          /*
  36          * -----------------------------------------------------------------------------
  37           * Function Name: phy_ReadReg
  38           * Purpose: Read PHY register.
  39           * Params:
  40           * Returns:
  41           * Note:
  42           * ----------------------------------------------------------------------------
  43           */
  44          void phy_ReadReg(U8_T regaddr, U16_T XDATA* pvalue)
  45          {
  46   1              U8_T    temp, isr;
  47   1      
  48   1              isr = EA;
  49   1              EA = 0;
  50   1              _nop_();
  51   1              /* abort command */
C51 COMPILER V9.06   PHY                                                                   03/13/2013 09:32:20 PAGE 2   

  52   1              EPCR = 0xff;
  53   1      
  54   1              EPCR = regaddr;
  55   1              EPCR = (PBDP->PhyInfo.PhyAddr + PHY_ACCESS_GO + PHY_READ_REG);
  56   1      
  57   1              temp = EPCR;
  58   1              temp = EPCR;
  59   1              while (temp & PHY_ACCESS_GO)
  60   1              {
  61   2                      DELAY_Us(1);
  62   2                      temp = EPCR;
  63   2                      temp = EPCR;
  64   2      
  65   2              } /* End of while */
  66   1      
  67   1              *pvalue = EPDR;
  68   1              temp = EPDR;
  69   1              EA = isr;
  70   1              *pvalue += ((U16_T)temp << 8);
  71   1      
  72   1      } /* End of phy_ReadReg */
  73          
  74          /*
  75          * -----------------------------------------------------------------------------
  76           * Function Name: phy_WriteReg
  77           * Purpose: Set PHY register.
  78           * Params:
  79           * Returns:
  80           * Note:
  81           * ----------------------------------------------------------------------------
  82           */
  83          void phy_WriteReg(U8_T regaddr, U16_T value)
  84          {
  85   1              U8_T    temp, isr;
  86   1      
  87   1              isr = EA;
  88   1              EA = 0;
  89   1              _nop_();
  90   1              /* abort command */
  91   1              EPCR = 0xff;
  92   1      
  93   1              EPDR = (U8_T)value;
  94   1              EPDR = (U8_T)(value >> 8);
  95   1              EPCR = regaddr;
  96   1              EPCR = (PBDP->PhyInfo.PhyAddr + PHY_ACCESS_GO);
  97   1      
  98   1              temp = EPCR;
  99   1              temp = EPCR;
 100   1              while (temp & PHY_ACCESS_GO)
 101   1              {
 102   2                      DELAY_Us(1);
 103   2                      temp = EPCR;
 104   2                      temp = EPCR;
 105   2      
 106   2              } /* End of File */
 107   1              EA = isr;
 108   1      
 109   1      } /* End of phy_WriteReg */
 110          
 111          /*
 112          * -----------------------------------------------------------------------------
 113           * Function Name: PHY_Init
C51 COMPILER V9.06   PHY                                                                   03/13/2013 09:32:20 PAGE 3   

 114           * Purpose: Initial some registers and variables of PHY.
 115           * Params: network_type -0: auto- negotiation
 116           *                                              -1: fixed 100 full speed.
 117           *                                              -2: fixed 100 half speed.
 118           *                                              -3: fixed 10 full speed.
 119           *                                              -4: fixed 10 half speed.
 120           * Returns:
 121           * Note:
 122           * ----------------------------------------------------------------------------
 123           */
 124          void PHY_Init(U8_T network_type)
 125          {
 126   1              U16_T XDATA     phyctrl, phyanar, tempshort;
 127   1      
 128   1              phy_NetworkType = network_type;
 129   1      
 130   1              /* use internal phy */
 131   1              PBDP->PhyInfo.PhyAddr = PHY_ADDRESS;
 132   1              PBDP->PhyInfo.PhyType = PHY_INTERNAL;
 133   1      
 134   1              /* software reset */
 135   1              phy_WriteReg(MII_PHY_CONTROL, CONTROL_RESET);
 136   1      
 137   1              /* read phy reg-2, reg-0 to make sure embedded phy is ready */
 138   1              while (1)
 139   1              {
 140   2                      phy_ReadReg(MII_PHY_OUI, &tempshort);
 141   2                      if (tempshort == 0x003B)
 142   2                              break;
 143   2              }
 144   1      
 145   1              while (1)
 146   1              {
 147   2                      phy_ReadReg(MII_PHY_CONTROL, &phyctrl);
 148   2                      if ((phyctrl == 0x3100) || (phyctrl == 0x3000) || (phyctrl == 0x1100) ||
 149   2                              (phyctrl == 0x1000))
 150   2                                      break;
 151   2              }
 152   1      
 153   1              switch (network_type)
 154   1              {
 155   2              default:
 156   2              case AUTO_NEGOTIATION:
 157   2                      phyctrl |= (CONTROL_100MB | CONTROL_FULL_DUPLEX);
 158   2                      phyanar = ANAR_SELECTOR_8023 + (ANAR_PAUSE | ANAR_100TXFD | ANAR_100TX |
 159   2                              ANAR_10TFD | ANAR_10T);
 160   2                      break;
 161   2              case FIXED_100_FULL:
 162   2                      phyctrl |= (CONTROL_100MB | CONTROL_FULL_DUPLEX);
 163   2                      phyanar = ANAR_SELECTOR_8023 + (ANAR_PAUSE | ANAR_100TXFD);
 164   2                      break;
 165   2              case FIXED_100_HALF:
 166   2                      phyctrl |= CONTROL_100MB;
 167   2                      phyanar = ANAR_SELECTOR_8023 + (ANAR_PAUSE | ANAR_100TX);
 168   2                      break;
 169   2              case FIXED_10_FULL:
 170   2                      phyctrl |= CONTROL_FULL_DUPLEX;
 171   2                      phyanar = ANAR_SELECTOR_8023 + (ANAR_PAUSE | ANAR_10TFD);
 172   2                      break;
 173   2              case FIXED_10_HALF:
 174   2                      phyanar = ANAR_SELECTOR_8023 + (ANAR_PAUSE | ANAR_10T);
 175   2                      break;
C51 COMPILER V9.06   PHY                                                                   03/13/2013 09:32:20 PAGE 4   

 176   2              }
 177   1      
 178   1              /* set phy register 0 & 4 to start negotitation*/
 179   1              phy_WriteReg(MII_PHY_ANAR, phyanar);
 180   1              phyctrl |= (CONTROL_ENABLE_AUTO | CONTROL_START_AUTO);
 181   1              phy_WriteReg(MII_PHY_CONTROL, phyctrl);
 182   1              phy_Control = phyctrl;
 183   1      
 184   1      } /* End of PHY_Init() */
 185          
 186          /*
 187           * ----------------------------------------------------------------------------
 188           * Function Name: PHY_CheckMediaType
 189           * Purpose:
 190           * Params:
 191           * Returns:
 192           * Note:
 193           * ----------------------------------------------------------------------------
 194           */
 195          U16_T PHY_CheckMediaType(void)
 196          {
 197   1              U16_T XDATA     phylinkstatus = 0;
 198   1              U16_T XDATA     tempshort;
 199   1      
 200   1              while (!phylinkstatus)
 201   1              {
 202   2                      phy_ReadReg(MII_PHY_STATUS, &phylinkstatus);
 203   2                      phylinkstatus &= BIT5;
 204   2              }
 205   1              DELAY_Ms(10);
 206   1      
 207   1              /* read phy register 0 for internal phy */
 208   1              phy_ReadReg(MII_PHY_CONTROL, &tempshort);
 209   1      
 210   1              if ((tempshort & CONTROL_100MB) && (tempshort & CONTROL_FULL_DUPLEX))
 211   1                      phylinkstatus = ANLPAR_100TXFD;
 212   1              else if (tempshort & CONTROL_100MB)
 213   1                      phylinkstatus = ANLPAR_100TX;
 214   1              else if (tempshort & CONTROL_FULL_DUPLEX)
 215   1                      phylinkstatus = ANLPAR_10TFD;
 216   1              else
 217   1                      phylinkstatus = ANLPAR_10T;
 218   1      
 219   1              return phylinkstatus;
 220   1      
 221   1      } /* End of PHY_CheckMediaType() */
 222          
 223          /*
 224           * ----------------------------------------------------------------------------
 225           * Function Name: PHY_Reset
 226           * Purpose:
 227           * Params:
 228           * Returns:
 229           * Note:
 230           * ----------------------------------------------------------------------------
 231           */
 232          void phy_Restart(void)
 233          {
 234   1              phy_WriteReg(MII_PHY_CONTROL, CONTROL_POWER_DOWN);
 235   1      
 236   1              MAC_Init(phy_NetworkType);
 237   1      
C51 COMPILER V9.06   PHY                                                                   03/13/2013 09:32:20 PAGE 5   

 238   1      } /* End of PHY_Reset() */
 239          
 240          /*
 241           * ----------------------------------------------------------------------------
 242           * Function Name: PHY_PowerUp
 243           * Purpose: set phy to power up
 244           * Params:
 245           * Returns:
 246           * Note:
 247           * ----------------------------------------------------------------------------
 248           */
 249          void PHY_PowerUp(void)
 250          {
 251   1              PBDP->PhyInfo.PhyAddr = PHY_ADDRESS;
 252   1      
 253   1              phy_WriteReg(MII_PHY_CONTROL, 0);
 254   1      
 255   1      } /* End of PHY_PowerUp() */
 256          
 257          /*
 258           * ----------------------------------------------------------------------------
 259           * Function Name: PHY_WatchDog
 260           * Purpose: If ethernet is un-link, restart the phy to make sure it work right
 261           * Params:
 262           * Returns:
 263           * Note:
 264           * ----------------------------------------------------------------------------
 265           */
 266          void PHY_WatchDog(void)
 267          {
 268   1              if (!PBDP->MacInfo.LinkSpeed)
 269   1                      phy_Restart();
 270   1      
 271   1      } /* End of PHY_WatchDog() */
 272          
 273          
 274          /* End of phy.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    749    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

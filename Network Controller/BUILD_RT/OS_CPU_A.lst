AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE     1


MACRO ASSEMBLER AX51 V3.07c
OBJECT MODULE PLACED IN .\OS_CPU_A.obj
ASSEMBLER INVOKED BY: E:\Keil_4_9.06\C51\BIN\AX51.EXE ..\src\FreeRtossource\portable\Keil\AX11000\OS_CPU_A.A51 MOD_CONT 
                      INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\uip\;..\SRC\
                      main\;..\SRC\tcpip\;..\SRC\hsur\;..\SRC\gs2e\;..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapte
                      r\;..\SRC\pppoe\) SET(LARGE) DEBUG PRINT(.\OS_CPU_A.lst) OBJECT(.\OS_CPU_A.obj) EP

LOC    OBJ             LINE     SOURCE

                          1     
                          2     $nomod51 
                          3     ; 
                          4     ; The uC/OS II port for Dallas 80C390 on Keil C51 V7
                          5     ;
                          6     ; Ported date:     Dec 2, 2003
                          7     ; By:              Stuart Wright (swright@jiskoot.com)
                          8     ; Target platform: Keil C51 V7.07 and above 
                          9     
                         10     ; Based on port for 8051 by John X. Liu, China, (johnxliu@163.com)
                         11     
                         12             NAME    OS_CPU_A_ASM
                         13     
                         14     ; ?C_XBP is the simulated external stack pointer in large mode, but its origianal
                         15     ; declare makes it can not be used in c files, so redeclare it in this module 
                         16     ; insteading of the old one
                         17             PUBLIC  ?C_XBP, C_XBP, TICK_INT                         ;
                         18     
                         19             EXTRN   CODE(_?vPortContextSwitch)
                         20             EXTRN   CODE(_?vIntPortContextSwitch)
                         21             PUBLIC  _?LoadCtx, STACK_START, _?KCOSCtxSw, _?vPortYield
                         22     
                         23     ;#include "reg80390.h"
                    +1   24     
                    +1   25     
                    +1   26     
                    +1   27     
                    +1   28     
                    +1   29     
                    +1   30     
                    +1   31     
                    +1   32     
                    +1   33     
                    +1   34     
                    +1   35     
                    +1   36     
                    +1   37     
                    +1   38     
                    +1   39     
  0080              +1   40     sfr     P0                      = 0x80;// Port 0
  0081              +1   41     sfr     SP                      = 0x81;// Stack Pointer
  0082              +1   42     sfr     DPL0            = 0x82;// Data Pointer 0 Low Byte
  0083              +1   43     sfr     DPH0            = 0x83;// Data Pointer 0 High Byte
  0082              +1   44     sfr     DPL                     = 0x82;// Data Pointer 0 Low Byte
  0083              +1   45     sfr     DPH                     = 0x83;// Data Pointer 0 High Byte
  0084              +1   46     sfr     DPL1            = 0x84;// Data Pointer 1 Low Byte
  0085              +1   47     sfr     DPH1            = 0x85;// Data Pointer 1 High Byte
  0086              +1   48     sfr     DPS                     = 0x86;// Data Pointers Select Register
  0087              +1   49     sfr     PCON            = 0x87;// Power Configuration Register
  0088              +1   50     sfr TCON                = 0x88;// Timer 0,1 Configuration Register
  0089              +1   51     sfr TMOD                = 0x89;// Timer 0,1 Control Mode Register
  008A              +1   52     sfr TL0                 = 0x8A;// Timer 0 Low Byte Counter
  008B              +1   53     sfr TL1                 = 0x8B;// Timer 1 Low Byte Counter
  008C              +1   54     sfr TH0                 = 0x8C;// Timer 0 High Byte Counter
  008D              +1   55     sfr TH1                 = 0x8D;// Timer 1 High Byte Counter
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE     2

  008E              +1   56     sfr CKCON               = 0x8E;// Clock Control Register
  008F              +1   57     sfr CSREPR              = 0x8F;// Software Reset and External Program RAM Select Registe
                               r
                    +1   58     
  0090              +1   59     sfr P1                  = 0x90;// Port 1
  0091              +1   60     sfr EIF                 = 0x91;// Extended Interrupt Flag Register
  0092              +1   61     sfr WTST                = 0x92;// Program Wait States Register
  0093              +1   62     sfr DPX0                = 0x93;// Data Pointer Extended Register 0
  0093              +1   63     sfr DPX                 = 0x93;// Data Pointer Extended Register 0
  0094              +1   64     sfr     SDSTSR          = 0x94;// Software Timer and Software DMA complete interrupt sta
                               tus
  0095              +1   65     sfr DPX1                = 0x95;// Data Pointer Extended Register 1
  0096              +1   66     sfr I2CCIR              = 0x96;// I2C Command Index Register
  0097              +1   67     sfr I2CDR               = 0x97;// I2C Data Register
  0098              +1   68     sfr SCON0               = 0x98;// UART 0 Configuration Register
  0099              +1   69     sfr SBUF0               = 0x99;// UART 0 Buffer Register
  009A              +1   70     sfr DBAR                = 0x9A;// DMA Bus Arbitration Register
  009B              +1   71     sfr DCIR                = 0x9B;// DMA Command Index Register
  009C              +1   72     sfr DDR                 = 0x9C;// DMA Data Register
  009D              +1   73     sfr ACON                = 0x9D;// Address Control Register
  009E              +1   74     sfr PISSR1              = 0x9E;// Peripheral Interrupt Status Summary Register 1
  009F              +1   75     sfr PISSR2              = 0x9F;// Peripheral Interrupt Status Summary Register 2
                    +1   76     
  00A0              +1   77     sfr P2                  = 0xA0;// Port 2
                    +1   78     
  00A1              +1   79     sfr LMSR                = 0xA1;// Local Bus Mode Setup Register
  00A2              +1   80     sfr LCR                 = 0xA2;// Local Bus Command Register
  00A3              +1   81     sfr LSR                 = 0xA3;// Local Bus Status Register
  00A4              +1   82     sfr LDALR               = 0xA4;// Local Bus Device Address Low Register
  00A5              +1   83     sfr LDAHR               = 0xA5;// Local Bus Device Address High Register
  00A6              +1   84     sfr LDCSR               = 0xA6;// Local Bus Device Chip Select Register
                    +1   85     
  00A1              +1   86     sfr LSAIER              = 0xA1;// Local Bus Slave mode Action and Interrupt Enable Regis
                               ter
  00A2              +1   87     sfr LSCR                = 0xA2;// Local Bus Slave mode Command Register
  00A3              +1   88     sfr LSSR                = 0xA3;// Local Bus Slave mode Status Register
  00A4              +1   89     sfr XMWLR               = 0xA4;// External Master Write-read Low Register
  00A5              +1   90     sfr XMWHR               = 0xA5;// External Master Write-read High Register
  00A6              +1   91     sfr XMRLR               = 0xA6;// External Master Read-only Low Register
  00A7              +1   92     sfr XMRHR               = 0xA7;// External Master Read-only High Register
                    +1   93     
  00A8              +1   94     sfr IE                  = 0xA8;// Interrupt Enable register
  00A9              +1   95     sfr LDLR                = 0xA9;// Local Bus Data Low Register
  00AA              +1   96     sfr LDHR                = 0xAA;// Local Bus Data High Register
  00AB              +1   97     sfr DMALR               = 0xAB;// Local Bus DMA Address Low Register
  00AC              +1   98     sfr DMAMR               = 0xAC;// Local Bus DMA Address Medium Register
  00AD              +1   99     sfr DMAHR               = 0xAD;// Local Bus DMA Address High Register
  00AE              +1  100     sfr TCIR                = 0xAE;// TOE Command Index Register
  00AF              +1  101     sfr     TDR                     = 0xAF;// TOE Data Register
                    +1  102     
  00B0              +1  103     sfr P3                  = 0xB0;// Port 3
  00B1              +1  104     sfr CCAPL0      = 0xB1;// PCA Module 0 Compare/Capture Low Byte Register
  00B2              +1  105     sfr CCAPL1      = 0xB2;// PCA Module 1 Compare/Capture Low Byte Register
  00B3              +1  106     sfr CCAPL2      = 0xB3;// PCA Module 2 Compare/Capture Low Byte Register
  00B4              +1  107     sfr CCAPL3      = 0xB4;// PCA Module 3 Compare/Capture Low Byte Register
  00B5              +1  108     sfr CCAPL4      = 0xB5;// PCA Module 4 Compare/Capture Low Byte Register
  00B6              +1  109     sfr MCIR                = 0xB6;// MAC Command Index Register
  00B7              +1  110     sfr MDR                 = 0xB7;// MAC Data Register
  00B8              +1  111     sfr IP                  = 0xB8;// Interrupt Priority Register
  00B9              +1  112     sfr CCAPH0      = 0xB9;// PCA Module 0 Compare/Capture High Byte Register
  00BA              +1  113     sfr CCAPH1      = 0xBA;// PCA Module 1 Compare/Capture High Byte Register
  00BB              +1  114     sfr CCAPH2      = 0xBB;// PCA Module 2 Compare/Capture High Byte Register
  00BC              +1  115     sfr CCAPH3      = 0xBC;// PCA Module 3 Compare/Capture High Byte Register
  00BD              +1  116     sfr CCAPH4      = 0xBD;// PCA Module 4 Compare/Capture High Byte Register
  00BE              +1  117     sfr EPCR                = 0xBE;// Ethernet PHY Command Index Register
  00BF              +1  118     sfr EPDR                = 0xBF;// Ethernet PHY Data Register
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE     3

                    +1  119     
  00C0              +1  120     sfr SCON1               = 0xC0;// UART 1 Configuration Register
  00C1              +1  121     sfr SBUF1               = 0xC1;// UART 1 Buffer Register
  00C2              +1  122     sfr CMOD                = 0xC2;// PCA Timer/Counter Mode Register
  00C3              +1  123     sfr CCON                = 0xC3;// PCA Timer/Counter Control Register
  00C4              +1  124     sfr CL                  = 0xC4;// PCA Timer/Counter Low
  00C5              +1  125     sfr CH                  = 0xC5;// PCA Timer/Counter High
  00C8              +1  126     sfr T2CON               = 0xC8;// Timer 2 Configuration Register
  00C9              +1  127     sfr T2IF                = 0xC9;// Timer 2 Interrupt Flags
  00CA              +1  128     sfr RLDL                = 0xCA;// Timer 2 Reload Low Byte
  00CB              +1  129     sfr RLDH                = 0xCB;// Timer 2 Reload High Byte
  00CC              +1  130     sfr TL2                 = 0xCC;// Timer 2 Low Byte Counter
  00CD              +1  131     sfr TH2                 = 0xCD;// Timer 2 High Byte Counter
  00CE              +1  132     sfr SPICIR              = 0xCE;// SPI Command Index Register
  00CF              +1  133     sfr SPIDR               = 0xCF;// SPI Data Register
                    +1  134     
  00D0              +1  135     sfr PSW                 = 0xD0;// Program Status Word
  00D1              +1  136     sfr CCAPM0              = 0xD1;// PCA Compare/Capture Module Mode Register 0
  00D2              +1  137     sfr CCAPM1              = 0xD2;// PCA Compare/Capture Module Mode Register 1
  00D3              +1  138     sfr CCAPM2              = 0xD3;// PCA Compare/Capture Module Mode Register 2
  00D4              +1  139     sfr CCAPM3              = 0xD4;// PCA Compare/Capture Module Mode Register 3
  00D5              +1  140     sfr CCAPM4              = 0xD5;// PCA Compare/Capture Module Mode Register 4
  00D6              +1  141     sfr OWCIR               = 0xD6;// OneWire Command Index Register
  00D7              +1  142     sfr OWDR                = 0xD7;// OneWire Data Register
  00D8              +1  143     sfr WDCON               = 0xD8;// Watchdog Configuration
  00DE              +1  144     sfr CANCIR              = 0xDE;// CAN Bus Command Index Register
  00DF              +1  145     sfr CANDR               = 0xDF;// CAN Bus Data Register
                    +1  146     
  00E0              +1  147     sfr ACC                 = 0xE0;// Accumulator
                    +1  148     
                    +1  149     
  00E1              +1  150     sfr     UR2_DLL         = 0xE1;// High Speed UART2 Divisor Latch Low Register
  00E1              +1  151     sfr     UR2_THR         = 0xE1;// High Speed UART2 Transmit Holding Register for Writing
  00E1              +1  152     sfr     UR2_RBR         = 0xE1;// High Speed UART2 Receive Buffer Register for Reading
  00E2              +1  153     sfr     UR2_DLH         = 0xE2;// High Speed UART2 Divisor Latch High Register
  00E2              +1  154     sfr     UR2_IER         = 0xE2;// High Speed UART2 Interrupt Enable Register
  00E3              +1  155     sfr     UR2_FCR         = 0xE3;// High Speed UART2 FIFO Control Register for Writing
  00E3              +1  156     sfr     UR2_IIR         = 0xE3;// High Speed UART2 Interrupt Identification Register for
                                Reading
  00E4              +1  157     sfr     UR2_LCR         = 0xE4;// High Speed UART2 Line Control Register
  00E5              +1  158     sfr     UR2_MCR         = 0xE5;// High Speed UART2 Modem Control Register
  00E6              +1  159     sfr     UR2_LSR         = 0xE6;// High Speed UART2 Line Status Register
  00E7              +1  160     sfr     UR2_MSR         = 0xE7;// High Speed UART2 Modem Status Register
                    +1  161     
  00E8              +1  162     sfr EIE                 = 0xE8;// External Interrupt Enable
  00E9              +1  163     sfr STATUS              = 0xE9;// Status Register
  00EA              +1  164     sfr MXAX                = 0xEA;// MOVX @Ri Extended Register
  00EB              +1  165     sfr TA                  = 0xEB;// Timed Access Protection
                    +1  166     
  00F0              +1  167     sfr B                   = 0xF0;// B Working Register
  00F8              +1  168     sfr EIP                 = 0xF8;// Extended Interrupt Priority Register
  00F9              +1  169     sfr MD0                 = 0xF9;// MDU Data 0
  00FA              +1  170     sfr MD1                 = 0xFA;// MDU Data 1
  00FB              +1  171     sfr MD2                 = 0xFB;// MDU Data 2
  00FC              +1  172     sfr MD3                 = 0xFC;// MDU Data 3
  00FD              +1  173     sfr MD4                 = 0xFD;// MDU Data 4
  00FE              +1  174     sfr MD5                 = 0xFE;// MDU Data 5
  00FF              +1  175     sfr ARCON               = 0xFF;// MDU Control Register
                    +1  176     
                    +1  177     
                    +1  178     
                    +1  179     
                    +1  180     
0080.0              +1  181     sbit P0_0               = 0x80;
0080.1              +1  182     sbit P0_1               = 0x81;
0080.2              +1  183     sbit P0_2               = 0x82;
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE     4

0080.3              +1  184     sbit P0_3               = 0x83;
0080.4              +1  185     sbit P0_4               = 0x84;
0080.5              +1  186     sbit P0_5               = 0x85;
0080.6              +1  187     sbit P0_6               = 0x86;
0080.7              +1  188     sbit P0_7               = 0x87;
                    +1  189     
                    +1  190     
                    +1  191     
                    +1  192     
                    +1  193     
                    +1  194     
                    +1  195     
                    +1  196     
                    +1  197     
                    +1  198     
                    +1  199     
                    +1  200     
                    +1  201     
                    +1  202     
                    +1  203     
                    +1  204     
                    +1  205     
                    +1  206     
                    +1  207     
                    +1  208     
                    +1  209     
                    +1  210     
0088.0              +1  211     sbit    IT0             = 0x88;
0088.1              +1  212     sbit    IE0             = 0x89;
0088.2              +1  213     sbit    IT1             = 0x8A;
0088.3              +1  214     sbit    IE1             = 0x8B;
0088.4              +1  215     sbit    TR0             = 0x8C;
0088.5              +1  216     sbit    TF0             = 0x8D;
0088.6              +1  217     sbit    TR1             = 0x8E;
0088.7              +1  218     sbit    TF1             = 0x8F;
                    +1  219     
                    +1  220     
                    +1  221     
                    +1  222     
                    +1  223     
                    +1  224     
                    +1  225     
                    +1  226     
                    +1  227     
                    +1  228     
                    +1  229     
                    +1  230     
                    +1  231     
                    +1  232     
                    +1  233     
                    +1  234     
                    +1  235     
                    +1  236     
                    +1  237     
                    +1  238     
                    +1  239     
                    +1  240     
                    +1  241     
                    +1  242     
                    +1  243     
                    +1  244     
                    +1  245     
                    +1  246     
                    +1  247     
                    +1  248     
                    +1  249     
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE     5

                    +1  250     
                    +1  251     
                    +1  252     
                    +1  253     
                    +1  254     
                    +1  255     
                    +1  256     
                    +1  257     
                    +1  258     
                    +1  259     
                    +1  260     
                    +1  261     
                    +1  262     
0090.0              +1  263     sbit P1_0               = 0x90;
0090.1              +1  264     sbit P1_1               = 0x91;
0090.2              +1  265     sbit P1_2               = 0x92;
0090.3              +1  266     sbit P1_3               = 0x93;
0090.4              +1  267     sbit P1_4               = 0x94;
0090.5              +1  268     sbit P1_5               = 0x95;
0090.6              +1  269     sbit P1_6               = 0x96;
0090.7              +1  270     sbit P1_7               = 0x97;
                    +1  271     
                    +1  272     
                    +1  273     
                    +1  274     
                    +1  275     
                    +1  276     
                    +1  277     
                    +1  278     
                    +1  279     
                    +1  280     
                    +1  281     
                    +1  282     
                    +1  283     
0098.0              +1  284     sbit RI0                        = 0x98;
0098.1              +1  285     sbit TI0                        = 0x99;
0098.2              +1  286     sbit RB08                       = 0x9A;
0098.3              +1  287     sbit TB08                       = 0x9B;
0098.4              +1  288     sbit REN0                       = 0x9C;
0098.5              +1  289     sbit SM02                       = 0x9D;
0098.6              +1  290     sbit SM01                       = 0x9E;
0098.7              +1  291     sbit SM00                       = 0x9F;
                    +1  292     
                    +1  293     
                    +1  294     
                    +1  295     
                    +1  296     
                    +1  297     
                    +1  298     
                    +1  299     
                    +1  300     
                    +1  301     
                    +1  302     
                    +1  303     
                    +1  304     
                    +1  305     
                    +1  306     
                    +1  307     
                    +1  308     
                    +1  309     
                    +1  310     
                    +1  311     
                    +1  312     
                    +1  313     
                    +1  314     
                    +1  315     
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE     6

                    +1  316     
                    +1  317     
                    +1  318     
                    +1  319     
                    +1  320     
                    +1  321     
                    +1  322     
                    +1  323     
                    +1  324     
00A0.0              +1  325     sbit P2_0               = 0xA0;
00A0.1              +1  326     sbit P2_1               = 0xA1;
00A0.2              +1  327     sbit P2_2               = 0xA2;
00A0.3              +1  328     sbit P2_3               = 0xA3;
00A0.4              +1  329     sbit P2_4               = 0xA4;
00A0.5              +1  330     sbit P2_5               = 0xA5;
00A0.6              +1  331     sbit P2_6               = 0xA6;
00A0.7              +1  332     sbit P2_7               = 0xA7;
                    +1  333     
                    +1  334     
                    +1  335     
                    +1  336     
00A8.0              +1  337     sbit EX0                = 0xA8;       /* 1=Enable External interrupt 0 */
00A8.1              +1  338     sbit ET0                = 0xA9;       /* 1=Enable Timer 0 interrupt */
00A8.2              +1  339     sbit EX1                = 0xAA;       /* 1=Enable External interrupt 1 */
00A8.3              +1  340     sbit ET1                = 0xAB;       /* 1=Enable Timer 1 interrupt */
00A8.4              +1  341     sbit ES0                = 0xAC;       /* 1=Enable Serial port 0 interrupt */
00A8.5              +1  342     sbit ET2                = 0xAD;       /* 1=Enable Timer 2 interrupt */
00A8.6              +1  343     sbit ES1                = 0xAE;       /* 1=Enable Serial port 1 interrupt */
00A8.7              +1  344     sbit EA                 = 0xAF;       /* 0=Disable all interrupts */
                    +1  345     
                    +1  346     
                    +1  347     
                    +1  348     
00B0.0              +1  349     sbit P3_0               = 0xB0;
00B0.1              +1  350     sbit P3_1               = 0xB1;
00B0.2              +1  351     sbit P3_2               = 0xB2;
00B0.3              +1  352     sbit P3_3               = 0xB3;
00B0.4              +1  353     sbit P3_4               = 0xB4;
00B0.5              +1  354     sbit P3_5               = 0xB5;
00B0.6              +1  355     sbit P3_6               = 0xB6;
00B0.7              +1  356     sbit P3_7               = 0xB7;
                    +1  357     
00B0.0              +1  358     sbit RXD                = 0xB0;       /* Serial data input */
00B0.1              +1  359     sbit TXD                = 0xB1;       /* Serial data output */
00B0.2              +1  360     sbit INT0               = 0xB2;       /* External interrupt 0 */
00B0.3              +1  361     sbit INT1               = 0xB3;       /* External interrupt 1 */
00B0.4              +1  362     sbit T0                 = 0xB4;       /* Timer 0 external input */
00B0.5              +1  363     sbit T1                 = 0xB5;       /* Timer 1 external input */
00B0.6              +1  364     sbit WR                 = 0xB6;       /* External data memory write strobe */
00B0.7              +1  365     sbit RD                 = 0xB7;       /* External data memory read strobe */
                    +1  366     
                    +1  367     
                    +1  368     
                    +1  369     
00B8.0              +1  370     sbit PX0                = 0xB8;
00B8.1              +1  371     sbit PT0                = 0xB9;
00B8.2              +1  372     sbit PX1                = 0xBA;
00B8.3              +1  373     sbit PT1                = 0xBB;
00B8.4              +1  374     sbit PS0                = 0xBC;
00B8.5              +1  375     sbit PT2                = 0xBD;
00B8.6              +1  376     sbit PS1                = 0xBE;
                    +1  377     
                    +1  378     
                    +1  379     
                    +1  380     
00C0.0              +1  381     sbit RI1                = 0xC0;
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE     7

00C0.1              +1  382     sbit TI1                = 0xC1;
00C0.2              +1  383     sbit RB18               = 0xC2;
00C0.3              +1  384     sbit TB18               = 0xC3;
00C0.4              +1  385     sbit REN1               = 0xC4;
00C0.5              +1  386     sbit SM12               = 0xC5;
00C0.6              +1  387     sbit SM11               = 0xC6;
00C0.7              +1  388     sbit SM10               = 0xC7;
                    +1  389     
                    +1  390     
                    +1  391     
                    +1  392     
                    +1  393     
                    +1  394     
                    +1  395     
                    +1  396     
                    +1  397     
                    +1  398     
                    +1  399     
                    +1  400     
                    +1  401     
                    +1  402     
                    +1  403     
                    +1  404     
                    +1  405     
                    +1  406     
                    +1  407     
                    +1  408     
                    +1  409     
                    +1  410     
                    +1  411     
00C8.0              +1  412     sbit CPRL2              = 0xC8;
00C8.1              +1  413     sbit CT2                = 0xC9;
00C8.2              +1  414     sbit TR2                = 0xCA;
00C8.3              +1  415     sbit EXEN2              = 0xCB;
00C8.4              +1  416     sbit TCLK               = 0xCC;
00C8.5              +1  417     sbit RCLK               = 0xCD;
00C8.6              +1  418     sbit EXF2               = 0xCE;
00C8.7              +1  419     sbit TF2                = 0xCF;
                    +1  420     
                    +1  421     
                    +1  422     
                    +1  423     
00D0.0              +1  424     sbit P                  = 0xD0;
00D0.1              +1  425     sbit F1                 = 0xD1;
00D0.2              +1  426     sbit OV                 = 0xD2;
00D0.3              +1  427     sbit RS0                = 0xD3;
00D0.4              +1  428     sbit RS1                = 0xD4;
00D0.5              +1  429     sbit F0                 = 0xD5;
00D0.6              +1  430     sbit AC                 = 0xD6;
00D0.7              +1  431     sbit CY                 = 0xD7;
                    +1  432     
                    +1  433     
                    +1  434     
                    +1  435     
                    +1  436     
                    +1  437     
                    +1  438     
                    +1  439     
                    +1  440     
                    +1  441     
                    +1  442     
                    +1  443     
                    +1  444     
                    +1  445     
                    +1  446     
                    +1  447     
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE     8

00D8.0              +1  448     sbit RWT                = 0xD8;
00D8.1              +1  449     sbit EWT                = 0xD9;
00D8.2              +1  450     sbit WTRF               = 0xDA;
00D8.3              +1  451     sbit WDIF               = 0xDB;
                    +1  452     
                    +1  453     
                    +1  454     
                    +1  455     
                    +1  456     
                    +1  457     
                    +1  458     
                    +1  459     
                    +1  460     
                    +1  461     
                    +1  462     
                    +1  463     
                    +1  464     
                    +1  465     
                    +1  466     
                    +1  467     
                    +1  468     
                    +1  469     
                    +1  470     
                    +1  471     
                    +1  472     
                    +1  473     
                    +1  474     
                    +1  475     
                    +1  476     
                    +1  477     
                    +1  478     
                    +1  479     
                    +1  480     
                    +1  481     
                    +1  482     
                    +1  483     
                    +1  484     
                    +1  485     
                    +1  486     
                    +1  487     
                    +1  488     
                    +1  489     
                    +1  490     
                    +1  491     
                    +1  492     
                    +1  493     
                    +1  494     
                    +1  495     
                    +1  496     
                    +1  497     
                    +1  498     
                    +1  499     
                    +1  500     
                    +1  501     
                    +1  502     
                    +1  503     
                    +1  504     
                    +1  505     
                    +1  506     
                    +1  507     
                    +1  508     
                    +1  509     
                    +1  510     
                    +1  511     
                    +1  512     
                    +1  513     
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE     9

                    +1  514     
                    +1  515     
                    +1  516     
                    +1  517     
                    +1  518     
                    +1  519     
                    +1  520     
                    +1  521     
                    +1  522     
                    +1  523     
                    +1  524     
                    +1  525     
                    +1  526     
                    +1  527     
                    +1  528     
                    +1  529     
                    +1  530     
                    +1  531     
                    +1  532     
                    +1  533     
                    +1  534     
                    +1  535     
                    +1  536     
                    +1  537     
                    +1  538     
                    +1  539     
                    +1  540     
                    +1  541     
                    +1  542     
                    +1  543     
                    +1  544     
00E8.0              +1  545     sbit EINT2              = 0xE8;
00E8.1              +1  546     sbit EINT3              = 0xE9;
00E8.2              +1  547     sbit EINT4              = 0xEA;
00E8.3              +1  548     sbit EINT5              = 0xEB;
00E8.4              +1  549     sbit EINT6              = 0xEC;
00E8.5              +1  550     sbit EWDI               = 0xED;
                    +1  551     
                    +1  552     
                    +1  553     
                    +1  554     
00F8.0              +1  555     sbit PINT2              = 0xF8;
00F8.1              +1  556     sbit PINT3              = 0xF9;
00F8.2              +1  557     sbit PINT4              = 0xFA;
00F8.3              +1  558     sbit PINT5              = 0xFB;
00F8.4              +1  559     sbit PINT6              = 0xFC;
00F8.5              +1  560     sbit PWDI               = 0xFD;
                    +1  561     
                    +1  562     
                    +1  563     
                    +1  564     
                        565     
                        566     
                        567     LoadXBP MACRO
                        568                     MOV     DPX,#0
                        569                     MOV     DPH, C_XBP
                        570                     MOV     DPL, C_XBP+1
                        571             ENDM
                        572     
                        573     SaveXBP MACRO
                        574                     PUSH    IE
                        575                     CLR     EA
                        576                     MOV     C_XBP,   DPH
                        577                     MOV     C_XBP+1, DPL
                        578                     POP     IE
                        579             ENDM
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE    10

                        580     
                        581     LoadREG MACRO   REG
                        582                     MOVX    A,   @DPTR
                        583                     MOV     REG, A
                        584             ENDM
                        585     
                        586     SaveREG MACRO   REG
                        587                     MOV     A,      REG
                        588                     MOVX    @DPTR,  A
                        589             ENDM
                        590     
                        591     ; The PUSHA now emulates the pushing sequence what Keil C does.
                        592     PUSHR   MACRO
                        593     ;               IRP     REG,    <ACC, B, DPX, DPH, DPL, DPX1, DPH1, DPL1, DPS, PSW, 0, 1
                               , 2, 3, 4, 5, 6, 7> ;Code for two DPTR's
                        594                     IRP     REG,    <ACC, B, DPX, DPH, DPL, PSW, 0, 1, 2, 3, 4, 5, 6, 7> ;Co
                               de for one DPTR ; Code for one DPTR
                        595                     PUSH    REG
                        596                     ENDM
                        597             ENDM
                        598     
                        599     POPR    MACRO
                        600     ;               IRP     REG,    <7, 6, 5, 4, 3, 2, 1, 0, PSW, DPS, DPL1, DPH1, DPX1, DPL
                               , DPH, DPX, B, ACC> ;Code for two DPTR's
                        601                     IRP     REG,    <7, 6, 5, 4, 3, 2, 1, 0, PSW, DPL, DPH, DPX, B, ACC> ;Co
                               de for one DPTR ; Code for one DPTR
                        602                     POP     REG
                        603                     ENDM
                        604             ENDM
                        605     
                        606     ; Declare the external stack pointer by ourself, so that we can use it freely.
                        607     ; you know, in the name of '?C_XBP' it can not be used in c modules but in the 
                        608     ; name of 'C_XBP' it can do.
------                  609     DT?C_XBP        SEGMENT DATA
------                  610                     RSEG    DT?C_XBP
000000                  611     ?C_XBP:                                 ; These two labels point to the same address
000000                  612     C_XBP:                                  ;
000000                  613             DS      2
000002                  614     TICK_INT:                                       ;
000002                  615             DS      1
000003                  616     IEREG:
000003                  617             DS      1 
                        618     
                        619     ; Declare a label 'Stack' in the hardware stack segment so that we know where it begins.
------                  620     ?STACK          SEGMENT         IDATA
------                  621                     RSEG    ?STACK
000000                  622     STACK_START:
000000                  623             DS      1
                        624     
                        625     ; Load context from the external stack pointed by C_XBP
------                  626     PR?LoadCtx      SEGMENT CODE
------                  627             RSEG    PR?LoadCtx
000000                  628     _?LoadCtx:
                        629+1           LoadXBP                                 ; Load the C_XBP to DPTR
                        633     
                        634+1           LoadREG SP                              ; Load the hardware stack pointer
00000C A3               637             INC     DPTR                            ;
                        638     
00000D A881             639             MOV     R0, SP                          ; Now we pop the hardware stack
00000F                  640     LC_1:                                           ; from the external one.
                        641+1           LoadREG @R0                             ; Did not use the PUSH ACC instruction f
                               or if we want to
000011 A3               644             INC     DPTR                            ; do so, we have to DEC DPTR, which cost
                               s much.
000012 18               645             DEC     R0                              ;
000013 B800F9           646             CJNE    R0, #BYTE0 (STACK_START-1), LC_1                ;
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE    11

                        647     
                        648+1           SaveXBP                                 ; after the hardware stack has been popp
                               ed,
                        654                                                     ; the external stack pointer should be a
                               djusted
                        655     
000022                  656     RestoreCtx:
                        657     
000022 D0E0             658             POP     ACC                             ; Safe way to do the same thing.
000024 5480             659             ANL     A,#0x80                         ;
000026 85A800     F     660             MOV     IEREG,IE
000029 4200       F     661             ORL     IEREG,A
                        662                                                     ; Now that the context has been loaded i
                               nto hardware
                        663+1           POPR                                    ; stack, what we need do is just popping
                                them upto registers.
000047 8500A8     F     682             MOV     IE,IEREG
                        683     
00004A 22               684             RET                                     ; Now everything is ready, a RET will br
                               ing the task to run.
                        685     
                        686     ; Task level context switch entry point, which is intended to be called by task graceful
                               ly. 
00004B                  687     _?OSCtxSw:
00004B                  688     _?vPortYield:
                        689+1           PUSHR                                   ; Save current context first into hardwa
                               re stack
000067 C0A8             708             PUSH    IE
000069 C2AF             709             CLR EA
                        710     ; _?KCOSCtxSw:                                  ; Now begin pushing hardware stack to ex
                               ternal one
                        711+1           LoadXBP                                 ; Load the external stack pointer first 
                               to prepare storing 
                        715                                                     ; data into it.
                        716     
000074 E581             717             MOV     A, SP                           ; Calculate how much memory in external 
                               stack needed
000076 C3               718             CLR     C                               ; so that we can adjust the external sta
                               ck pointer
000077 9400       F     719             SUBB    A, #BYTE0 (STACK_START-1)                       ; Calculated the length 
                               of hardware stack
                        720     
000079 F8               721             MOV     R0, A                           ; Save the length of hardware stack to R
                               0, which is used as a counter on saving hardware stack.
                        722     
00007A 04               723             INC     A                               ; Add the space for storing SP
                        724     
00007B C3               725             CLR     C
00007C C582             726             XCH     A, DPL                          ; Now ACC contains the right amount of e
                               xternal stack memory should be used.
00007E 9582             727             SUBB    A, DPL                          ; Adjust the external pointer.stored in 
                               DPTR to make to point to the new stack top from where we will store hardware stack.
000080 5002             728             JNC     SC_1
000082 1583             729             DEC     DPH
000084                  730     SC_1:
000084 F582             731             MOV     DPL,A                           ; Now DPTR contains the external stack p
                               ointer after pushing context into external stack.
                        732     
                        733+1           SaveXBP                                 ; Save to external stack pointer.
                        739                                                     ; Keeps the DPTR containing the external
                                stack pointer still.
                        740+1           SaveREG SP                              ; Save hardware stack pointer in the top
                                of external stack
                        743     
000095                  744     SC_2:
000095 A3               745             INC     DPTR                            ;
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE    12

000096 D0E0             746             POP     ACC                             ; Pop the data from hareware stack
000098 F0               747             MOVX    @DPTR, A                        ; and save into external one.
000099 D8FA             748             DJNZ    R0, SC_2                        ; Remember, R0 contains the hardware sta
                               ck's length.
                        749     
00009B 02000000   E     750             LJMP    _?vPortContextSwitch                    ; 
                        751     
                        752     
00009F                  753     _?KCOSCtxSw:                                    ; Now begin pushing hardware stack to ex
                               ternal one
                        754+1           LoadXBP                                 ; Load the external stack pointer first 
                               to prepare storing 
                        758                                                     ; data into it.
                        759     
0000A8 E581             760             MOV     A, SP                           ; Calculate how much memory in external 
                               stack needed
0000AA C3               761             CLR     C                               ; so that we can adjust the external sta
                               ck pointer
0000AB 9400       F     762             SUBB    A, #BYTE0 (STACK_START-1)                       ; Calculated the length 
                               of hardware stack
                        763     
0000AD F8               764             MOV     R0, A                           ; Save the length of hardware stack to R
                               0, which is used as a counter on saving hardware stack.
                        765     
0000AE 04               766             INC     A                               ; Add the space for storing SP
                        767     
0000AF C3               768             CLR     C
0000B0 C582             769             XCH     A, DPL                          ; Now ACC contains the right amount of e
                               xternal stack memory should be used.
0000B2 9582             770             SUBB    A, DPL                          ; Adjust the external pointer.stored in 
                               DPTR to make to point to the new stack top from where we will store hardware stack.
0000B4 5002             771             JNC     SC_3
0000B6 1583             772             DEC     DPH
0000B8                  773     SC_3:
0000B8 F582             774             MOV     DPL,A                           ; Now DPTR contains the external stack p
                               ointer after pushing context into external stack.
                        775     
                        776+1           SaveXBP                                 ; Save to external stack pointer.
                        782                                                     ; Keeps the DPTR containing the external
                                stack pointer still.
                        783+1           SaveREG SP                              ; Save hardware stack pointer in the top
                                of external stack
                        786     
0000C9                  787     SC_4:
0000C9 A3               788             INC     DPTR                            ;
0000CA D0E0             789             POP     ACC                             ; Pop the data from hareware stack
0000CC F0               790             MOVX    @DPTR, A                        ; and save into external one.
0000CD D8FA             791             DJNZ    R0, SC_4                        ; Remember, R0 contains the hardware sta
                               ck's length.
                        792     
0000CF 02000000   E     793             LJMP    _?vIntPortContextSwitch                 ; 
                        794     
                        795             END
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE    13

SYMBOL TABLE LISTING
------ ----- -------


N A M E                     T Y P E  V A L U E     ATTRIBUTES

?C_XBP . . . . . . . . . .  D  ADDR  0000H     R   SEG=DT?C_XBP
?STACK . . . . . . . . . .  I  SEG   000001H       REL=UNIT, ALN=BYTE
_?KCOSCTXSW. . . . . . . .  C  ADDR  009FH     R   SEG=PR?LOADCTX
_?LOADCTX. . . . . . . . .  C  ADDR  0000H     R   SEG=PR?LOADCTX
_?OSCTXSW. . . . . . . . .  C  ADDR  004BH     R   SEG=PR?LOADCTX
_?VINTPORTCONTEXTSWITCH. .  C  ADDR  -------       EXT
_?VPORTCONTEXTSWITCH . . .  C  ADDR  -------       EXT
_?VPORTYIELD . . . . . . .  C  ADDR  004BH     R   SEG=PR?LOADCTX
AC . . . . . . . . . . . .  B  ADDR  00D0H.6   A   
ACC. . . . . . . . . . . .  D  ADDR  00E0H     A   
ACON . . . . . . . . . . .  D  ADDR  009DH     A   
ARCON. . . . . . . . . . .  D  ADDR  00FFH     A   
B. . . . . . . . . . . . .  D  ADDR  00F0H     A   
C_XBP. . . . . . . . . . .  D  ADDR  0000H     R   SEG=DT?C_XBP
CANCIR . . . . . . . . . .  D  ADDR  00DEH     A   
CANDR. . . . . . . . . . .  D  ADDR  00DFH     A   
CCAPH0 . . . . . . . . . .  D  ADDR  00B9H     A   
CCAPH1 . . . . . . . . . .  D  ADDR  00BAH     A   
CCAPH2 . . . . . . . . . .  D  ADDR  00BBH     A   
CCAPH3 . . . . . . . . . .  D  ADDR  00BCH     A   
CCAPH4 . . . . . . . . . .  D  ADDR  00BDH     A   
CCAPL0 . . . . . . . . . .  D  ADDR  00B1H     A   
CCAPL1 . . . . . . . . . .  D  ADDR  00B2H     A   
CCAPL2 . . . . . . . . . .  D  ADDR  00B3H     A   
CCAPL3 . . . . . . . . . .  D  ADDR  00B4H     A   
CCAPL4 . . . . . . . . . .  D  ADDR  00B5H     A   
CCAPM0 . . . . . . . . . .  D  ADDR  00D1H     A   
CCAPM1 . . . . . . . . . .  D  ADDR  00D2H     A   
CCAPM2 . . . . . . . . . .  D  ADDR  00D3H     A   
CCAPM3 . . . . . . . . . .  D  ADDR  00D4H     A   
CCAPM4 . . . . . . . . . .  D  ADDR  00D5H     A   
CCON . . . . . . . . . . .  D  ADDR  00C3H     A   
CH . . . . . . . . . . . .  D  ADDR  00C5H     A   
CKCON. . . . . . . . . . .  D  ADDR  008EH     A   
CL . . . . . . . . . . . .  D  ADDR  00C4H     A   
CMOD . . . . . . . . . . .  D  ADDR  00C2H     A   
CPRL2. . . . . . . . . . .  B  ADDR  00C8H.0   A   
CSREPR . . . . . . . . . .  D  ADDR  008FH     A   
CT2. . . . . . . . . . . .  B  ADDR  00C8H.1   A   
CY . . . . . . . . . . . .  B  ADDR  00D0H.7   A   
DBAR . . . . . . . . . . .  D  ADDR  009AH     A   
DCIR . . . . . . . . . . .  D  ADDR  009BH     A   
DDR. . . . . . . . . . . .  D  ADDR  009CH     A   
DMAHR. . . . . . . . . . .  D  ADDR  00ADH     A   
DMALR. . . . . . . . . . .  D  ADDR  00ABH     A   
DMAMR. . . . . . . . . . .  D  ADDR  00ACH     A   
DPH. . . . . . . . . . . .  D  ADDR  0083H     A   
DPH0 . . . . . . . . . . .  D  ADDR  0083H     A   
DPH1 . . . . . . . . . . .  D  ADDR  0085H     A   
DPL. . . . . . . . . . . .  D  ADDR  0082H     A   
DPL0 . . . . . . . . . . .  D  ADDR  0082H     A   
DPL1 . . . . . . . . . . .  D  ADDR  0084H     A   
DPS. . . . . . . . . . . .  D  ADDR  0086H     A   
DPX. . . . . . . . . . . .  D  ADDR  0093H     A   
DPX0 . . . . . . . . . . .  D  ADDR  0093H     A   
DPX1 . . . . . . . . . . .  D  ADDR  0095H     A   
DT?C_XBP . . . . . . . . .  D  SEG   000004H       REL=UNIT, ALN=BYTE
EA . . . . . . . . . . . .  B  ADDR  00A8H.7   A   
EIE. . . . . . . . . . . .  D  ADDR  00E8H     A   
EIF. . . . . . . . . . . .  D  ADDR  0091H     A   
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE    14

EINT2. . . . . . . . . . .  B  ADDR  00E8H.0   A   
EINT3. . . . . . . . . . .  B  ADDR  00E8H.1   A   
EINT4. . . . . . . . . . .  B  ADDR  00E8H.2   A   
EINT5. . . . . . . . . . .  B  ADDR  00E8H.3   A   
EINT6. . . . . . . . . . .  B  ADDR  00E8H.4   A   
EIP. . . . . . . . . . . .  D  ADDR  00F8H     A   
EPCR . . . . . . . . . . .  D  ADDR  00BEH     A   
EPDR . . . . . . . . . . .  D  ADDR  00BFH     A   
ES0. . . . . . . . . . . .  B  ADDR  00A8H.4   A   
ES1. . . . . . . . . . . .  B  ADDR  00A8H.6   A   
ET0. . . . . . . . . . . .  B  ADDR  00A8H.1   A   
ET1. . . . . . . . . . . .  B  ADDR  00A8H.3   A   
ET2. . . . . . . . . . . .  B  ADDR  00A8H.5   A   
EWDI . . . . . . . . . . .  B  ADDR  00E8H.5   A   
EWT. . . . . . . . . . . .  B  ADDR  00D8H.1   A   
EX0. . . . . . . . . . . .  B  ADDR  00A8H.0   A   
EX1. . . . . . . . . . . .  B  ADDR  00A8H.2   A   
EXEN2. . . . . . . . . . .  B  ADDR  00C8H.3   A   
EXF2 . . . . . . . . . . .  B  ADDR  00C8H.6   A   
F0 . . . . . . . . . . . .  B  ADDR  00D0H.5   A   
F1 . . . . . . . . . . . .  B  ADDR  00D0H.1   A   
I2CCIR . . . . . . . . . .  D  ADDR  0096H     A   
I2CDR. . . . . . . . . . .  D  ADDR  0097H     A   
IE . . . . . . . . . . . .  D  ADDR  00A8H     A   
IE0. . . . . . . . . . . .  B  ADDR  0088H.1   A   
IE1. . . . . . . . . . . .  B  ADDR  0088H.3   A   
IEREG. . . . . . . . . . .  D  ADDR  0003H     R   SEG=DT?C_XBP
INT0 . . . . . . . . . . .  B  ADDR  00B0H.2   A   
INT1 . . . . . . . . . . .  B  ADDR  00B0H.3   A   
IP . . . . . . . . . . . .  D  ADDR  00B8H     A   
IT0. . . . . . . . . . . .  B  ADDR  0088H.0   A   
IT1. . . . . . . . . . . .  B  ADDR  0088H.2   A   
LC_1 . . . . . . . . . . .  C  ADDR  000FH     R   SEG=PR?LOADCTX
LCR. . . . . . . . . . . .  D  ADDR  00A2H     A   
LDAHR. . . . . . . . . . .  D  ADDR  00A5H     A   
LDALR. . . . . . . . . . .  D  ADDR  00A4H     A   
LDCSR. . . . . . . . . . .  D  ADDR  00A6H     A   
LDHR . . . . . . . . . . .  D  ADDR  00AAH     A   
LDLR . . . . . . . . . . .  D  ADDR  00A9H     A   
LMSR . . . . . . . . . . .  D  ADDR  00A1H     A   
LSAIER . . . . . . . . . .  D  ADDR  00A1H     A   
LSCR . . . . . . . . . . .  D  ADDR  00A2H     A   
LSR. . . . . . . . . . . .  D  ADDR  00A3H     A   
LSSR . . . . . . . . . . .  D  ADDR  00A3H     A   
MCIR . . . . . . . . . . .  D  ADDR  00B6H     A   
MD0. . . . . . . . . . . .  D  ADDR  00F9H     A   
MD1. . . . . . . . . . . .  D  ADDR  00FAH     A   
MD2. . . . . . . . . . . .  D  ADDR  00FBH     A   
MD3. . . . . . . . . . . .  D  ADDR  00FCH     A   
MD4. . . . . . . . . . . .  D  ADDR  00FDH     A   
MD5. . . . . . . . . . . .  D  ADDR  00FEH     A   
MDR. . . . . . . . . . . .  D  ADDR  00B7H     A   
MXAX . . . . . . . . . . .  D  ADDR  00EAH     A   
OS_CPU_A_ASM . . . . . . .  -- ----  -------       
OV . . . . . . . . . . . .  B  ADDR  00D0H.2   A   
OWCIR. . . . . . . . . . .  D  ADDR  00D6H     A   
OWDR . . . . . . . . . . .  D  ADDR  00D7H     A   
P. . . . . . . . . . . . .  B  ADDR  00D0H.0   A   
P0 . . . . . . . . . . . .  D  ADDR  0080H     A   
P0_0 . . . . . . . . . . .  B  ADDR  0080H.0   A   
P0_1 . . . . . . . . . . .  B  ADDR  0080H.1   A   
P0_2 . . . . . . . . . . .  B  ADDR  0080H.2   A   
P0_3 . . . . . . . . . . .  B  ADDR  0080H.3   A   
P0_4 . . . . . . . . . . .  B  ADDR  0080H.4   A   
P0_5 . . . . . . . . . . .  B  ADDR  0080H.5   A   
P0_6 . . . . . . . . . . .  B  ADDR  0080H.6   A   
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE    15

P0_7 . . . . . . . . . . .  B  ADDR  0080H.7   A   
P1 . . . . . . . . . . . .  D  ADDR  0090H     A   
P1_0 . . . . . . . . . . .  B  ADDR  0090H.0   A   
P1_1 . . . . . . . . . . .  B  ADDR  0090H.1   A   
P1_2 . . . . . . . . . . .  B  ADDR  0090H.2   A   
P1_3 . . . . . . . . . . .  B  ADDR  0090H.3   A   
P1_4 . . . . . . . . . . .  B  ADDR  0090H.4   A   
P1_5 . . . . . . . . . . .  B  ADDR  0090H.5   A   
P1_6 . . . . . . . . . . .  B  ADDR  0090H.6   A   
P1_7 . . . . . . . . . . .  B  ADDR  0090H.7   A   
P2 . . . . . . . . . . . .  D  ADDR  00A0H     A   
P2_0 . . . . . . . . . . .  B  ADDR  00A0H.0   A   
P2_1 . . . . . . . . . . .  B  ADDR  00A0H.1   A   
P2_2 . . . . . . . . . . .  B  ADDR  00A0H.2   A   
P2_3 . . . . . . . . . . .  B  ADDR  00A0H.3   A   
P2_4 . . . . . . . . . . .  B  ADDR  00A0H.4   A   
P2_5 . . . . . . . . . . .  B  ADDR  00A0H.5   A   
P2_6 . . . . . . . . . . .  B  ADDR  00A0H.6   A   
P2_7 . . . . . . . . . . .  B  ADDR  00A0H.7   A   
P3 . . . . . . . . . . . .  D  ADDR  00B0H     A   
P3_0 . . . . . . . . . . .  B  ADDR  00B0H.0   A   
P3_1 . . . . . . . . . . .  B  ADDR  00B0H.1   A   
P3_2 . . . . . . . . . . .  B  ADDR  00B0H.2   A   
P3_3 . . . . . . . . . . .  B  ADDR  00B0H.3   A   
P3_4 . . . . . . . . . . .  B  ADDR  00B0H.4   A   
P3_5 . . . . . . . . . . .  B  ADDR  00B0H.5   A   
P3_6 . . . . . . . . . . .  B  ADDR  00B0H.6   A   
P3_7 . . . . . . . . . . .  B  ADDR  00B0H.7   A   
PCON . . . . . . . . . . .  D  ADDR  0087H     A   
PINT2. . . . . . . . . . .  B  ADDR  00F8H.0   A   
PINT3. . . . . . . . . . .  B  ADDR  00F8H.1   A   
PINT4. . . . . . . . . . .  B  ADDR  00F8H.2   A   
PINT5. . . . . . . . . . .  B  ADDR  00F8H.3   A   
PINT6. . . . . . . . . . .  B  ADDR  00F8H.4   A   
PISSR1 . . . . . . . . . .  D  ADDR  009EH     A   
PISSR2 . . . . . . . . . .  D  ADDR  009FH     A   
PR?LOADCTX . . . . . . . .  C  SEG   0000D3H       REL=UNIT, ALN=BYTE
PS0. . . . . . . . . . . .  B  ADDR  00B8H.4   A   
PS1. . . . . . . . . . . .  B  ADDR  00B8H.6   A   
PSW. . . . . . . . . . . .  D  ADDR  00D0H     A   
PT0. . . . . . . . . . . .  B  ADDR  00B8H.1   A   
PT1. . . . . . . . . . . .  B  ADDR  00B8H.3   A   
PT2. . . . . . . . . . . .  B  ADDR  00B8H.5   A   
PWDI . . . . . . . . . . .  B  ADDR  00F8H.5   A   
PX0. . . . . . . . . . . .  B  ADDR  00B8H.0   A   
PX1. . . . . . . . . . . .  B  ADDR  00B8H.2   A   
RB08 . . . . . . . . . . .  B  ADDR  0098H.2   A   
RB18 . . . . . . . . . . .  B  ADDR  00C0H.2   A   
RCLK . . . . . . . . . . .  B  ADDR  00C8H.5   A   
RD . . . . . . . . . . . .  B  ADDR  00B0H.7   A   
REN0 . . . . . . . . . . .  B  ADDR  0098H.4   A   
REN1 . . . . . . . . . . .  B  ADDR  00C0H.4   A   
RESTORECTX . . . . . . . .  C  ADDR  0022H     R   SEG=PR?LOADCTX
RI0. . . . . . . . . . . .  B  ADDR  0098H.0   A   
RI1. . . . . . . . . . . .  B  ADDR  00C0H.0   A   
RLDH . . . . . . . . . . .  D  ADDR  00CBH     A   
RLDL . . . . . . . . . . .  D  ADDR  00CAH     A   
RS0. . . . . . . . . . . .  B  ADDR  00D0H.3   A   
RS1. . . . . . . . . . . .  B  ADDR  00D0H.4   A   
RWT. . . . . . . . . . . .  B  ADDR  00D8H.0   A   
RXD. . . . . . . . . . . .  B  ADDR  00B0H.0   A   
SBUF0. . . . . . . . . . .  D  ADDR  0099H     A   
SBUF1. . . . . . . . . . .  D  ADDR  00C1H     A   
SC_1 . . . . . . . . . . .  C  ADDR  0084H     R   SEG=PR?LOADCTX
SC_2 . . . . . . . . . . .  C  ADDR  0095H     R   SEG=PR?LOADCTX
SC_3 . . . . . . . . . . .  C  ADDR  00B8H     R   SEG=PR?LOADCTX
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE    16

SC_4 . . . . . . . . . . .  C  ADDR  00C9H     R   SEG=PR?LOADCTX
SCON0. . . . . . . . . . .  D  ADDR  0098H     A   
SCON1. . . . . . . . . . .  D  ADDR  00C0H     A   
SDSTSR . . . . . . . . . .  D  ADDR  0094H     A   
SM00 . . . . . . . . . . .  B  ADDR  0098H.7   A   
SM01 . . . . . . . . . . .  B  ADDR  0098H.6   A   
SM02 . . . . . . . . . . .  B  ADDR  0098H.5   A   
SM10 . . . . . . . . . . .  B  ADDR  00C0H.7   A   
SM11 . . . . . . . . . . .  B  ADDR  00C0H.6   A   
SM12 . . . . . . . . . . .  B  ADDR  00C0H.5   A   
SP . . . . . . . . . . . .  D  ADDR  0081H     A   
SPICIR . . . . . . . . . .  D  ADDR  00CEH     A   
SPIDR. . . . . . . . . . .  D  ADDR  00CFH     A   
STACK_START. . . . . . . .  I  ADDR  0000H     R   SEG=?STACK
STATUS . . . . . . . . . .  D  ADDR  00E9H     A   
T0 . . . . . . . . . . . .  B  ADDR  00B0H.4   A   
T1 . . . . . . . . . . . .  B  ADDR  00B0H.5   A   
T2CON. . . . . . . . . . .  D  ADDR  00C8H     A   
T2IF . . . . . . . . . . .  D  ADDR  00C9H     A   
TA . . . . . . . . . . . .  D  ADDR  00EBH     A   
TB08 . . . . . . . . . . .  B  ADDR  0098H.3   A   
TB18 . . . . . . . . . . .  B  ADDR  00C0H.3   A   
TCIR . . . . . . . . . . .  D  ADDR  00AEH     A   
TCLK . . . . . . . . . . .  B  ADDR  00C8H.4   A   
TCON . . . . . . . . . . .  D  ADDR  0088H     A   
TDR. . . . . . . . . . . .  D  ADDR  00AFH     A   
TF0. . . . . . . . . . . .  B  ADDR  0088H.5   A   
TF1. . . . . . . . . . . .  B  ADDR  0088H.7   A   
TF2. . . . . . . . . . . .  B  ADDR  00C8H.7   A   
TH0. . . . . . . . . . . .  D  ADDR  008CH     A   
TH1. . . . . . . . . . . .  D  ADDR  008DH     A   
TH2. . . . . . . . . . . .  D  ADDR  00CDH     A   
TI0. . . . . . . . . . . .  B  ADDR  0098H.1   A   
TI1. . . . . . . . . . . .  B  ADDR  00C0H.1   A   
TICK_INT . . . . . . . . .  D  ADDR  0002H     R   SEG=DT?C_XBP
TL0. . . . . . . . . . . .  D  ADDR  008AH     A   
TL1. . . . . . . . . . . .  D  ADDR  008BH     A   
TL2. . . . . . . . . . . .  D  ADDR  00CCH     A   
TMOD . . . . . . . . . . .  D  ADDR  0089H     A   
TR0. . . . . . . . . . . .  B  ADDR  0088H.4   A   
TR1. . . . . . . . . . . .  B  ADDR  0088H.6   A   
TR2. . . . . . . . . . . .  B  ADDR  00C8H.2   A   
TXD. . . . . . . . . . . .  B  ADDR  00B0H.1   A   
UR2_DLH. . . . . . . . . .  D  ADDR  00E2H     A   
UR2_DLL. . . . . . . . . .  D  ADDR  00E1H     A   
UR2_FCR. . . . . . . . . .  D  ADDR  00E3H     A   
UR2_IER. . . . . . . . . .  D  ADDR  00E2H     A   
UR2_IIR. . . . . . . . . .  D  ADDR  00E3H     A   
UR2_LCR. . . . . . . . . .  D  ADDR  00E4H     A   
UR2_LSR. . . . . . . . . .  D  ADDR  00E6H     A   
UR2_MCR. . . . . . . . . .  D  ADDR  00E5H     A   
UR2_MSR. . . . . . . . . .  D  ADDR  00E7H     A   
UR2_RBR. . . . . . . . . .  D  ADDR  00E1H     A   
UR2_THR. . . . . . . . . .  D  ADDR  00E1H     A   
WDCON. . . . . . . . . . .  D  ADDR  00D8H     A   
WDIF . . . . . . . . . . .  B  ADDR  00D8H.3   A   
WR . . . . . . . . . . . .  B  ADDR  00B0H.6   A   
WTRF . . . . . . . . . . .  B  ADDR  00D8H.2   A   
WTST . . . . . . . . . . .  D  ADDR  0092H     A   
XMRHR. . . . . . . . . . .  D  ADDR  00A7H     A   
XMRLR. . . . . . . . . . .  D  ADDR  00A6H     A   
XMWHR. . . . . . . . . . .  D  ADDR  00A5H     A   
XMWLR. . . . . . . . . . .  D  ADDR  00A4H     A   


REGISTER BANK(S) USED: 0 
AX51 MACRO ASSEMBLER  OS_CPU_A                                                              05/20/13 14:16:33 PAGE    17



ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).

C51 COMPILER V9.06   BACREAL                                                               03/29/2013 16:57:10 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE BACREAL
OBJECT MODULE PLACED IN .\bacreal.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\bacnet\bacreal.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020
                    -) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\
                    -;..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC
                    -\buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;
                    -..\Src\FreeRTOSSource\include\;..\Src\schedule\;..\src\bacnet;..\src\include;..\src\LCD;..\src\version) DEFINE(KEIL_AX11
                    -000) VARBANKING DEBUG PRINT(.\bacreal.lst) OBJECT(.\bacreal.obj)

line level    source

   1          /*####COPYRIGHTBEGIN####
   2           -------------------------------------------
   3           Copyright (C) 2004-2008 Steve Karg
   4          
   5           This program is free software; you can redistribute it and/or
   6           modify it under the terms of the GNU General Public License
   7           as published by the Free Software Foundation; either version 2
   8           of the License, or (at your option) any later version.
   9          
  10           This program is distributed in the hope that it will be useful,
  11           but WITHOUT ANY WARRANTY; without even the implied warranty of
  12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13           GNU General Public License for more details.
  14          
  15           You should have received a copy of the GNU General Public License
  16           along with this program; if not, write to:
  17           The Free Software Foundation, Inc.
  18           59 Temple Place - Suite 330
  19           Boston, MA  02111-1307, USA.
  20          
  21           As a special exception, if other files instantiate templates or
  22           use macros or inline functions from this file, or you compile
  23           this file and link it with other works to produce a work based
  24           on this file, this file does not by itself cause the resulting
  25           work to be covered by the GNU General Public License. However
  26           the source code for this file must still be made available in
  27           accordance with section (3) of the GNU General Public License.
  28          
  29           This exception does not invalidate any other reasons why a work
  30           based on this file might be covered by the GNU General Public
  31           License.
  32           -------------------------------------------
  33          ####COPYRIGHTEND####*/
  34          
  35          #include <string.h>
  36          
  37          #include "../include/bacdef.h"
  38          #include "../include/bacdcode.h"
  39          #include "../include/bacenum.h"
  40          #include "../include/bits.h"
  41          #include "../include/bacstr.h"
  42          #include "../include/bacint.h"
  43          #include "../include/bacreal.h"
  44          
  45          /** @file bacreal.c  Encode/Decode Floating Point (Real) Types */
  46          
  47          /* NOTE: byte order plays a role in decoding multibyte values */
  48          /* http://www.unixpapa.com/incnote/byteorder.html */
  49          #ifndef BIG_ENDIAN
              #error Define BIG_ENDIAN=0 or BIG_ENDIAN=1 for BACnet Stack in compiler settings
C51 COMPILER V9.06   BACREAL                                                               03/29/2013 16:57:10 PAGE 2   

              #endif
  52          
  53          /* from clause 20.2.6 Encoding of a Real Number Value */
  54          /* returns the number of apdu bytes consumed */
  55          int decode_real(
  56              uint8_t * apdu,
  57              float *real_value)
  58          {
  59   1          union {
  60   1              uint8_t byte[4];
  61   1              float real_value;
  62   1          } my_data;
  63   1      
  64   1          /* NOTE: assumes the compiler stores float as IEEE-754 float */
  65   1      #if BIG_ENDIAN
                  my_data.byte[0] = apdu[0];
                  my_data.byte[1] = apdu[1];
                  my_data.byte[2] = apdu[2];
                  my_data.byte[3] = apdu[3];
              #else
  71   1          my_data.byte[0] = apdu[3];
  72   1          my_data.byte[1] = apdu[2];
  73   1          my_data.byte[2] = apdu[1];
  74   1          my_data.byte[3] = apdu[0];
  75   1      #endif
  76   1      
  77   1          *real_value = my_data.real_value;
  78   1      
  79   1          return 4;
  80   1      }
  81          
  82          int decode_real_safe(
  83              uint8_t * apdu,
  84              uint32_t len_value,
  85              float *real_value)
  86          {
  87   1          if (len_value != 4) {
  88   2              *real_value = 0.0f;
  89   2              return (int) len_value;
  90   2          } else {
  91   2              return decode_real(apdu, real_value);
  92   2          }
  93   1      }
  94          
  95          int decode_context_real(
  96              uint8_t * apdu,
  97              uint8_t tag_number,
  98              float *real_value)
  99          {
 100   1          uint32_t len_value;
 101   1          int len = 0;
 102   1      
 103   1          if (decode_is_context_tag(&apdu[len], tag_number)) {
 104   2              len +=
 105   2                  decode_tag_number_and_value(&apdu[len], &tag_number, &len_value);
 106   2              len += decode_real(&apdu[len], real_value);
 107   2          } else {
 108   2              len = -1;
 109   2          }
 110   1          return len;
 111   1      }
 112          
C51 COMPILER V9.06   BACREAL                                                               03/29/2013 16:57:10 PAGE 3   

 113          /* from clause 20.2.6 Encoding of a Real Number Value */
 114          /* returns the number of apdu bytes consumed */
 115          int encode_bacnet_real(
 116              float value,
 117              uint8_t * apdu)
 118          {
 119   1          union {
 120   1              uint8_t byte[4];
 121   1              float real_value;
 122   1          } my_data;
 123   1      
 124   1          /* NOTE: assumes the compiler stores float as IEEE-754 float */
 125   1          my_data.real_value = value;
 126   1      #if BIG_ENDIAN
                  apdu[0] = my_data.byte[0];
                  apdu[1] = my_data.byte[1];
                  apdu[2] = my_data.byte[2];
                  apdu[3] = my_data.byte[3];
              #else
 132   1          apdu[0] = my_data.byte[3];
 133   1          apdu[1] = my_data.byte[2];
 134   1          apdu[2] = my_data.byte[1];
 135   1          apdu[3] = my_data.byte[0];
 136   1      #endif
 137   1      
 138   1          return 4;
 139   1      }
 140          
 141          #if BACNET_USE_DOUBLE
 142          
 143          /* from clause 20.2.7 Encoding of a Double Precision Real Number Value */
 144          /* returns the number of apdu bytes consumed */
 145          int decode_double(
 146              uint8_t * apdu,
 147              double *double_value)
 148          {
 149   1          union {
 150   1              uint8_t byte[8];
 151   1              double double_value;
 152   1          } my_data;
 153   1      
 154   1          /* NOTE: assumes the compiler stores float as IEEE-754 float */
 155   1      #if BIG_ENDIAN
                  my_data.byte[0] = apdu[0];
                  my_data.byte[1] = apdu[1];
                  my_data.byte[2] = apdu[2];
                  my_data.byte[3] = apdu[3];
                  my_data.byte[4] = apdu[4];
                  my_data.byte[5] = apdu[5];
                  my_data.byte[6] = apdu[6];
                  my_data.byte[7] = apdu[7];
              #else
 165   1          my_data.byte[0] = apdu[7];
 166   1          my_data.byte[1] = apdu[6];
 167   1          my_data.byte[2] = apdu[5];
 168   1          my_data.byte[3] = apdu[4];
 169   1          my_data.byte[4] = apdu[3];
 170   1          my_data.byte[5] = apdu[2];
 171   1          my_data.byte[6] = apdu[1];
 172   1          my_data.byte[7] = apdu[0];
 173   1      #endif
 174   1      
C51 COMPILER V9.06   BACREAL                                                               03/29/2013 16:57:10 PAGE 4   

 175   1          *double_value = my_data.double_value;
 176   1      
 177   1          return 8;
 178   1      }
 179          
 180          int decode_double_safe(
 181              uint8_t * apdu,
 182              uint32_t len_value,
 183              double *double_value)
 184          {
 185   1          if (len_value != 8) {
 186   2              *double_value = 0.0;
 187   2              return (int) len_value;
 188   2          } else {
 189   2              return decode_double(apdu, double_value);
 190   2          }
 191   1      }
 192          
 193          /* from clause 20.2.7 Encoding of a Double Precision Real Number Value */
 194          /* returns the number of apdu bytes consumed */
 195          int encode_bacnet_double(
 196              double value,
 197              uint8_t * apdu)
 198          {
 199   1          union {
 200   1              uint8_t byte[8];
 201   1              double double_value;
 202   1          } my_data;
 203   1      
 204   1          /* NOTE: assumes the compiler stores float as IEEE-754 float */
 205   1          my_data.double_value = value;
 206   1      #if BIG_ENDIAN
                  apdu[0] = my_data.byte[0];
                  apdu[1] = my_data.byte[1];
                  apdu[2] = my_data.byte[2];
                  apdu[3] = my_data.byte[3];
                  apdu[4] = my_data.byte[4];
                  apdu[5] = my_data.byte[5];
                  apdu[6] = my_data.byte[6];
                  apdu[7] = my_data.byte[7];
              #else
 216   1          apdu[0] = my_data.byte[7];
 217   1          apdu[1] = my_data.byte[6];
 218   1          apdu[2] = my_data.byte[5];
 219   1          apdu[3] = my_data.byte[4];
 220   1          apdu[4] = my_data.byte[3];
 221   1          apdu[5] = my_data.byte[2];
 222   1          apdu[6] = my_data.byte[1];
 223   1          apdu[7] = my_data.byte[0];
 224   1      #endif
 225   1      
 226   1          return 8;
 227   1      }
 228          
 229          int decode_context_double(
 230              uint8_t * apdu,
 231              uint8_t tag_number,
 232              double *double_value)
 233          {
 234   1          uint32_t len_value;
 235   1          int len = 0;
 236   1      
C51 COMPILER V9.06   BACREAL                                                               03/29/2013 16:57:10 PAGE 5   

 237   1          if (decode_is_context_tag(&apdu[len], tag_number)) {
 238   2              len +=
 239   2                  decode_tag_number_and_value(&apdu[len], &tag_number, &len_value);
 240   2              len += decode_double(&apdu[len], double_value);
 241   2          } else {
 242   2              len = -1;
 243   2          }
 244   1          return len;
 245   1      }
 246          #endif
 247          
 248          /* end of decoding_encoding.c */
 249          #ifdef TEST
              #include <assert.h>
              #include <string.h>
              #include <ctype.h>
              #include "ctest.h"
              
              void testBACreal(
                  Test * pTest)
              {
                  float real_value = 3.14159F, test_real_value = 0.0;
                  uint8_t apdu[MAX_APDU] = { 0 };
                  int len = 0, test_len = 0;
              
                  len = encode_bacnet_real(real_value, &apdu[0]);
                  ct_test(pTest, len == 4);
                  test_len = decode_real(&apdu[0], &test_real_value);
                  ct_test(pTest, test_len == len);
                  ct_test(pTest, test_real_value == real_value);
              }
              
              void testBACdouble(
                  Test * pTest)
              {
                  double double_value = 3.1415927, test_double_value = 0.0;
                  uint8_t apdu[MAX_APDU] = { 0 };
                  int len = 0, test_len = 0;
              
                  len = encode_bacnet_double(double_value, &apdu[0]);
                  ct_test(pTest, len == 8);
                  test_len = decode_double(&apdu[0], &test_double_value);
                  ct_test(pTest, test_len == len);
                  ct_test(pTest, test_double_value == double_value);
              }
              
              #ifdef TEST_BACNET_REAL
              int main(
                  void)
              {
                  Test *pTest;
                  bool rc;
              
                  pTest = ct_create("BACreal", NULL);
                  /* individual tests */
                  rc = ct_addTestFunction(pTest, testBACreal);
                  assert(rc);
                  rc = ct_addTestFunction(pTest, testBACdouble);
                  assert(rc);
              
                  /* configure output */
                  ct_setStream(pTest, stdout);
C51 COMPILER V9.06   BACREAL                                                               03/29/2013 16:57:10 PAGE 6   

                  ct_run(pTest);
                  (void) ct_report(pTest);
                  ct_destroy(pTest);
              
                  return 0;
              }
              #endif /* TEST_BACNET_REAL */
              #endif /* TEST */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1428    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      88
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE     1


MACRO ASSEMBLER AX51 V3.07c
OBJECT MODULE PLACED IN .\queue.OBJ
ASSEMBLER INVOKED BY: d:\Keil_4_9.06\C51\BIN\AX51.EXE .\queue.src PR(.\queue.ls1) EP DEBUG MOD_CONT

LOC    OBJ             LINE     SOURCE

                          1     ; .\queue.SRC generated from: ..\src\FreeRtossource\queue.c
                          2     ; COMPILER INVOKED BY:
                          3     ;        d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\FreeRtossource\queue.c LARGE OMF2 ROM(D16
                               M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\msti
                               mer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;..\SRC\debug\;..\SRC\dhcp\;..\S
                               RC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\
                               buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOS
                               Source\portable\Keil\AX11000\;..\Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEI
                               L_AX11000) VARBANKING DEBUG PRINT(.\queue.lst) SRC(.\queue.SRC)
                          4     
                          5     $mod_cont 
                          6     $nomod51 
                          7     
                          8     NAME    QUEUE
                          9     
 0098.3                  10     TB08    BIT     098H.3
 00C0.3                  11     TB18    BIT     0C0H.3
 0080                    12     P0      DATA    080H
 0098.7                  13     SM00    BIT     098H.7
 0090                    14     P1      DATA    090H
 00C0.7                  15     SM10    BIT     0C0H.7
 0098.6                  16     SM01    BIT     098H.6
 00A0                    17     P2      DATA    0A0H
 00C0.6                  18     SM11    BIT     0C0H.6
 0098.5                  19     SM02    BIT     098H.5
 00B0                    20     P3      DATA    0B0H
 00D0.6                  21     AC      BIT     0D0H.6
 00C0.5                  22     SM12    BIT     0C0H.5
 00B0.4                  23     T0      BIT     0B0H.4
 00CF                    24     SPIDR   DATA    0CFH
 00B0.5                  25     T1      BIT     0B0H.5
 00A8.7                  26     EA      BIT     0A8H.7
 00D6                    27     OWCIR   DATA    0D6H
 00C5                    28     CH      DATA    0C5H
 0083                    29     DPH0    DATA    083H
 00A8                    30     IE      DATA    0A8H
 0085                    31     DPH1    DATA    085H
 00C4                    32     CL      DATA    0C4H
 0080.0                  33     P0_0    BIT     080H.0
 0090.0                  34     P1_0    BIT     090H.0
 0080.1                  35     P0_1    BIT     080H.1
 00B9                    36     CCAPH0  DATA    0B9H
 0082                    37     DPL0    DATA    082H
 00A0.0                  38     P2_0    BIT     0A0H.0
 0090.1                  39     P1_1    BIT     090H.1
 0080.2                  40     P0_2    BIT     080H.2
 00BA                    41     CCAPH1  DATA    0BAH
 0084                    42     DPL1    DATA    084H
 00B0.0                  43     P3_0    BIT     0B0H.0
 00A0.1                  44     P2_1    BIT     0A0H.1
 0090.2                  45     P1_2    BIT     090H.2
 0080.3                  46     P0_3    BIT     080H.3
 00E2                    47     UR2_DLH DATA    0E2H
 00BB                    48     CCAPH2  DATA    0BBH
 00A7                    49     XMRHR   DATA    0A7H
 00B0.1                  50     P3_1    BIT     0B0H.1
 00A0.2                  51     P2_2    BIT     0A0H.2
 0090.3                  52     P1_3    BIT     090H.3
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE     2

 0080.4                  53     P0_4    BIT     080H.4
 00BC                    54     CCAPH3  DATA    0BCH
 00B0.2                  55     P3_2    BIT     0B0H.2
 00A0.3                  56     P2_3    BIT     0A0H.3
 0090.4                  57     P1_4    BIT     090H.4
 0080.5                  58     P0_5    BIT     080H.5
 00EB                    59     TA      DATA    0EBH
 00BD                    60     CCAPH4  DATA    0BDH
 00B1                    61     CCAPL0  DATA    0B1H
 00C8.6                  62     EXF2    BIT     0C8H.6
 00B0.7                  63     RD      BIT     0B0H.7
 00B0.3                  64     P3_3    BIT     0B0H.3
 00A0.4                  65     P2_4    BIT     0A0H.4
 0098.4                  66     REN0    BIT     098H.4
 0090.5                  67     P1_5    BIT     090H.5
 0080.6                  68     P0_6    BIT     080H.6
 00E3                    69     UR2_FCR DATA    0E3H
 00D1                    70     CCAPM0  DATA    0D1H
 00C9                    71     T2IF    DATA    0C9H
 00B2                    72     CCAPL1  DATA    0B2H
 00C0.4                  73     REN1    BIT     0C0H.4
 00B0.4                  74     P3_4    BIT     0B0H.4
 00A0.5                  75     P2_5    BIT     0A0H.5
 0090.6                  76     P1_6    BIT     090H.6
 0080.7                  77     P0_7    BIT     080H.7
 00E1                    78     UR2_DLL DATA    0E1H
 00D2                    79     CCAPM1  DATA    0D2H
 00B3                    80     CCAPL2  DATA    0B3H
 00A6                    81     XMRLR   DATA    0A6H
 00B0.5                  82     P3_5    BIT     0B0H.5
 00A0.6                  83     P2_6    BIT     0A0H.6
 0090.7                  84     P1_7    BIT     090H.7
 00D3                    85     CCAPM2  DATA    0D3H
 00B4                    86     CCAPL3  DATA    0B4H
 00A5                    87     XMWHR   DATA    0A5H
 00B0.6                  88     P3_6    BIT     0B0H.6
 00A0.7                  89     P2_7    BIT     0A0H.7
 00D4                    90     CCAPM3  DATA    0D4H
 00B8                    91     IP      DATA    0B8H
 00B5                    92     CCAPL4  DATA    0B5H
 00B0.7                  93     P3_7    BIT     0B0H.7
 00D5                    94     CCAPM4  DATA    0D5H
 009A                    95     DBAR    DATA    09AH
 00E2                    96     UR2_IER DATA    0E2H
 00D0.7                  97     CY      BIT     0D0H.7
 00B0.2                  98     INT0    BIT     0B0H.2
 00E4                    99     UR2_LCR DATA    0E4H
 00A4                   100     XMWLR   DATA    0A4H
 00B0.3                 101     INT1    BIT     0B0H.3
 00E5                   102     UR2_MCR DATA    0E5H
 0093                   103     DPX0    DATA    093H
 0096                   104     I2CCIR  DATA    096H
 0095                   105     DPX1    DATA    095H
 00E3                   106     UR2_IIR DATA    0E3H
 00E1                   107     UR2_RBR DATA    0E1H
 009D                   108     ACON    DATA    09DH
 009B                   109     DCIR    DATA    09BH
 0081                   110     SP      DATA    081H
 00C3                   111     CCON    DATA    0C3H
 00C2                   112     CMOD    DATA    0C2H
 00D0.2                 113     OV      BIT     0D0H.2
 00B0.6                 114     WR      BIT     0B0H.6
 00E1                   115     UR2_THR DATA    0E1H
 00E8.5                 116     EWDI    BIT     0E8H.5
 00D8.3                 117     WDIF    BIT     0D8H.3
 00CB                   118     RLDH    DATA    0CBH
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE     3

 00BE                   119     EPCR    DATA    0BEH
 00AA                   120     LDHR    DATA    0AAH
 00E6                   121     UR2_LSR DATA    0E6H
 00BF                   122     EPDR    DATA    0BFH
 00B6                   123     MCIR    DATA    0B6H
 00C8.5                 124     RCLK    BIT     0C8H.5
 00E7                   125     UR2_MSR DATA    0E7H
 00C8.4                 126     TCLK    BIT     0C8H.4
 00CA                   127     RLDL    DATA    0CAH
 00A9                   128     LDLR    DATA    0A9H
 0087                   129     PCON    DATA    087H
 00DE                   130     CANCIR  DATA    0DEH
 00AE                   131     TCIR    DATA    0AEH
 00F8.5                 132     PWDI    BIT     0F8H.5
 00A2                   133     LSCR    DATA    0A2H
 0089                   134     TMOD    DATA    089H
 0088                   135     TCON    DATA    088H
 00D7                   136     OWDR    DATA    0D7H
 0088.1                 137     IE0     BIT     088H.1
 0088.3                 138     IE1     BIT     088H.3
 00EA                   139     MXAX    DATA    0EAH
 00A1                   140     LMSR    DATA    0A1H
 00F9                   141     MD0     DATA    0F9H
 00F0                   142     B       DATA    0F0H
 00FA                   143     MD1     DATA    0FAH
 00A1                   144     LSAIER  DATA    0A1H
 00FB                   145     MD2     DATA    0FBH
 00D8.2                 146     WTRF    BIT     0D8H.2
 00FC                   147     MD3     DATA    0FCH
 009E                   148     PISSR1  DATA    09EH
 00FD                   149     MD4     DATA    0FDH
 00A3                   150     LSSR    DATA    0A3H
 009F                   151     PISSR2  DATA    09FH
 00FE                   152     MD5     DATA    0FEH
 00E0                   153     ACC     DATA    0E0H
 00A8.4                 154     ES0     BIT     0A8H.4
 00C8.1                 155     CT2     BIT     0C8H.1
 00A8.6                 156     ES1     BIT     0A8H.6
 00A8.1                 157     ET0     BIT     0A8H.1
 00A8.3                 158     ET1     BIT     0A8H.3
 0088.5                 159     TF0     BIT     088H.5
 00A8.5                 160     ET2     BIT     0A8H.5
 0098.0                 161     RI0     BIT     098H.0
 0088.7                 162     TF1     BIT     088H.7
 00C8.7                 163     TF2     BIT     0C8H.7
 00C0.0                 164     RI1     BIT     0C0H.0
 00CE                   165     SPICIR  DATA    0CEH
 008C                   166     TH0     DATA    08CH
 00A8.0                 167     EX0     BIT     0A8H.0
 0098.1                 168     TI0     BIT     098H.1
 0088.0                 169     IT0     BIT     088H.0
 008D                   170     TH1     DATA    08DH
 00C0.1                 171     TI1     BIT     0C0H.1
 00A8.2                 172     EX1     BIT     0A8H.2
 0088.2                 173     IT1     BIT     088H.2
 00CD                   174     TH2     DATA    0CDH
 00D0.0                 175     P       BIT     0D0H.0
 008A                   176     TL0     DATA    08AH
 008F                   177     CSREPR  DATA    08FH
 008B                   178     TL1     DATA    08BH
 00CC                   179     TL2     DATA    0CCH
 00B8.4                 180     PS0     BIT     0B8H.4
 00E8                   181     EIE     DATA    0E8H
 0092                   182     WTST    DATA    092H
 00B8.6                 183     PS1     BIT     0B8H.6
 00B8.1                 184     PT0     BIT     0B8H.1
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE     4

 0091                   185     EIF     DATA    091H
 00D0.3                 186     RS0     BIT     0D0H.3
 00B8.3                 187     PT1     BIT     0B8H.3
 0097                   188     I2CDR   DATA    097H
 00D0.4                 189     RS1     BIT     0D0H.4
 00B8.5                 190     PT2     BIT     0B8H.5
 0088.4                 191     TR0     BIT     088H.4
 0088.6                 192     TR1     BIT     088H.6
 00C8.2                 193     TR2     BIT     0C8H.2
 00B8.0                 194     PX0     BIT     0B8H.0
 00B8.2                 195     PX1     BIT     0B8H.2
 009C                   196     DDR     DATA    09CH
 0083                   197     DPH     DATA    083H
 00F8                   198     EIP     DATA    0F8H
 0082                   199     DPL     DATA    082H
 00A2                   200     LCR     DATA    0A2H
 0099                   201     SBUF0   DATA    099H
 00C1                   202     SBUF1   DATA    0C1H
 00E8.0                 203     EINT2   BIT     0E8H.0
 00C8.3                 204     EXEN2   BIT     0C8H.3
 00B7                   205     MDR     DATA    0B7H
 00E8.1                 206     EINT3   BIT     0E8H.1
 00C8.0                 207     CPRL2   BIT     0C8H.0
 0098                   208     SCON0   DATA    098H
 00E8.2                 209     EINT4   BIT     0E8H.2
 00C0                   210     SCON1   DATA    0C0H
 0094                   211     SDSTSR  DATA    094H
 00E8.3                 212     EINT5   BIT     0E8H.3
 00E9                   213     STATUS  DATA    0E9H
 00E8.4                 214     EINT6   BIT     0E8H.4
 00C8                   215     T2CON   DATA    0C8H
 0086                   216     DPS     DATA    086H
 00DF                   217     CANDR   DATA    0DFH
 00AF                   218     TDR     DATA    0AFH
 00A5                   219     LDAHR   DATA    0A5H
 0093                   220     DPX     DATA    093H
 00AD                   221     DMAHR   DATA    0ADH
 00F8.0                 222     PINT2   BIT     0F8H.0
 00B0.0                 223     RXD     BIT     0B0H.0
 00F8.1                 224     PINT3   BIT     0F8H.1
 008E                   225     CKCON   DATA    08EH
 00F8.2                 226     PINT4   BIT     0F8H.2
 00D8.1                 227     EWT     BIT     0D8H.1
 00B0.1                 228     TXD     BIT     0B0H.1
 00A4                   229     LDALR   DATA    0A4H
 00F8.3                 230     PINT5   BIT     0F8H.3
 00AB                   231     DMALR   DATA    0ABH
 00A3                   232     LSR     DATA    0A3H
 00F8.4                 233     PINT6   BIT     0F8H.4
 00AC                   234     DMAMR   DATA    0ACH
 00FF                   235     ARCON   DATA    0FFH
 00D0.5                 236     F0      BIT     0D0H.5
 00D0.1                 237     F1      BIT     0D0H.1
 00A6                   238     LDCSR   DATA    0A6H
 00D0                   239     PSW     DATA    0D0H
 0098.2                 240     RB08    BIT     098H.2
 00D8                   241     WDCON   DATA    0D8H
 00D8.0                 242     RWT     BIT     0D8H.0
 00C0.2                 243     RB18    BIT     0C0H.2
------                  244     ?PR?_?xQueueCreate?QUEUE                 SEGMENT ECODE INSEG 
------                  245     ?PR?_?cQueueSend?QUEUE                   SEGMENT ECODE INSEG 
------                  246     ?PR?_?cQueueSendFromISR?QUEUE            SEGMENT ECODE INSEG 
------                  247     ?PR?_?cQueueReceive?QUEUE                SEGMENT ECODE INSEG 
------                  248     ?PR?_?cQueueReceiveFromISR?QUEUE         SEGMENT ECODE INSEG 
------                  249     ?PR?_?ucQueueMessagesWaiting?QUEUE       SEGMENT ECODE INSEG 
------                  250     ?PR?_?vQueueDelete?QUEUE                 SEGMENT ECODE INSEG 
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE     5

------                  251     ?PR?_?prvLockQueue?QUEUE                 SEGMENT ECODE INSEG 
------                  252     ?PR?_?prvUnlockQueue?QUEUE               SEGMENT ECODE INSEG 
------                  253     ?PR?_?prvIsQueueEmpty?QUEUE              SEGMENT ECODE INSEG 
------                  254     ?PR?_?prvIsQueueFull?QUEUE               SEGMENT ECODE INSEG 
                        255             EXTRN   CODE (_?cTaskResumeAll)
                        256             EXTRN   CODE (_?vTaskSuspendAll)
                        257             EXTRN   CODE (_?vPortYield)
                        258             EXTRN   CODE (_?vPortFree)
                        259             EXTRN   CODE (_?cTaskRemoveFromEventList)
                        260             EXTRN   CODE (_?vListInitialise)
                        261             EXTRN   CODE (_?vTaskPlaceOnEventList)
                        262             EXTRN   CODE (_?pvPortMalloc)
                        263             EXTRN   CODE (?C?ADDXBP)
                        264             EXTRN   CODE (?C?XBPOFF)
                        265             EXTRN   DATA (?C_XBP)
                        266             EXTRN   NUMBER (?C?XDATASEG)
                        267             EXTRN   CODE (?C?PSTPTR)
                        268             EXTRN   CODE (?C?PLDPTR)
                        269             EXTRN   CODE (?C?CSTPTR)
                        270             EXTRN   CODE (?C?IMUL)
                        271             EXTRN   CODE (?C?ULCMP)
                        272             EXTRN   CODE (?C?CLDPTR)
                        273             EXTRN   CODE (?C?COPY)
                        274             EXTRN   CODE (?C?CILDPTR)
                        275             EXTRN   CODE (?C?IILDPTR)
                        276             EXTRN   CODE (?C?ILDPTR)
                        277             PUBLIC  _?vQueueDelete
                        278             PUBLIC  _?ucQueueMessagesWaiting
                        279             PUBLIC  _?cQueueReceiveFromISR
                        280             PUBLIC  _?cQueueReceive
                        281             PUBLIC  _?cQueueSendFromISR
                        282             PUBLIC  _?cQueueSend
                        283             PUBLIC  _?xQueueCreate
                        284     ; /*
                        285     ;       FreeRTOS V2.6.0 - Copyright (C) 2003 - 2005 Richard Barry.
                        286     ; 
                        287     ;       This file is part of the FreeRTOS distribution.
                        288     ; 
                        289     ;       FreeRTOS is free software; you can redistribute it and/or modify
                        290     ;       it under the terms of the GNU General Public License as published by
                        291     ;       the Free Software Foundation; either version 2 of the License, or
                        292     ;       (at your option) any later version.
                        293     ; 
                        294     ;       FreeRTOS is distributed in the hope that it will be useful,
                        295     ;       but WITHOUT ANY WARRANTY; without even the implied warranty of
                        296     ;       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        297     ;       GNU General Public License for more details.
                        298     ; 
                        299     ;       You should have received a copy of the GNU General Public License
                        300     ;       along with FreeRTOS; if not, write to the Free Software
                        301     ;       Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
                        302     ; 
                        303     ;       A special exception to the GPL can be applied should you wish to distribute
                        304     ;       a combined work that includes FreeRTOS, without being obliged to provide
                        305     ;       the source code for any proprietary components.  See the licensing section 
                        306     ;       of http://www.FreeRTOS.org for full details of how and when the exception
                        307     ;       can be applied.
                        308     ; 
                        309     ;       ***************************************************************************
                        310     ;       See http://www.FreeRTOS.org for documentation, latest information, license 
                        311     ;       and contact details.  Please ensure to read the configuration and relevant 
                        312     ;       port sections of the online documentation.
                        313     ;       ***************************************************************************
                        314     ; */
                        315     ; 
                        316     ; /*
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE     6

                        317     ; Changes from V1.01
                        318     ; 
                        319     ;       + More use of 8bit data types.
                        320     ;       + Function name prefixes changed where the data type returned has changed.
                        321     ; 
                        322     ; Changed from V2.0.0
                        323     ; 
                        324     ;       + Added the queue locking mechanism and make more use of the scheduler
                        325     ;         suspension feature to minimise the time interrupts have to be disabled
                        326     ;         when accessing a queue.
                        327     ; 
                        328     ; Changed from V2.2.0
                        329     ; 
                        330     ;       + Explicit use of 'signed' qualifier on portCHAR types added.
                        331     ; */
                        332     ; 
                        333     ; #include <stdlib.h>
                        334     ; #include <string.h>
                        335     ; #include "projdefs.h"
                        336     ; #include "portable.h"
                        337     ; #include "errors.h"
                        338     ; #include "task.h"
                        339     ; #include "list.h"
                        340     ; 
                        341     ; /*-----------------------------------------------------------
                        342     ;  * PUBLIC LIST API documented in list.h
                        343     ;  *----------------------------------------------------------*/
                        344     ; 
                        345     ; /* Constants used with the cRxLock and cTxLock structure members. */
                        346     ; #define queueUNLOCKED ( ( signed portCHAR ) -1 )
                        347     ; 
                        348     ; /*
                        349     ;  * Definition of the queue used by the scheduler.
                        350     ;  * Items are queued by copy, not reference.
                        351     ;  */
                        352     ; typedef struct QueueDefinition
                        353     ; {
                        354     ;       signed portCHAR *pcHead;                                /*< Points to the beginn
                               ing of the queue storage area. */
                        355     ;       signed portCHAR *pcTail;                                /*< Points to the byte a
                               t the end of the queue storage area.  Once more byte is allocated than necessary to store
                                the queue items, this is used as a marker. */
                        356     ; 
                        357     ;       signed portCHAR *pcWriteTo;                             /*< Points to the free n
                               ext place in the storage area. */
                        358     ;       signed portCHAR *pcReadFrom;                    /*< Points to the last place tha
                               t a queued item was read from. */
                        359     ; 
                        360     ;       xList xTasksWaitingToSend;                              /*< List of tasks that a
                               re blocked waiting to post onto this queue.  Stored in priority order. */
                        361     ;       xList xTasksWaitingToReceive;                   /*< List of tasks that are block
                               ed waiting to read from this queue.  Stored in priority order. */
                        362     ; 
                        363     ;       unsigned portCHAR ucMessagesWaiting;    /*< The number of items currently in the
                                queue. */
                        364     ;       unsigned portCHAR ucLength;                             /*< The length of the qu
                               eue defined as the number of items it will hold, not the number of bytes. */
                        365     ;       unsigned portCHAR ucItemSize;                   /*< The size of each items that 
                               the queue will hold. */
                        366     ; 
                        367     ;       signed portCHAR cRxLock;                                /*< Stores the number of
                                items received from the queue (removed from the queue) while the queue was locked.  Set 
                               to queueUNLOCKED when the queue is not locked. */
                        368     ;       signed portCHAR cTxLock;                                /*< Stores the number of
                                items transmitted to the queue (added to the queue) while the queue was locked.  Set to 
                               queueUNLOCKED when the queue is not locked. */
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE     7

                        369     ; } xQUEUE;
                        370     ; /*-----------------------------------------------------------*/
                        371     ; 
                        372     ; /*
                        373     ;  * Inside this file xQueueHandle is a pointer to a xQUEUE structure.
                        374     ;  * To keep the definition private the API header file defines it as a
                        375     ;  * pointer to void. 
                        376     ;  */
                        377     ; typedef xQUEUE * xQueueHandle;
                        378     ; 
                        379     ; /*
                        380     ;  * Prototypes for public functions are included here so we don't have to
                        381     ;  * include the API header file (as it defines xQueueHandle differently).  These
                        382     ;  * functions are documented in the API header file. 
                        383     ;  */
                        384     ; xQueueHandle xQueueCreate( unsigned portCHAR ucQueueLength, unsigned portCHAR ucItemSi
                               ze ) reentrant;
                        385     ; signed portCHAR cQueueSend( xQueueHandle xQueue, const void * pvItemToQueue, portTickT
                               ype xTicksToWait ) reentrant;
                        386     ; unsigned portCHAR ucQueueMessagesWaiting( xQueueHandle pxQueue ) reentrant;
                        387     ; void vQueueDelete( xQueueHandle xQueue ) reentrant;
                        388     ; signed portCHAR cQueueSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, si
                               gned portCHAR cTaskPreviouslyWoken ) reentrant;
                        389     ; signed portCHAR cQueueReceive( xQueueHandle pxQueue, void *pcBuffer, portTickType xTic
                               ksToWait ) reentrant;
                        390     ; signed portCHAR cQueueReceiveFromISR( xQueueHandle pxQueue, void *pcBuffer, signed por
                               tCHAR *pcTaskWoken ) reentrant;
                        391     ; 
                        392     ; #ifdef KEIL_AX11000
                        393     ; /*
                        394     ;  * Mark a queue as locked.  Locking a queue prevents an ISR from 
                        395     ;  * accessing the queue event lists. 
                        396     ;  */
                        397     ; static void prvLockQueue( xQueueHandle pxQueue ) reentrant;
                        398     ; #endif
                        399     ; 
                        400     ; /* 
                        401     ;  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not 
                        402     ;  * prevent an ISR from adding or removing items to the queue, but does prevent 
                        403     ;  * an ISR from removing tasks from the queue event lists.  If an ISR finds a 
                        404     ;  * queue is locked it will instead increment the appropriate queue lock count 
                        405     ;  * to indicate that a task may require unblocking.  When the queue in unlocked
                        406     ;  * these lock counts are inspected, and the appropriate action taken.
                        407     ;  */
                        408     ; static signed portCHAR prvUnlockQueue( xQueueHandle pxQueue ) reentrant;
                        409     ; 
                        410     ; /*
                        411     ;  * Uses a critical section to determine if there is any data in a queue.
                        412     ;  *
                        413     ;  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
                        414     ;  */
                        415     ; static signed portCHAR prvIsQueueEmpty( const xQueueHandle pxQueue ) reentrant;
                        416     ; 
                        417     ; /*
                        418     ;  * Uses a critical section to determine if there is any space in a queue.
                        419     ;  *
                        420     ;  * @return pdTRUE if there is no space, otherwise pdFALSE;
                        421     ;  */
                        422     ; static signed portCHAR prvIsQueueFull( const xQueueHandle pxQueue ) reentrant;
                        423     ; 
                        424     ; /*
                        425     ;  * Macro that copies an item into the queue.  This is done by copying the item
                        426     ;  * byte for byte, not by reference.  Updates the queue state to ensure it's
                        427     ;  * integrity after the copy.
                        428     ;  */
                        429     ; #define prvCopyQueueData( pxQueue, pvItemToQueue )                                    
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE     8

                                                                                       \
                        430     ;       memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->ucIt
                               emSize );       \
                        431     ;       ++( pxQueue->ucMessagesWaiting );                                               
                                                                                                       \
                        432     ;       pxQueue->pcWriteTo += pxQueue->ucItemSize;                                      
                                                                                               \
                        433     ;       if( pxQueue->pcWriteTo >= pxQueue->pcTail )                                     
                                                                                               \
                        434     ;       {                                                                               
                                                                                                                                       \
                        435     ;               pxQueue->pcWriteTo = pxQueue->pcHead;                                   
                                                                                               \
                        436     ;       }                                                                               
                                                                                                                                       \
                        437     ; 
                        438     ; /*-----------------------------------------------------------*/
                        439     ; 
                        440     ; #ifndef KEIL_AX11000
                        441     ; 
                        442     ; /*
                        443     ;  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from 
                        444     ;  * accessing the queue event lists. 
                        445     ;  */
                        446     ; #define prvLockQueue( pxQueue )                       \
                        447     ;       taskENTER_CRITICAL();                           \
                        448     ;               ++( pxQueue->cRxLock );                 \
                        449     ;               ++( pxQueue->cTxLock );                 \
                        450     ;       taskEXIT_CRITICAL();                            \
                        451     ; 
                        452     ; /*-----------------------------------------------------------*/
                        453     ; #endif
                        454     ; 
                        455     ; /*-----------------------------------------------------------
                        456     ;  * PUBLIC QUEUE MANAGEMENT API documented in queue.h
                        457     ;  *----------------------------------------------------------*/
                        458     ; 
                        459     ; xQueueHandle xQueueCreate( unsigned portCHAR ucQueueLength, unsigned portCHAR ucItemSi
                               ze ) reentrant
                        460     
------                  461             RSEG  ?PR?_?xQueueCreate?QUEUE
000000                  462     _?xQueueCreate:
                        463             USING   0
                        464                             ; SOURCE LINE # 176
000000 9000FFFF         465             MOV     DPTR,#0FFFFH
000004 12000000   E     466             LCALL   ?C?ADDXBP
000008 ED               467             MOV     A,R5
000009 F0               468             MOVX    @DPTR,A
00000A 9000FFFF         469             MOV     DPTR,#0FFFFH
00000E 12000000   E     470             LCALL   ?C?ADDXBP
000012 EF               471             MOV     A,R7
000013 F0               472             MOVX    @DPTR,A
000014 9000FFFB         473             MOV     DPTR,#0FFFBH
000018 12000000   E     474             LCALL   ?C?ADDXBP
                        475     ; {
                        476     ; xQUEUE *pxNewQueue;
                        477     ; unsigned portSHORT usQueueSizeInBytes;
                        478     ; 
                        479     ;       /* Allocate the new queue structure. */
                        480     ;       if( ucQueueLength > ( unsigned portCHAR ) 0 )
                        481                             ; SOURCE LINE # 182
00001C 90000005         482             MOV     DPTR,#05H
000020 12000000   E     483             LCALL   ?C?XBPOFF
000024 E0               484             MOVX    A,@DPTR
000025 D3               485             SETB    C
000026 9400             486             SUBB    A,#00H
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE     9

000028 5003             487             JNC     $ + 5H
00002A 010000     F     488             AJMP    ?C0001
                        489     ;       {
                        490                             ; SOURCE LINE # 183
                        491     ;               pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
                        492                             ; SOURCE LINE # 184
00002D 7E00             493             MOV     R6,#00H
00002F 7F41             494             MOV     R7,#041H
000031 12000000   E     495             LCALL   _?pvPortMalloc
000035 850083     E     496             MOV     DPH,?C_XBP
000038 850082     E     497             MOV     DPL,?C_XBP+01H
00003B 759300     E     498             MOV     DPX,#?C?XDATASEG
00003E EB               499             MOV     A,R3
00003F F0               500             MOVX    @DPTR,A
000040 A3               501             INC     DPTR
000041 EA               502             MOV     A,R2
000042 F0               503             MOVX    @DPTR,A
000043 A3               504             INC     DPTR
000044 E9               505             MOV     A,R1
000045 F0               506             MOVX    @DPTR,A
                        507     ;               if( pxNewQueue != NULL )
                        508                             ; SOURCE LINE # 185
000046 850083     E     509             MOV     DPH,?C_XBP
000049 850082     E     510             MOV     DPL,?C_XBP+01H
00004C 759300     E     511             MOV     DPX,#?C?XDATASEG
00004F E0               512             MOVX    A,@DPTR
000050 FB               513             MOV     R3,A
000051 A3               514             INC     DPTR
000052 E0               515             MOVX    A,@DPTR
000053 FA               516             MOV     R2,A
000054 A3               517             INC     DPTR
000055 E0               518             MOVX    A,@DPTR
000056 4A               519             ORL     A,R2
000057 4B               520             ORL     A,R3
000058 7003             521             JNZ     $ + 5H
00005A 010000     F     522             AJMP    ?C0001
                        523     ;               {
                        524                             ; SOURCE LINE # 186
                        525     ;                       /* Create the list of pointers to queue items.  The queue is one
                                byte 
                        526     ;                       longer than asked for to make wrap checking easier/faster. */
                        527     ;                       usQueueSizeInBytes = ( unsigned portSHORT ) ( ucQueueLength * uc
                               ItemSize ) + ( unsigned portSHORT ) 1;
                        528                             ; SOURCE LINE # 189
00005D 90000006         529             MOV     DPTR,#06H
000061 12000000   E     530             LCALL   ?C?XBPOFF
000065 E0               531             MOVX    A,@DPTR
000066 FF               532             MOV     R7,A
000067 90000005         533             MOV     DPTR,#05H
00006B 12000000   E     534             LCALL   ?C?XBPOFF
00006F E0               535             MOVX    A,@DPTR
000070 8FF0             536             MOV     B,R7
000072 A4               537             MUL     AB
000073 2401             538             ADD     A,#01H
000075 FF               539             MOV     R7,A
000076 E4               540             CLR     A
000077 35F0             541             ADDC    A,B
000079 FE               542             MOV     R6,A
00007A 90000003         543             MOV     DPTR,#03H
00007E 12000000   E     544             LCALL   ?C?XBPOFF
000082 EE               545             MOV     A,R6
000083 F0               546             MOVX    @DPTR,A
000084 A3               547             INC     DPTR
000085 EF               548             MOV     A,R7
000086 F0               549             MOVX    @DPTR,A
                        550     ; 
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    10

                        551     ;                       pxNewQueue->pcHead = ( signed portCHAR * ) pvPortMalloc( usQueue
                               SizeInBytes );
                        552                             ; SOURCE LINE # 191
000087 90000003         553             MOV     DPTR,#03H
00008B 12000000   E     554             LCALL   ?C?XBPOFF
00008F E0               555             MOVX    A,@DPTR
000090 FE               556             MOV     R6,A
000091 A3               557             INC     DPTR
000092 E0               558             MOVX    A,@DPTR
000093 FF               559             MOV     R7,A
000094 12000000   E     560             LCALL   _?pvPortMalloc
000098 C003             561             PUSH    AR3
00009A C002             562             PUSH    AR2
00009C C001             563             PUSH    AR1
00009E 850083     E     564             MOV     DPH,?C_XBP
0000A1 850082     E     565             MOV     DPL,?C_XBP+01H
0000A4 759300     E     566             MOV     DPX,#?C?XDATASEG
0000A7 E0               567             MOVX    A,@DPTR
0000A8 FB               568             MOV     R3,A
0000A9 A3               569             INC     DPTR
0000AA E0               570             MOVX    A,@DPTR
0000AB FA               571             MOV     R2,A
0000AC A3               572             INC     DPTR
0000AD E0               573             MOVX    A,@DPTR
0000AE F9               574             MOV     R1,A
0000AF 12000000   E     575             LCALL   ?C?PSTPTR
                        576     ;                       if( pxNewQueue->pcHead != NULL )
                        577                             ; SOURCE LINE # 192
0000B3 850083     E     578             MOV     DPH,?C_XBP
0000B6 850082     E     579             MOV     DPL,?C_XBP+01H
0000B9 759300     E     580             MOV     DPX,#?C?XDATASEG
0000BC E0               581             MOVX    A,@DPTR
0000BD FB               582             MOV     R3,A
0000BE A3               583             INC     DPTR
0000BF E0               584             MOVX    A,@DPTR
0000C0 FA               585             MOV     R2,A
0000C1 A3               586             INC     DPTR
0000C2 E0               587             MOVX    A,@DPTR
0000C3 F9               588             MOV     R1,A
0000C4 12000000   E     589             LCALL   ?C?PLDPTR
0000C8 E9               590             MOV     A,R1
0000C9 4A               591             ORL     A,R2
0000CA 4B               592             ORL     A,R3
0000CB 7003             593             JNZ     $ + 5H
0000CD 010000     F     594             AJMP    ?C0003
                        595     ;                       {
                        596                             ; SOURCE LINE # 193
                        597     ;                               /* Initialise the queue members as described above where
                                the 
                        598     ;                               queue type is defined. */
                        599     ;                               pxNewQueue->pcTail = pxNewQueue->pcHead + ( ucQueueLengt
                               h * ucItemSize );
                        600                             ; SOURCE LINE # 196
0000D0 850083     E     601             MOV     DPH,?C_XBP
0000D3 850082     E     602             MOV     DPL,?C_XBP+01H
0000D6 759300     E     603             MOV     DPX,#?C?XDATASEG
0000D9 E0               604             MOVX    A,@DPTR
0000DA FB               605             MOV     R3,A
0000DB A3               606             INC     DPTR
0000DC E0               607             MOVX    A,@DPTR
0000DD FA               608             MOV     R2,A
0000DE A3               609             INC     DPTR
0000DF E0               610             MOVX    A,@DPTR
0000E0 F9               611             MOV     R1,A
0000E1 12000000   E     612             LCALL   ?C?PLDPTR
0000E5 90000006         613             MOV     DPTR,#06H
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    11

0000E9 12000000   E     614             LCALL   ?C?XBPOFF
0000ED E0               615             MOVX    A,@DPTR
0000EE FF               616             MOV     R7,A
0000EF 90000005         617             MOV     DPTR,#05H
0000F3 12000000   E     618             LCALL   ?C?XBPOFF
0000F7 E0               619             MOVX    A,@DPTR
0000F8 8FF0             620             MOV     B,R7
0000FA A4               621             MUL     AB
0000FB 29               622             ADD     A,R1
0000FC F9               623             MOV     R1,A
0000FD EA               624             MOV     A,R2
0000FE 35F0             625             ADDC    A,B
000100 FA               626             MOV     R2,A
000101 C003             627             PUSH    AR3
000103 C002             628             PUSH    AR2
000105 C001             629             PUSH    AR1
000107 850083     E     630             MOV     DPH,?C_XBP
00010A 850082     E     631             MOV     DPL,?C_XBP+01H
00010D 759300     E     632             MOV     DPX,#?C?XDATASEG
000110 E0               633             MOVX    A,@DPTR
000111 FB               634             MOV     R3,A
000112 A3               635             INC     DPTR
000113 E0               636             MOVX    A,@DPTR
000114 FA               637             MOV     R2,A
000115 A3               638             INC     DPTR
000116 E0               639             MOVX    A,@DPTR
000117 2403             640             ADD     A,#03H
000119 F9               641             MOV     R1,A
00011A E4               642             CLR     A
00011B 3A               643             ADDC    A,R2
00011C FA               644             MOV     R2,A
00011D 12000000   E     645             LCALL   ?C?PSTPTR
                        646     ;                               pxNewQueue->ucMessagesWaiting = ( unsigned portCHAR ) 0;
                        647                             ; SOURCE LINE # 197
000121 850083     E     648             MOV     DPH,?C_XBP
000124 850082     E     649             MOV     DPL,?C_XBP+01H
000127 759300     E     650             MOV     DPX,#?C?XDATASEG
00012A E0               651             MOVX    A,@DPTR
00012B FB               652             MOV     R3,A
00012C A3               653             INC     DPTR
00012D E0               654             MOVX    A,@DPTR
00012E FA               655             MOV     R2,A
00012F A3               656             INC     DPTR
000130 E0               657             MOVX    A,@DPTR
000131 243C             658             ADD     A,#03CH
000133 F9               659             MOV     R1,A
000134 E4               660             CLR     A
000135 3A               661             ADDC    A,R2
000136 FA               662             MOV     R2,A
000137 E4               663             CLR     A
000138 12000000   E     664             LCALL   ?C?CSTPTR
                        665     ;                               pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
                        666                             ; SOURCE LINE # 198
00013C 850083     E     667             MOV     DPH,?C_XBP
00013F 850082     E     668             MOV     DPL,?C_XBP+01H
000142 759300     E     669             MOV     DPX,#?C?XDATASEG
000145 E0               670             MOVX    A,@DPTR
000146 FB               671             MOV     R3,A
000147 A3               672             INC     DPTR
000148 E0               673             MOVX    A,@DPTR
000149 FA               674             MOV     R2,A
00014A A3               675             INC     DPTR
00014B E0               676             MOVX    A,@DPTR
00014C F9               677             MOV     R1,A
00014D 12000000   E     678             LCALL   ?C?PLDPTR
000151 C003             679             PUSH    AR3
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    12

000153 C002             680             PUSH    AR2
000155 C001             681             PUSH    AR1
000157 850083     E     682             MOV     DPH,?C_XBP
00015A 850082     E     683             MOV     DPL,?C_XBP+01H
00015D 759300     E     684             MOV     DPX,#?C?XDATASEG
000160 E0               685             MOVX    A,@DPTR
000161 FB               686             MOV     R3,A
000162 A3               687             INC     DPTR
000163 E0               688             MOVX    A,@DPTR
000164 FA               689             MOV     R2,A
000165 A3               690             INC     DPTR
000166 E0               691             MOVX    A,@DPTR
000167 2406             692             ADD     A,#06H
000169 F9               693             MOV     R1,A
00016A E4               694             CLR     A
00016B 3A               695             ADDC    A,R2
00016C FA               696             MOV     R2,A
00016D 12000000   E     697             LCALL   ?C?PSTPTR
                        698     ;                               pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( ucQueu
                               eLength - ( unsigned portCHAR ) 1 ) * ucItemSize );
                        699                             ; SOURCE LINE # 199
000171 90000005         700             MOV     DPTR,#05H
000175 12000000   E     701             LCALL   ?C?XBPOFF
000179 E0               702             MOVX    A,@DPTR
00017A C3               703             CLR     C
00017B 9401             704             SUBB    A,#01H
00017D FF               705             MOV     R7,A
00017E E4               706             CLR     A
00017F 9400             707             SUBB    A,#00H
000181 FE               708             MOV     R6,A
000182 90000006         709             MOV     DPTR,#06H
000186 12000000   E     710             LCALL   ?C?XBPOFF
00018A E0               711             MOVX    A,@DPTR
00018B FD               712             MOV     R5,A
00018C 7C00             713             MOV     R4,#00H
00018E 12000000   E     714             LCALL   ?C?IMUL
000192 850083     E     715             MOV     DPH,?C_XBP
000195 850082     E     716             MOV     DPL,?C_XBP+01H
000198 759300     E     717             MOV     DPX,#?C?XDATASEG
00019B E0               718             MOVX    A,@DPTR
00019C FB               719             MOV     R3,A
00019D A3               720             INC     DPTR
00019E E0               721             MOVX    A,@DPTR
00019F FA               722             MOV     R2,A
0001A0 A3               723             INC     DPTR
0001A1 E0               724             MOVX    A,@DPTR
0001A2 F9               725             MOV     R1,A
0001A3 12000000   E     726             LCALL   ?C?PLDPTR
0001A7 E9               727             MOV     A,R1
0001A8 2F               728             ADD     A,R7
0001A9 F9               729             MOV     R1,A
0001AA EA               730             MOV     A,R2
0001AB 3E               731             ADDC    A,R6
0001AC FA               732             MOV     R2,A
0001AD C003             733             PUSH    AR3
0001AF C002             734             PUSH    AR2
0001B1 C001             735             PUSH    AR1
0001B3 850083     E     736             MOV     DPH,?C_XBP
0001B6 850082     E     737             MOV     DPL,?C_XBP+01H
0001B9 759300     E     738             MOV     DPX,#?C?XDATASEG
0001BC E0               739             MOVX    A,@DPTR
0001BD FB               740             MOV     R3,A
0001BE A3               741             INC     DPTR
0001BF E0               742             MOVX    A,@DPTR
0001C0 FA               743             MOV     R2,A
0001C1 A3               744             INC     DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    13

0001C2 E0               745             MOVX    A,@DPTR
0001C3 2409             746             ADD     A,#09H
0001C5 F9               747             MOV     R1,A
0001C6 E4               748             CLR     A
0001C7 3A               749             ADDC    A,R2
0001C8 FA               750             MOV     R2,A
0001C9 12000000   E     751             LCALL   ?C?PSTPTR
                        752     ;                               pxNewQueue->ucLength = ucQueueLength;
                        753                             ; SOURCE LINE # 200
0001CD 90000005         754             MOV     DPTR,#05H
0001D1 12000000   E     755             LCALL   ?C?XBPOFF
0001D5 E0               756             MOVX    A,@DPTR
0001D6 FF               757             MOV     R7,A
0001D7 850083     E     758             MOV     DPH,?C_XBP
0001DA 850082     E     759             MOV     DPL,?C_XBP+01H
0001DD 759300     E     760             MOV     DPX,#?C?XDATASEG
0001E0 E0               761             MOVX    A,@DPTR
0001E1 FB               762             MOV     R3,A
0001E2 A3               763             INC     DPTR
0001E3 E0               764             MOVX    A,@DPTR
0001E4 FA               765             MOV     R2,A
0001E5 A3               766             INC     DPTR
0001E6 E0               767             MOVX    A,@DPTR
0001E7 243D             768             ADD     A,#03DH
0001E9 F9               769             MOV     R1,A
0001EA E4               770             CLR     A
0001EB 3A               771             ADDC    A,R2
0001EC FA               772             MOV     R2,A
0001ED EF               773             MOV     A,R7
0001EE 12000000   E     774             LCALL   ?C?CSTPTR
                        775     ;                               pxNewQueue->ucItemSize = ucItemSize;
                        776                             ; SOURCE LINE # 201
0001F2 90000006         777             MOV     DPTR,#06H
0001F6 12000000   E     778             LCALL   ?C?XBPOFF
0001FA E0               779             MOVX    A,@DPTR
0001FB FF               780             MOV     R7,A
0001FC 850083     E     781             MOV     DPH,?C_XBP
0001FF 850082     E     782             MOV     DPL,?C_XBP+01H
000202 759300     E     783             MOV     DPX,#?C?XDATASEG
000205 E0               784             MOVX    A,@DPTR
000206 FB               785             MOV     R3,A
000207 A3               786             INC     DPTR
000208 E0               787             MOVX    A,@DPTR
000209 FA               788             MOV     R2,A
00020A A3               789             INC     DPTR
00020B E0               790             MOVX    A,@DPTR
00020C 243E             791             ADD     A,#03EH
00020E F9               792             MOV     R1,A
00020F E4               793             CLR     A
000210 3A               794             ADDC    A,R2
000211 FA               795             MOV     R2,A
000212 EF               796             MOV     A,R7
000213 12000000   E     797             LCALL   ?C?CSTPTR
                        798     ;                               pxNewQueue->cRxLock = queueUNLOCKED;
                        799                             ; SOURCE LINE # 202
000217 850083     E     800             MOV     DPH,?C_XBP
00021A 850082     E     801             MOV     DPL,?C_XBP+01H
00021D 759300     E     802             MOV     DPX,#?C?XDATASEG
000220 E0               803             MOVX    A,@DPTR
000221 FB               804             MOV     R3,A
000222 A3               805             INC     DPTR
000223 E0               806             MOVX    A,@DPTR
000224 FA               807             MOV     R2,A
000225 A3               808             INC     DPTR
000226 E0               809             MOVX    A,@DPTR
000227 243F             810             ADD     A,#03FH
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    14

000229 F9               811             MOV     R1,A
00022A E4               812             CLR     A
00022B 3A               813             ADDC    A,R2
00022C FA               814             MOV     R2,A
00022D 74FF             815             MOV     A,#0FFH
00022F 12000000   E     816             LCALL   ?C?CSTPTR
                        817     ;                               pxNewQueue->cTxLock = queueUNLOCKED;
                        818                             ; SOURCE LINE # 203
000233 850083     E     819             MOV     DPH,?C_XBP
000236 850082     E     820             MOV     DPL,?C_XBP+01H
000239 759300     E     821             MOV     DPX,#?C?XDATASEG
00023C E0               822             MOVX    A,@DPTR
00023D FB               823             MOV     R3,A
00023E A3               824             INC     DPTR
00023F E0               825             MOVX    A,@DPTR
000240 FA               826             MOV     R2,A
000241 A3               827             INC     DPTR
000242 E0               828             MOVX    A,@DPTR
000243 2440             829             ADD     A,#040H
000245 F9               830             MOV     R1,A
000246 E4               831             CLR     A
000247 3A               832             ADDC    A,R2
000248 FA               833             MOV     R2,A
000249 74FF             834             MOV     A,#0FFH
00024B 12000000   E     835             LCALL   ?C?CSTPTR
                        836     ; 
                        837     ;                               /* Likewise ensure the event queues start with the corre
                               ct state. */
                        838     ;                               vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
                        839                             ; SOURCE LINE # 206
00024F 850083     E     840             MOV     DPH,?C_XBP
000252 850082     E     841             MOV     DPL,?C_XBP+01H
000255 759300     E     842             MOV     DPX,#?C?XDATASEG
000258 E0               843             MOVX    A,@DPTR
000259 FB               844             MOV     R3,A
00025A A3               845             INC     DPTR
00025B E0               846             MOVX    A,@DPTR
00025C FA               847             MOV     R2,A
00025D A3               848             INC     DPTR
00025E E0               849             MOVX    A,@DPTR
00025F 240C             850             ADD     A,#0CH
000261 F9               851             MOV     R1,A
000262 E4               852             CLR     A
000263 3A               853             ADDC    A,R2
000264 FA               854             MOV     R2,A
000265 12000000   E     855             LCALL   _?vListInitialise
                        856     ;                               vListInitialise( &( pxNewQueue->xTasksWaitingToReceive )
                                ); 
                        857                             ; SOURCE LINE # 207
000269 850083     E     858             MOV     DPH,?C_XBP
00026C 850082     E     859             MOV     DPL,?C_XBP+01H
00026F 759300     E     860             MOV     DPX,#?C?XDATASEG
000272 E0               861             MOVX    A,@DPTR
000273 FB               862             MOV     R3,A
000274 A3               863             INC     DPTR
000275 E0               864             MOVX    A,@DPTR
000276 FA               865             MOV     R2,A
000277 A3               866             INC     DPTR
000278 E0               867             MOVX    A,@DPTR
000279 2424             868             ADD     A,#024H
00027B F9               869             MOV     R1,A
00027C E4               870             CLR     A
00027D 3A               871             ADDC    A,R2
00027E FA               872             MOV     R2,A
00027F 12000000   E     873             LCALL   _?vListInitialise
                        874     ; 
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    15

                        875     ;                               return  pxNewQueue;
                        876                             ; SOURCE LINE # 209
000283 850083     E     877             MOV     DPH,?C_XBP
000286 850082     E     878             MOV     DPL,?C_XBP+01H
000289 759300     E     879             MOV     DPX,#?C?XDATASEG
00028C E0               880             MOVX    A,@DPTR
00028D FB               881             MOV     R3,A
00028E A3               882             INC     DPTR
00028F E0               883             MOVX    A,@DPTR
000290 FA               884             MOV     R2,A
000291 A3               885             INC     DPTR
000292 E0               886             MOVX    A,@DPTR
000293 F9               887             MOV     R1,A
000294 801B             888             SJMP    ?C0004
                        889     ;                       }
                        890                             ; SOURCE LINE # 210
000296                  891     ?C0003:
                        892     ;                       else
                        893     ;                       {
                        894                             ; SOURCE LINE # 212
                        895     ;                               vPortFree( pxNewQueue );
                        896                             ; SOURCE LINE # 213
000296 850083     E     897             MOV     DPH,?C_XBP
000299 850082     E     898             MOV     DPL,?C_XBP+01H
00029C 759300     E     899             MOV     DPX,#?C?XDATASEG
00029F E0               900             MOVX    A,@DPTR
0002A0 FB               901             MOV     R3,A
0002A1 A3               902             INC     DPTR
0002A2 E0               903             MOVX    A,@DPTR
0002A3 FA               904             MOV     R2,A
0002A4 A3               905             INC     DPTR
0002A5 E0               906             MOVX    A,@DPTR
0002A6 F9               907             MOV     R1,A
0002A7 12000000   E     908             LCALL   _?vPortFree
                        909     ;                       }
                        910                             ; SOURCE LINE # 214
                        911     ;               }
                        912                             ; SOURCE LINE # 215
                        913     ;       }
                        914                             ; SOURCE LINE # 216
0002AB                  915     ?C0001:
                        916     ; 
                        917     ;       /* Will only reach here if we could not allocate enough memory or no memory
                        918     ;       was required. */
                        919     ;       return NULL;
                        920                             ; SOURCE LINE # 220
0002AB 7B00             921             MOV     R3,#00H
0002AD 7A00             922             MOV     R2,#00H
0002AF 7900             923             MOV     R1,#00H
                        924     ; }
                        925                             ; SOURCE LINE # 221
0002B1                  926     ?C0004:
0002B1 90000007         927             MOV     DPTR,#07H
0002B5 02000000   E     928             LJMP    ?C?ADDXBP
                        929     ; END OF _?xQueueCreate
                        930     
                        931     ; /*-----------------------------------------------------------*/
                        932     ; 
                        933     ; signed portCHAR cQueueSend( xQueueHandle pxQueue, const void *pvItemToQueue, portTickT
                               ype xTicksToWait ) reentrant
                        934     
------                  935             RSEG  ?PR?_?cQueueSend?QUEUE
000000                  936     _?cQueueSend:
                        937             USING   0
                        938                             ; SOURCE LINE # 224
000000 9000FFFD         939             MOV     DPTR,#0FFFDH
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    16

000004 12000000   E     940             LCALL   ?C?ADDXBP
000008 EB               941             MOV     A,R3
000009 F0               942             MOVX    @DPTR,A
00000A A3               943             INC     DPTR
00000B EA               944             MOV     A,R2
00000C F0               945             MOVX    @DPTR,A
00000D A3               946             INC     DPTR
00000E E9               947             MOV     A,R1
00000F F0               948             MOVX    @DPTR,A
000010 9000FFFF         949             MOV     DPTR,#0FFFFH
000014 12000000   E     950             LCALL   ?C?ADDXBP
                        951     ; {
                        952     ; signed portCHAR cReturn;
                        953     ; 
                        954     ;       /* Make sure other tasks do not access the queue. */
                        955     ;       vTaskSuspendAll();
                        956                             ; SOURCE LINE # 229
000018 12000000   E     957             LCALL   _?vTaskSuspendAll
                        958     ; 
                        959     ;       /* It is important that this is the only thread/ISR that modifies the
                        960     ;       ready or delayed lists until cTaskResumeAll() is called.  Places where 
                        961     ;       the ready/delayed lists are modified include:
                        962     ; 
                        963     ;               + vTaskDelay() -  Nothing can call vTaskDelay as the scheduler is 
                        964     ;                 suspended, vTaskDelay() cannot be called from an ISR.
                        965     ;               + vTaskPrioritySet() - Has a critical section around the access.
                        966     ;               + vTaskSwitchContext() - This will not get executed while the scheduler 
                        967     ;                 is suspended.
                        968     ;               + prvCheckDelayedTasks() - This will not get executed while the 
                        969     ;                 scheduler is suspended.
                        970     ;               + sTaskCreate() - Has a critical section around the access.
                        971     ;               + vTaskResume() - Has a critical section around the access.
                        972     ;               + cTaskResumeAll() - Has a critical section around the access.
                        973     ;               + cTaskRemoveFromEventList - Checks to see if the scheduler is 
                        974     ;                 suspended.  If so then the TCB being removed from the event is 
                        975     ;                 removed from the event and added to the xPendingReadyList.
                        976     ;       */
                        977     ; 
                        978     ;       /* Make sure interrupts do not access the queue event list. */
                        979     ;       prvLockQueue( pxQueue );
                        980                             ; SOURCE LINE # 251
00001C 12000000   F     981             LCALL   L?0077
                        982     ; 
                        983     ;       /* It is important that interrupts to not access the event list of the
                        984     ;       queue being modified here.  Places where the event list is modified
                        985     ;       include:
                        986     ; 
                        987     ;               + cQueueSendFromISR().  This checks the lock on the queue to see if
                        988     ;                 it has access.  If the queue is locked then the Tx lock count is 
                        989     ;                 incremented to signify that a task waiting for data can be made ready
                        990     ;                 once the queue lock is removed.  If the queue is not locked then
                        991     ;                 a task can be moved from the event list, but will not be removed
                        992     ;                 from the delayed list or placed in the ready list until the scheduler 
                        993     ;                 is unlocked.  
                        994     ; 
                        995     ;               + cQueueReceiveFromISR().  As per cQueueSendFromISR().
                        996     ;       */
                        997     ;               
                        998     ;       /* If the queue is already full we may have to block. */
                        999     ;       if( prvIsQueueFull( pxQueue ) )
                       1000                             ; SOURCE LINE # 269
000020 850083     E    1001             MOV     DPH,?C_XBP
000023 850082     E    1002             MOV     DPL,?C_XBP+01H
000026 A3              1003             INC     DPTR
000027 759300     E    1004             MOV     DPX,#?C?XDATASEG
00002A E0              1005             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    17

00002B FB              1006             MOV     R3,A
00002C A3              1007             INC     DPTR
00002D E0              1008             MOVX    A,@DPTR
00002E FA              1009             MOV     R2,A
00002F A3              1010             INC     DPTR
000030 E0              1011             MOVX    A,@DPTR
000031 F9              1012             MOV     R1,A
000032 12000000   F    1013             LCALL   _?prvIsQueueFull
000036 EF              1014             MOV     A,R7
000037 606E            1015             JZ      ?C0006
                       1016     ;       {
                       1017                             ; SOURCE LINE # 270
                       1018     ;               /* The queue is full - do we want to block or just leave without
                       1019     ;               posting? */
                       1020     ;               if( xTicksToWait > ( portTickType ) 0 )
                       1021                             ; SOURCE LINE # 273
000039 E4              1022             CLR     A
00003A FF              1023             MOV     R7,A
00003B FE              1024             MOV     R6,A
00003C FD              1025             MOV     R5,A
00003D FC              1026             MOV     R4,A
00003E 90000007        1027             MOV     DPTR,#07H
000042 12000000   E    1028             LCALL   ?C?XBPOFF
000046 E0              1029             MOVX    A,@DPTR
000047 F8              1030             MOV     R0,A
000048 A3              1031             INC     DPTR
000049 E0              1032             MOVX    A,@DPTR
00004A F9              1033             MOV     R1,A
00004B A3              1034             INC     DPTR
00004C E0              1035             MOVX    A,@DPTR
00004D FA              1036             MOV     R2,A
00004E A3              1037             INC     DPTR
00004F E0              1038             MOVX    A,@DPTR
000050 FB              1039             MOV     R3,A
000051 D3              1040             SETB    C
000052 12000000   E    1041             LCALL   ?C?ULCMP
000056 404F            1042             JC      ?C0006
                       1043     ;               {
                       1044                             ; SOURCE LINE # 274
                       1045     ;                       /* We are going to place ourselves on the xTasksWaitingToSend ev
                               ent
                       1046     ;                       list, and will get woken should the delay expire, or space becom
                               e
                       1047     ;                       available on the queue. 
                       1048     ;                       
                       1049     ;                       As detailed above we do not require mutual exclusion on the even
                               t
                       1050     ;                       list as nothing else can modify it or the ready lists while we
                       1051     ;                       have the scheduler suspended and queue locked. 
                       1052     ;                       
                       1053     ;                       It is possible that an ISR has removed data from the queue since
                                we
                       1054     ;                       checked if any was available.  If this is the case then the data
                       1055     ;                       will have been copied from the queue, and the queue variables 
                       1056     ;                       updated, but the event list will not yet have been checked to se
                               e if
                       1057     ;                       anything is waiting as the queue is locked. */
                       1058     ;                       vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicks
                               ToWait );
                       1059                             ; SOURCE LINE # 288
000058 90000007        1060             MOV     DPTR,#07H
00005C 12000000   E    1061             LCALL   ?C?XBPOFF
000060 E0              1062             MOVX    A,@DPTR
000061 FC              1063             MOV     R4,A
000062 A3              1064             INC     DPTR
000063 E0              1065             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    18

000064 FD              1066             MOV     R5,A
000065 A3              1067             INC     DPTR
000066 E0              1068             MOVX    A,@DPTR
000067 FE              1069             MOV     R6,A
000068 A3              1070             INC     DPTR
000069 E0              1071             MOVX    A,@DPTR
00006A FF              1072             MOV     R7,A
00006B 850083     E    1073             MOV     DPH,?C_XBP
00006E 850082     E    1074             MOV     DPL,?C_XBP+01H
000071 A3              1075             INC     DPTR
000072 759300     E    1076             MOV     DPX,#?C?XDATASEG
000075 E0              1077             MOVX    A,@DPTR
000076 FB              1078             MOV     R3,A
000077 A3              1079             INC     DPTR
000078 E0              1080             MOVX    A,@DPTR
000079 FA              1081             MOV     R2,A
00007A A3              1082             INC     DPTR
00007B E0              1083             MOVX    A,@DPTR
00007C 240C            1084             ADD     A,#0CH
00007E F9              1085             MOV     R1,A
00007F E4              1086             CLR     A
000080 3A              1087             ADDC    A,R2
000081 FA              1088             MOV     R2,A
000082 12000000   E    1089             LCALL   _?vTaskPlaceOnEventList
                       1090     ; 
                       1091     ;                       /* Force a context switch now as we are blocked.  We can do
                       1092     ;                       this from within a critical section as the task we are 
                       1093     ;                       switching to has its own context.  When we return here (i.e. we
                       1094     ;                       unblock) we will leave the critical section as normal. 
                       1095     ;                       
                       1096     ;                       It is possible that an ISR has caused an event on an unrelated a
                               nd 
                       1097     ;                       unlocked queue.  If this was the case then the event list for th
                               at 
                       1098     ;                       queue will have been updated but the ready lists left unchanged 
                               -
                       1099     ;                       instead the readied task will have been added to the pending rea
                               dy 
                       1100     ;                       list. */
                       1101     ;                       taskENTER_CRITICAL();
000086 A2AFC2AF        1102              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
00008A C0D0                     
                       1103     ;                       {
                       1104                             ; SOURCE LINE # 301
                       1105     ;                               /* We can safely unlock the queue and scheduler here as 
                       1106     ;                               interrupts are disabled.  We must not yield with anythin
                               g 
                       1107     ;                               locked, but we can yield from within a critical section.
                       1108     ;                               
                       1109     ;                               Tasks that have been placed on the pending ready list ca
                               nnot
                       1110     ;                               be tasks that are waiting for events on this queue.  See
                                
                       1111     ;                               in comment cTaskRemoveFromEventList(). */
                       1112     ;                               prvUnlockQueue( pxQueue );
                       1113                             ; SOURCE LINE # 309
00008C 12000000   F    1114             LCALL   L?0079
                       1115     ; 
                       1116     ;                               /* Resuming the scheduler may cause a yield.  If so then
                                there
                       1117     ;                               is no point yielding again here. */
                       1118     ;                               if( !cTaskResumeAll() )
                       1119                             ; SOURCE LINE # 313
000090 12000000   E    1120             LCALL   _?cTaskResumeAll
000094 EF              1121             MOV     A,R7
000095 7004            1122             JNZ     ?C0008
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    19

                       1123     ;                               {
                       1124                             ; SOURCE LINE # 314
                       1125     ;                                       taskYIELD();
                       1126                             ; SOURCE LINE # 315
000097 12000000   E    1127             LCALL   _?vPortYield
                       1128     ;                               }
                       1129                             ; SOURCE LINE # 316
00009B                 1130     ?C0008:
                       1131     ; 
                       1132     ;                               /* Before leaving the critical section we have to ensure
                       1133     ;                               exclusive access again. */
                       1134     ;                               vTaskSuspendAll();
                       1135                             ; SOURCE LINE # 320
00009B 12000000   E    1136             LCALL   _?vTaskSuspendAll
                       1137     ;                               prvLockQueue( pxQueue );                                
                       1138                             ; SOURCE LINE # 321
00009F 12000000   F    1139             LCALL   L?0077
                       1140     ;                       }
                       1141                             ; SOURCE LINE # 322
                       1142     ;                       taskEXIT_CRITICAL();
0000A3 D0D092AF        1143              DB 0D0H, 0D0H, 092H, 0AFH;
                       1144     ;               }
                       1145                             ; SOURCE LINE # 324
                       1146     ;       }
                       1147                             ; SOURCE LINE # 325
0000A7                 1148     ?C0006:
                       1149     ;               
                       1150     ;       /* When we are here it is possible that we unlblocked as space became 
                       1151     ;       available on the queue.  It is also possible that an ISR posted to the
                       1152     ;       queue since we left the critical section, so it may be that again there
                       1153     ;       is no space.  This would only happen if a task and ISR post onto the
                       1154     ;       same queue. */
                       1155     ;       taskENTER_CRITICAL();
0000A7 A2AFC2AF        1156              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
0000AB C0D0                     
                       1157     ;       {
                       1158                             ; SOURCE LINE # 333
                       1159     ;               if( pxQueue->ucMessagesWaiting < pxQueue->ucLength )
                       1160                             ; SOURCE LINE # 334
0000AD 850083     E    1161             MOV     DPH,?C_XBP
0000B0 850082     E    1162             MOV     DPL,?C_XBP+01H
0000B3 A3              1163             INC     DPTR
0000B4 759300     E    1164             MOV     DPX,#?C?XDATASEG
0000B7 E0              1165             MOVX    A,@DPTR
0000B8 FB              1166             MOV     R3,A
0000B9 A3              1167             INC     DPTR
0000BA E0              1168             MOVX    A,@DPTR
0000BB FA              1169             MOV     R2,A
0000BC A3              1170             INC     DPTR
0000BD E0              1171             MOVX    A,@DPTR
0000BE 243D            1172             ADD     A,#03DH
0000C0 F9              1173             MOV     R1,A
0000C1 E4              1174             CLR     A
0000C2 3A              1175             ADDC    A,R2
0000C3 FA              1176             MOV     R2,A
0000C4 12000000   E    1177             LCALL   ?C?CLDPTR
0000C8 FF              1178             MOV     R7,A
0000C9 850083     E    1179             MOV     DPH,?C_XBP
0000CC 850082     E    1180             MOV     DPL,?C_XBP+01H
0000CF A3              1181             INC     DPTR
0000D0 759300     E    1182             MOV     DPX,#?C?XDATASEG
0000D3 E0              1183             MOVX    A,@DPTR
0000D4 FB              1184             MOV     R3,A
0000D5 A3              1185             INC     DPTR
0000D6 E0              1186             MOVX    A,@DPTR
0000D7 FA              1187             MOV     R2,A
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    20

0000D8 A3              1188             INC     DPTR
0000D9 E0              1189             MOVX    A,@DPTR
0000DA 243C            1190             ADD     A,#03CH
0000DC F9              1191             MOV     R1,A
0000DD E4              1192             CLR     A
0000DE 3A              1193             ADDC    A,R2
0000DF FA              1194             MOV     R2,A
0000E0 12000000   E    1195             LCALL   ?C?CLDPTR
0000E4 C3              1196             CLR     C
0000E5 9F              1197             SUBB    A,R7
0000E6 4003            1198             JC      $ + 5H
0000E8 010000     F    1199             AJMP    ?C0009
                       1200     ;               {
                       1201                             ; SOURCE LINE # 335
                       1202     ;                       /* There is room in the queue, copy the data into the queue. */ 
                                               
                       1203     ;                       prvCopyQueueData( pxQueue, pvItemToQueue );             
                       1204                             ; SOURCE LINE # 337
0000EB 850083     E    1205             MOV     DPH,?C_XBP
0000EE 850082     E    1206             MOV     DPL,?C_XBP+01H
0000F1 A3              1207             INC     DPTR
0000F2 759300     E    1208             MOV     DPX,#?C?XDATASEG
0000F5 E0              1209             MOVX    A,@DPTR
0000F6 FB              1210             MOV     R3,A
0000F7 A3              1211             INC     DPTR
0000F8 E0              1212             MOVX    A,@DPTR
0000F9 FA              1213             MOV     R2,A
0000FA A3              1214             INC     DPTR
0000FB E0              1215             MOVX    A,@DPTR
0000FC 243E            1216             ADD     A,#03EH
0000FE F9              1217             MOV     R1,A
0000FF E4              1218             CLR     A
000100 3A              1219             ADDC    A,R2
000101 FA              1220             MOV     R2,A
000102 12000000   E    1221             LCALL   ?C?CLDPTR
000106 FF              1222             MOV     R7,A
000107 7E00            1223             MOV     R6,#00H
000109 90000004        1224             MOV     DPTR,#04H
00010D 12000000   E    1225             LCALL   ?C?XBPOFF
000111 E0              1226             MOVX    A,@DPTR
000112 FB              1227             MOV     R3,A
000113 A3              1228             INC     DPTR
000114 E0              1229             MOVX    A,@DPTR
000115 FA              1230             MOV     R2,A
000116 A3              1231             INC     DPTR
000117 E0              1232             MOVX    A,@DPTR
000118 F9              1233             MOV     R1,A
000119 C003            1234             PUSH    AR3
00011B C002            1235             PUSH    AR2
00011D C001            1236             PUSH    AR1
00011F 850083     E    1237             MOV     DPH,?C_XBP
000122 850082     E    1238             MOV     DPL,?C_XBP+01H
000125 A3              1239             INC     DPTR
000126 759300     E    1240             MOV     DPX,#?C?XDATASEG
000129 E0              1241             MOVX    A,@DPTR
00012A FB              1242             MOV     R3,A
00012B A3              1243             INC     DPTR
00012C E0              1244             MOVX    A,@DPTR
00012D FA              1245             MOV     R2,A
00012E A3              1246             INC     DPTR
00012F E0              1247             MOVX    A,@DPTR
000130 2406            1248             ADD     A,#06H
000132 F9              1249             MOV     R1,A
000133 E4              1250             CLR     A
000134 3A              1251             ADDC    A,R2
000135 FA              1252             MOV     R2,A
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    21

000136 12000000   E    1253             LCALL   ?C?PLDPTR
00013A A801            1254             MOV     R0,AR1
00013C AC02            1255             MOV     R4,AR2
00013E AD03            1256             MOV     R5,AR3
000140 D001            1257             POP     AR1
000142 D002            1258             POP     AR2
000144 D003            1259             POP     AR3
000146 12000000   E    1260             LCALL   ?C?COPY
00014A 850083     E    1261             MOV     DPH,?C_XBP
00014D 850082     E    1262             MOV     DPL,?C_XBP+01H
000150 A3              1263             INC     DPTR
000151 759300     E    1264             MOV     DPX,#?C?XDATASEG
000154 E0              1265             MOVX    A,@DPTR
000155 FB              1266             MOV     R3,A
000156 A3              1267             INC     DPTR
000157 E0              1268             MOVX    A,@DPTR
000158 FA              1269             MOV     R2,A
000159 A3              1270             INC     DPTR
00015A E0              1271             MOVX    A,@DPTR
00015B 243C            1272             ADD     A,#03CH
00015D F9              1273             MOV     R1,A
00015E E4              1274             CLR     A
00015F 3A              1275             ADDC    A,R2
000160 FA              1276             MOV     R2,A
000161 7401            1277             MOV     A,#01H
000163 12000000   E    1278             LCALL   ?C?CILDPTR
000167 850083     E    1279             MOV     DPH,?C_XBP
00016A 850082     E    1280             MOV     DPL,?C_XBP+01H
00016D A3              1281             INC     DPTR
00016E 759300     E    1282             MOV     DPX,#?C?XDATASEG
000171 E0              1283             MOVX    A,@DPTR
000172 FB              1284             MOV     R3,A
000173 A3              1285             INC     DPTR
000174 E0              1286             MOVX    A,@DPTR
000175 FA              1287             MOV     R2,A
000176 A3              1288             INC     DPTR
000177 E0              1289             MOVX    A,@DPTR
000178 243E            1290             ADD     A,#03EH
00017A F9              1291             MOV     R1,A
00017B E4              1292             CLR     A
00017C 3A              1293             ADDC    A,R2
00017D FA              1294             MOV     R2,A
00017E 12000000   E    1295             LCALL   ?C?CLDPTR
000182 FF              1296             MOV     R7,A
000183 850083     E    1297             MOV     DPH,?C_XBP
000186 850082     E    1298             MOV     DPL,?C_XBP+01H
000189 A3              1299             INC     DPTR
00018A 759300     E    1300             MOV     DPX,#?C?XDATASEG
00018D E0              1301             MOVX    A,@DPTR
00018E FB              1302             MOV     R3,A
00018F A3              1303             INC     DPTR
000190 E0              1304             MOVX    A,@DPTR
000191 FA              1305             MOV     R2,A
000192 A3              1306             INC     DPTR
000193 E0              1307             MOVX    A,@DPTR
000194 2406            1308             ADD     A,#06H
000196 F9              1309             MOV     R1,A
000197 E4              1310             CLR     A
000198 3A              1311             ADDC    A,R2
000199 FA              1312             MOV     R2,A
00019A 09              1313             INC     R1
00019B E9              1314             MOV     A,R1
00019C 7001            1315             JNZ     ?C0069
00019E 0A              1316             INC     R2
00019F                 1317     ?C0069:
00019F E4              1318             CLR     A
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    22

0001A0 8FF0            1319             MOV     B,R7
0001A2 12000000   E    1320             LCALL   ?C?IILDPTR
0001A6 850083     E    1321             MOV     DPH,?C_XBP
0001A9 850082     E    1322             MOV     DPL,?C_XBP+01H
0001AC A3              1323             INC     DPTR
0001AD 759300     E    1324             MOV     DPX,#?C?XDATASEG
0001B0 E0              1325             MOVX    A,@DPTR
0001B1 FB              1326             MOV     R3,A
0001B2 A3              1327             INC     DPTR
0001B3 E0              1328             MOVX    A,@DPTR
0001B4 FA              1329             MOV     R2,A
0001B5 A3              1330             INC     DPTR
0001B6 E0              1331             MOVX    A,@DPTR
0001B7 2403            1332             ADD     A,#03H
0001B9 F9              1333             MOV     R1,A
0001BA E4              1334             CLR     A
0001BB 3A              1335             ADDC    A,R2
0001BC FA              1336             MOV     R2,A
0001BD 12000000   E    1337             LCALL   ?C?PLDPTR
0001C1 C003            1338             PUSH    AR3
0001C3 C002            1339             PUSH    AR2
0001C5 C001            1340             PUSH    AR1
0001C7 850083     E    1341             MOV     DPH,?C_XBP
0001CA 850082     E    1342             MOV     DPL,?C_XBP+01H
0001CD A3              1343             INC     DPTR
0001CE 759300     E    1344             MOV     DPX,#?C?XDATASEG
0001D1 E0              1345             MOVX    A,@DPTR
0001D2 FB              1346             MOV     R3,A
0001D3 A3              1347             INC     DPTR
0001D4 E0              1348             MOVX    A,@DPTR
0001D5 FA              1349             MOV     R2,A
0001D6 A3              1350             INC     DPTR
0001D7 E0              1351             MOVX    A,@DPTR
0001D8 2406            1352             ADD     A,#06H
0001DA F9              1353             MOV     R1,A
0001DB E4              1354             CLR     A
0001DC 3A              1355             ADDC    A,R2
0001DD FA              1356             MOV     R2,A
0001DE 12000000   E    1357             LCALL   ?C?PLDPTR
0001E2 C3              1358             CLR     C
0001E3 D082            1359             POP     DPL
0001E5 D083            1360             POP     DPH
0001E7 D0E0            1361             POP     ACC
0001E9 E9              1362             MOV     A,R1
0001EA 9582            1363             SUBB    A,DPL
0001EC EA              1364             MOV     A,R2
0001ED 9583            1365             SUBB    A,DPH
0001EF                 1366     ?C0070:
0001EF 4037            1367             JC      ?C0010
0001F1 850083     E    1368             MOV     DPH,?C_XBP
0001F4 850082     E    1369             MOV     DPL,?C_XBP+01H
0001F7 A3              1370             INC     DPTR
0001F8 759300     E    1371             MOV     DPX,#?C?XDATASEG
0001FB E0              1372             MOVX    A,@DPTR
0001FC FB              1373             MOV     R3,A
0001FD A3              1374             INC     DPTR
0001FE E0              1375             MOVX    A,@DPTR
0001FF FA              1376             MOV     R2,A
000200 A3              1377             INC     DPTR
000201 E0              1378             MOVX    A,@DPTR
000202 F9              1379             MOV     R1,A
000203 12000000   E    1380             LCALL   ?C?PLDPTR
000207 C003            1381             PUSH    AR3
000209 C002            1382             PUSH    AR2
00020B C001            1383             PUSH    AR1
00020D 850083     E    1384             MOV     DPH,?C_XBP
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    23

000210 850082     E    1385             MOV     DPL,?C_XBP+01H
000213 A3              1386             INC     DPTR
000214 759300     E    1387             MOV     DPX,#?C?XDATASEG
000217 E0              1388             MOVX    A,@DPTR
000218 FB              1389             MOV     R3,A
000219 A3              1390             INC     DPTR
00021A E0              1391             MOVX    A,@DPTR
00021B FA              1392             MOV     R2,A
00021C A3              1393             INC     DPTR
00021D E0              1394             MOVX    A,@DPTR
00021E 2406            1395             ADD     A,#06H
000220 F9              1396             MOV     R1,A
000221 E4              1397             CLR     A
000222 3A              1398             ADDC    A,R2
000223 FA              1399             MOV     R2,A
000224 12000000   E    1400             LCALL   ?C?PSTPTR
000228                 1401     ?C0010:
                       1402     ;                       cReturn = ( signed portCHAR ) pdPASS;
                       1403                             ; SOURCE LINE # 338
000228 850083     E    1404             MOV     DPH,?C_XBP
00022B 850082     E    1405             MOV     DPL,?C_XBP+01H
00022E 759300     E    1406             MOV     DPX,#?C?XDATASEG
000231 7401            1407             MOV     A,#01H
000233 F0              1408             MOVX    @DPTR,A
                       1409     ; 
                       1410     ;                       /* Update the TxLock count so prvUnlockQueue knows to check for
                       1411     ;                       tasks waiting for data to become available in the queue. */
                       1412     ;                       ++( pxQueue->cTxLock );
                       1413                             ; SOURCE LINE # 342
000234 A3              1414             INC     DPTR
000235 759300     E    1415             MOV     DPX,#?C?XDATASEG
000238 E0              1416             MOVX    A,@DPTR
000239 FB              1417             MOV     R3,A
00023A A3              1418             INC     DPTR
00023B E0              1419             MOVX    A,@DPTR
00023C FA              1420             MOV     R2,A
00023D A3              1421             INC     DPTR
00023E E0              1422             MOVX    A,@DPTR
00023F 2440            1423             ADD     A,#040H
000241 F9              1424             MOV     R1,A
000242 E4              1425             CLR     A
000243 3A              1426             ADDC    A,R2
000244 FA              1427             MOV     R2,A
000245 7401            1428             MOV     A,#01H
000247 12000000   E    1429             LCALL   ?C?CILDPTR
                       1430     ;               }
                       1431                             ; SOURCE LINE # 343
00024B 800C            1432             SJMP    ?C0011
00024D                 1433     ?C0009:
                       1434     ;               else
                       1435     ;               {
                       1436                             ; SOURCE LINE # 345
                       1437     ;                       cReturn = errQUEUE_FULL;
                       1438                             ; SOURCE LINE # 346
00024D 850083     E    1439             MOV     DPH,?C_XBP
000250 850082     E    1440             MOV     DPL,?C_XBP+01H
000253 759300     E    1441             MOV     DPX,#?C?XDATASEG
000256 74FD            1442             MOV     A,#0FDH
000258 F0              1443             MOVX    @DPTR,A
                       1444     ;               }
                       1445                             ; SOURCE LINE # 347
000259                 1446     ?C0011:
                       1447     ;       }
                       1448                             ; SOURCE LINE # 348
                       1449     ;       taskEXIT_CRITICAL();
000259 D0D092AF        1450              DB 0D0H, 0D0H, 092H, 0AFH;
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    24

                       1451     ; 
                       1452     ;       /* We no longer require exclusive access to the queue.  prvUnlockQueue
                       1453     ;       will remove any tasks suspended on a receive if either this function 
                       1454     ;       or an ISR has posted onto the queue. */
                       1455     ;       if( prvUnlockQueue( pxQueue ) )
                       1456                             ; SOURCE LINE # 354
00025D 12000000   F    1457             LCALL   L?0079
000261 EF              1458             MOV     A,R7
000262 600D            1459             JZ      ?C0012
                       1460     ;       {
                       1461                             ; SOURCE LINE # 355
                       1462     ;               /* Resume the scheduler - making ready any tasks that were woken
                       1463     ;               by an event while the scheduler was locked.  Resuming the 
                       1464     ;               scheduler may cause a yield, in which case there is no point
                       1465     ;               yielding again here. */
                       1466     ;               if( !cTaskResumeAll() )
                       1467                             ; SOURCE LINE # 360
000264 12000000   E    1468             LCALL   _?cTaskResumeAll
000268 EF              1469             MOV     A,R7
000269 700A            1470             JNZ     ?C0014
                       1471     ;               {
                       1472                             ; SOURCE LINE # 361
                       1473     ;                       taskYIELD();
                       1474                             ; SOURCE LINE # 362
00026B 12000000   E    1475             LCALL   _?vPortYield
                       1476     ;               }
                       1477                             ; SOURCE LINE # 363
                       1478     ;       }
                       1479                             ; SOURCE LINE # 364
00026F 8004            1480             SJMP    ?C0014
000271                 1481     ?C0012:
                       1482     ;       else
                       1483     ;       {
                       1484                             ; SOURCE LINE # 366
                       1485     ;               /* Resume the scheduler - making ready any tasks that were woken
                       1486     ;               by an event while the scheduler was locked. */
                       1487     ;               cTaskResumeAll();
                       1488                             ; SOURCE LINE # 369
000271 12000000   E    1489             LCALL   _?cTaskResumeAll
                       1490     ;       }
                       1491                             ; SOURCE LINE # 370
000275                 1492     ?C0014:
                       1493     ; 
                       1494     ;       return cReturn;
                       1495                             ; SOURCE LINE # 372
000275 850083     E    1496             MOV     DPH,?C_XBP
000278 850082     E    1497             MOV     DPL,?C_XBP+01H
00027B 759300     E    1498             MOV     DPX,#?C?XDATASEG
00027E E0              1499             MOVX    A,@DPTR
00027F FF              1500             MOV     R7,A
                       1501     ; }
                       1502                             ; SOURCE LINE # 373
000280                 1503     ?C0015:
000280 9000000B        1504             MOV     DPTR,#0BH
000284 02000000   E    1505             LJMP    ?C?ADDXBP
                       1506     ; END OF _?cQueueSend
                       1507     
                       1508     ; 
                       1509     ; /*-----------------------------------------------------------*/
                       1510     ; //signed portCHAR cQueueSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, 
                               signed portCHAR cTaskPreviouslyWoken )
                       1511     ; signed portCHAR cQueueSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, si
                               gned portCHAR cTaskPreviouslyWoken ) reentrant
                       1512     
------                 1513             RSEG  ?PR?_?cQueueSendFromISR?QUEUE
000000                 1514     _?cQueueSendFromISR:
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    25

                       1515             USING   0
                       1516                             ; SOURCE LINE # 377
000000 9000FFFD        1517             MOV     DPTR,#0FFFDH
000004 12000000   E    1518             LCALL   ?C?ADDXBP
000008 EB              1519             MOV     A,R3
000009 F0              1520             MOVX    @DPTR,A
00000A A3              1521             INC     DPTR
00000B EA              1522             MOV     A,R2
00000C F0              1523             MOVX    @DPTR,A
00000D A3              1524             INC     DPTR
00000E E9              1525             MOV     A,R1
00000F F0              1526             MOVX    @DPTR,A
                       1527     ; {
                       1528     ;       /* Similar to cQueueSend, except we don't block if there is no room in the
                       1529     ;       queue.  Also we don't directly wake a task that was blocked on a queue
                       1530     ;       read, instead we return a flag to say whether a context switch is required
                       1531     ;       or not (i.e. has a task with a higher priority than us been woken by this
                       1532     ;       post). */
                       1533     ;       if( pxQueue->ucMessagesWaiting < pxQueue->ucLength )
                       1534                             ; SOURCE LINE # 384
000010 850083     E    1535             MOV     DPH,?C_XBP
000013 850082     E    1536             MOV     DPL,?C_XBP+01H
000016 759300     E    1537             MOV     DPX,#?C?XDATASEG
000019 E0              1538             MOVX    A,@DPTR
00001A FB              1539             MOV     R3,A
00001B A3              1540             INC     DPTR
00001C E0              1541             MOVX    A,@DPTR
00001D FA              1542             MOV     R2,A
00001E A3              1543             INC     DPTR
00001F E0              1544             MOVX    A,@DPTR
000020 243D            1545             ADD     A,#03DH
000022 F9              1546             MOV     R1,A
000023 E4              1547             CLR     A
000024 3A              1548             ADDC    A,R2
000025 FA              1549             MOV     R2,A
000026 12000000   E    1550             LCALL   ?C?CLDPTR
00002A FF              1551             MOV     R7,A
00002B 850083     E    1552             MOV     DPH,?C_XBP
00002E 850082     E    1553             MOV     DPL,?C_XBP+01H
000031 759300     E    1554             MOV     DPX,#?C?XDATASEG
000034 E0              1555             MOVX    A,@DPTR
000035 FB              1556             MOV     R3,A
000036 A3              1557             INC     DPTR
000037 E0              1558             MOVX    A,@DPTR
000038 FA              1559             MOV     R2,A
000039 A3              1560             INC     DPTR
00003A E0              1561             MOVX    A,@DPTR
00003B 243C            1562             ADD     A,#03CH
00003D F9              1563             MOV     R1,A
00003E E4              1564             CLR     A
00003F 3A              1565             ADDC    A,R2
000040 FA              1566             MOV     R2,A
000041 12000000   E    1567             LCALL   ?C?CLDPTR
000045 C3              1568             CLR     C
000046 9F              1569             SUBB    A,R7
000047 4003            1570             JC      $ + 5H
000049 010000     F    1571             AJMP    ?C0016
                       1572     ;       {
                       1573                             ; SOURCE LINE # 385
                       1574     ;               prvCopyQueueData( pxQueue, pvItemToQueue );
                       1575                             ; SOURCE LINE # 386
00004C 850083     E    1576             MOV     DPH,?C_XBP
00004F 850082     E    1577             MOV     DPL,?C_XBP+01H
000052 759300     E    1578             MOV     DPX,#?C?XDATASEG
000055 E0              1579             MOVX    A,@DPTR
000056 FB              1580             MOV     R3,A
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    26

000057 A3              1581             INC     DPTR
000058 E0              1582             MOVX    A,@DPTR
000059 FA              1583             MOV     R2,A
00005A A3              1584             INC     DPTR
00005B E0              1585             MOVX    A,@DPTR
00005C 243E            1586             ADD     A,#03EH
00005E F9              1587             MOV     R1,A
00005F E4              1588             CLR     A
000060 3A              1589             ADDC    A,R2
000061 FA              1590             MOV     R2,A
000062 12000000   E    1591             LCALL   ?C?CLDPTR
000066 FF              1592             MOV     R7,A
000067 7E00            1593             MOV     R6,#00H
000069 90000003        1594             MOV     DPTR,#03H
00006D 12000000   E    1595             LCALL   ?C?XBPOFF
000071 E0              1596             MOVX    A,@DPTR
000072 FB              1597             MOV     R3,A
000073 A3              1598             INC     DPTR
000074 E0              1599             MOVX    A,@DPTR
000075 FA              1600             MOV     R2,A
000076 A3              1601             INC     DPTR
000077 E0              1602             MOVX    A,@DPTR
000078 F9              1603             MOV     R1,A
000079 C003            1604             PUSH    AR3
00007B C002            1605             PUSH    AR2
00007D C001            1606             PUSH    AR1
00007F 850083     E    1607             MOV     DPH,?C_XBP
000082 850082     E    1608             MOV     DPL,?C_XBP+01H
000085 759300     E    1609             MOV     DPX,#?C?XDATASEG
000088 E0              1610             MOVX    A,@DPTR
000089 FB              1611             MOV     R3,A
00008A A3              1612             INC     DPTR
00008B E0              1613             MOVX    A,@DPTR
00008C FA              1614             MOV     R2,A
00008D A3              1615             INC     DPTR
00008E E0              1616             MOVX    A,@DPTR
00008F 2406            1617             ADD     A,#06H
000091 F9              1618             MOV     R1,A
000092 E4              1619             CLR     A
000093 3A              1620             ADDC    A,R2
000094 FA              1621             MOV     R2,A
000095 12000000   E    1622             LCALL   ?C?PLDPTR
000099 A801            1623             MOV     R0,AR1
00009B AC02            1624             MOV     R4,AR2
00009D AD03            1625             MOV     R5,AR3
00009F D001            1626             POP     AR1
0000A1 D002            1627             POP     AR2
0000A3 D003            1628             POP     AR3
0000A5 12000000   E    1629             LCALL   ?C?COPY
0000A9 850083     E    1630             MOV     DPH,?C_XBP
0000AC 850082     E    1631             MOV     DPL,?C_XBP+01H
0000AF 759300     E    1632             MOV     DPX,#?C?XDATASEG
0000B2 E0              1633             MOVX    A,@DPTR
0000B3 FB              1634             MOV     R3,A
0000B4 A3              1635             INC     DPTR
0000B5 E0              1636             MOVX    A,@DPTR
0000B6 FA              1637             MOV     R2,A
0000B7 A3              1638             INC     DPTR
0000B8 E0              1639             MOVX    A,@DPTR
0000B9 243C            1640             ADD     A,#03CH
0000BB F9              1641             MOV     R1,A
0000BC E4              1642             CLR     A
0000BD 3A              1643             ADDC    A,R2
0000BE FA              1644             MOV     R2,A
0000BF 7401            1645             MOV     A,#01H
0000C1 12000000   E    1646             LCALL   ?C?CILDPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    27

0000C5 850083     E    1647             MOV     DPH,?C_XBP
0000C8 850082     E    1648             MOV     DPL,?C_XBP+01H
0000CB 759300     E    1649             MOV     DPX,#?C?XDATASEG
0000CE E0              1650             MOVX    A,@DPTR
0000CF FB              1651             MOV     R3,A
0000D0 A3              1652             INC     DPTR
0000D1 E0              1653             MOVX    A,@DPTR
0000D2 FA              1654             MOV     R2,A
0000D3 A3              1655             INC     DPTR
0000D4 E0              1656             MOVX    A,@DPTR
0000D5 243E            1657             ADD     A,#03EH
0000D7 F9              1658             MOV     R1,A
0000D8 E4              1659             CLR     A
0000D9 3A              1660             ADDC    A,R2
0000DA FA              1661             MOV     R2,A
0000DB 12000000   E    1662             LCALL   ?C?CLDPTR
0000DF FF              1663             MOV     R7,A
0000E0 850083     E    1664             MOV     DPH,?C_XBP
0000E3 850082     E    1665             MOV     DPL,?C_XBP+01H
0000E6 759300     E    1666             MOV     DPX,#?C?XDATASEG
0000E9 E0              1667             MOVX    A,@DPTR
0000EA FB              1668             MOV     R3,A
0000EB A3              1669             INC     DPTR
0000EC E0              1670             MOVX    A,@DPTR
0000ED FA              1671             MOV     R2,A
0000EE A3              1672             INC     DPTR
0000EF E0              1673             MOVX    A,@DPTR
0000F0 2406            1674             ADD     A,#06H
0000F2 F9              1675             MOV     R1,A
0000F3 E4              1676             CLR     A
0000F4 3A              1677             ADDC    A,R2
0000F5 FA              1678             MOV     R2,A
0000F6 09              1679             INC     R1
0000F7 E9              1680             MOV     A,R1
0000F8 7001            1681             JNZ     ?C0071
0000FA 0A              1682             INC     R2
0000FB                 1683     ?C0071:
0000FB E4              1684             CLR     A
0000FC 8FF0            1685             MOV     B,R7
0000FE 12000000   E    1686             LCALL   ?C?IILDPTR
000102 850083     E    1687             MOV     DPH,?C_XBP
000105 850082     E    1688             MOV     DPL,?C_XBP+01H
000108 759300     E    1689             MOV     DPX,#?C?XDATASEG
00010B E0              1690             MOVX    A,@DPTR
00010C FB              1691             MOV     R3,A
00010D A3              1692             INC     DPTR
00010E E0              1693             MOVX    A,@DPTR
00010F FA              1694             MOV     R2,A
000110 A3              1695             INC     DPTR
000111 E0              1696             MOVX    A,@DPTR
000112 2403            1697             ADD     A,#03H
000114 F9              1698             MOV     R1,A
000115 E4              1699             CLR     A
000116 3A              1700             ADDC    A,R2
000117 FA              1701             MOV     R2,A
000118 12000000   E    1702             LCALL   ?C?PLDPTR
00011C C003            1703             PUSH    AR3
00011E C002            1704             PUSH    AR2
000120 C001            1705             PUSH    AR1
000122 850083     E    1706             MOV     DPH,?C_XBP
000125 850082     E    1707             MOV     DPL,?C_XBP+01H
000128 759300     E    1708             MOV     DPX,#?C?XDATASEG
00012B E0              1709             MOVX    A,@DPTR
00012C FB              1710             MOV     R3,A
00012D A3              1711             INC     DPTR
00012E E0              1712             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    28

00012F FA              1713             MOV     R2,A
000130 A3              1714             INC     DPTR
000131 E0              1715             MOVX    A,@DPTR
000132 2406            1716             ADD     A,#06H
000134 F9              1717             MOV     R1,A
000135 E4              1718             CLR     A
000136 3A              1719             ADDC    A,R2
000137 FA              1720             MOV     R2,A
000138 12000000   E    1721             LCALL   ?C?PLDPTR
00013C C3              1722             CLR     C
00013D D082            1723             POP     DPL
00013F D083            1724             POP     DPH
000141 D0E0            1725             POP     ACC
000143 E9              1726             MOV     A,R1
000144 9582            1727             SUBB    A,DPL
000146 EA              1728             MOV     A,R2
000147 9583            1729             SUBB    A,DPH
000149                 1730     ?C0072:
000149 4035            1731             JC      ?C0017
00014B 850083     E    1732             MOV     DPH,?C_XBP
00014E 850082     E    1733             MOV     DPL,?C_XBP+01H
000151 759300     E    1734             MOV     DPX,#?C?XDATASEG
000154 E0              1735             MOVX    A,@DPTR
000155 FB              1736             MOV     R3,A
000156 A3              1737             INC     DPTR
000157 E0              1738             MOVX    A,@DPTR
000158 FA              1739             MOV     R2,A
000159 A3              1740             INC     DPTR
00015A E0              1741             MOVX    A,@DPTR
00015B F9              1742             MOV     R1,A
00015C 12000000   E    1743             LCALL   ?C?PLDPTR
000160 C003            1744             PUSH    AR3
000162 C002            1745             PUSH    AR2
000164 C001            1746             PUSH    AR1
000166 850083     E    1747             MOV     DPH,?C_XBP
000169 850082     E    1748             MOV     DPL,?C_XBP+01H
00016C 759300     E    1749             MOV     DPX,#?C?XDATASEG
00016F E0              1750             MOVX    A,@DPTR
000170 FB              1751             MOV     R3,A
000171 A3              1752             INC     DPTR
000172 E0              1753             MOVX    A,@DPTR
000173 FA              1754             MOV     R2,A
000174 A3              1755             INC     DPTR
000175 E0              1756             MOVX    A,@DPTR
000176 2406            1757             ADD     A,#06H
000178 F9              1758             MOV     R1,A
000179 E4              1759             CLR     A
00017A 3A              1760             ADDC    A,R2
00017B FA              1761             MOV     R2,A
00017C 12000000   E    1762             LCALL   ?C?PSTPTR
000180                 1763     ?C0017:
                       1764     ; 
                       1765     ;               /* If the queue is locked we do not alter the event list.  This will
                       1766     ;               be done when the queue is unlocked later. */
                       1767     ;               if( pxQueue->cTxLock == queueUNLOCKED )
                       1768                             ; SOURCE LINE # 390
000180 850083     E    1769             MOV     DPH,?C_XBP
000183 850082     E    1770             MOV     DPL,?C_XBP+01H
000186 759300     E    1771             MOV     DPX,#?C?XDATASEG
000189 E0              1772             MOVX    A,@DPTR
00018A FB              1773             MOV     R3,A
00018B A3              1774             INC     DPTR
00018C E0              1775             MOVX    A,@DPTR
00018D FA              1776             MOV     R2,A
00018E A3              1777             INC     DPTR
00018F E0              1778             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    29

000190 2440            1779             ADD     A,#040H
000192 F9              1780             MOV     R1,A
000193 E4              1781             CLR     A
000194 3A              1782             ADDC    A,R2
000195 FA              1783             MOV     R2,A
000196 12000000   E    1784             LCALL   ?C?CLDPTR
00019A F4              1785             CPL     A
00019B 704E            1786             JNZ     ?C0018
                       1787     ;               {
                       1788                             ; SOURCE LINE # 391
                       1789     ;                       /* We only want to wake one task per ISR, so check that a task h
                               as
                       1790     ;                       not already been woken. */
                       1791     ;                       if( !cTaskPreviouslyWoken )             
                       1792                             ; SOURCE LINE # 394
00019D 90000006        1793             MOV     DPTR,#06H
0001A1 12000000   E    1794             LCALL   ?C?XBPOFF
0001A5 E0              1795             MOVX    A,@DPTR
0001A6 705F            1796             JNZ     ?C0016
                       1797     ;                       {
                       1798                             ; SOURCE LINE # 395
                       1799     ;                               if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToRecei
                               ve ) ) )
                       1800                             ; SOURCE LINE # 396
0001A8 850083     E    1801             MOV     DPH,?C_XBP
0001AB 850082     E    1802             MOV     DPL,?C_XBP+01H
0001AE 759300     E    1803             MOV     DPX,#?C?XDATASEG
0001B1 E0              1804             MOVX    A,@DPTR
0001B2 FB              1805             MOV     R3,A
0001B3 A3              1806             INC     DPTR
0001B4 E0              1807             MOVX    A,@DPTR
0001B5 FA              1808             MOV     R2,A
0001B6 A3              1809             INC     DPTR
0001B7 E0              1810             MOVX    A,@DPTR
0001B8 2424            1811             ADD     A,#024H
0001BA F9              1812             MOV     R1,A
0001BB E4              1813             CLR     A
0001BC 3A              1814             ADDC    A,R2
0001BD FA              1815             MOV     R2,A
0001BE 12000000   E    1816             LCALL   ?C?ILDPTR
0001C2 45F0            1817             ORL     A,B
0001C4 C3              1818             CLR     C
0001C5 7001            1819             JNZ     ?C0021
0001C7 D3              1820             SETB    C
0001C8                 1821     ?C0021:
0001C8                 1822     ?C0022:
0001C8 403D            1823             JC      ?C0016
                       1824     ;                               {
                       1825                             ; SOURCE LINE # 397
                       1826     ;                                       if( cTaskRemoveFromEventList( &( pxQueue->xTasks
                               WaitingToReceive ) ) != ( signed portCHAR ) pdFALSE )
                       1827                             ; SOURCE LINE # 398
0001CA 850083     E    1828             MOV     DPH,?C_XBP
0001CD 850082     E    1829             MOV     DPL,?C_XBP+01H
0001D0 759300     E    1830             MOV     DPX,#?C?XDATASEG
0001D3 E0              1831             MOVX    A,@DPTR
0001D4 FB              1832             MOV     R3,A
0001D5 A3              1833             INC     DPTR
0001D6 E0              1834             MOVX    A,@DPTR
0001D7 FA              1835             MOV     R2,A
0001D8 A3              1836             INC     DPTR
0001D9 E0              1837             MOVX    A,@DPTR
0001DA 2424            1838             ADD     A,#024H
0001DC F9              1839             MOV     R1,A
0001DD E4              1840             CLR     A
0001DE 3A              1841             ADDC    A,R2
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    30

0001DF FA              1842             MOV     R2,A
0001E0 12000000   E    1843             LCALL   _?cTaskRemoveFromEventList
0001E4 EF              1844             MOV     A,R7
0001E5 6020            1845             JZ      ?C0016
                       1846     ;                                       {
                       1847                             ; SOURCE LINE # 399
                       1848     ;                                               /* The task waiting has a higher priorit
                               y so record that a 
                       1849     ;                                               context switch is required. */
                       1850     ;                                               return pdTRUE;
                       1851                             ; SOURCE LINE # 402
0001E7 7F01            1852             MOV     R7,#01H
0001E9 8026            1853             SJMP    ?C0024
                       1854     ;                                       }
                       1855                             ; SOURCE LINE # 403
                       1856     ;                               }
                       1857                             ; SOURCE LINE # 404
                       1858     ;                       }
                       1859                             ; SOURCE LINE # 405
                       1860     ;               }
                       1861                             ; SOURCE LINE # 406
0001EB                 1862     ?C0018:
                       1863     ;               else
                       1864     ;               {
                       1865                             ; SOURCE LINE # 408
                       1866     ;                       /* Increment the lock count so the task that unlocks the queue 
                       1867     ;                       knows that data was posted while it was locked. */
                       1868     ;                       ++( pxQueue->cTxLock );
                       1869                             ; SOURCE LINE # 411
0001EB 850083     E    1870             MOV     DPH,?C_XBP
0001EE 850082     E    1871             MOV     DPL,?C_XBP+01H
0001F1 759300     E    1872             MOV     DPX,#?C?XDATASEG
0001F4 E0              1873             MOVX    A,@DPTR
0001F5 FB              1874             MOV     R3,A
0001F6 A3              1875             INC     DPTR
0001F7 E0              1876             MOVX    A,@DPTR
0001F8 FA              1877             MOV     R2,A
0001F9 A3              1878             INC     DPTR
0001FA E0              1879             MOVX    A,@DPTR
0001FB 2440            1880             ADD     A,#040H
0001FD F9              1881             MOV     R1,A
0001FE E4              1882             CLR     A
0001FF 3A              1883             ADDC    A,R2
000200 FA              1884             MOV     R2,A
000201 7401            1885             MOV     A,#01H
000203 12000000   E    1886             LCALL   ?C?CILDPTR
                       1887     ;               }
                       1888                             ; SOURCE LINE # 412
                       1889     ;       }
                       1890                             ; SOURCE LINE # 413
000207                 1891     ?C0016:
                       1892     ; 
                       1893     ;       return cTaskPreviouslyWoken;
                       1894                             ; SOURCE LINE # 415
000207 90000006        1895             MOV     DPTR,#06H
00020B 12000000   E    1896             LCALL   ?C?XBPOFF
00020F E0              1897             MOVX    A,@DPTR
000210 FF              1898             MOV     R7,A
                       1899     ; }
                       1900                             ; SOURCE LINE # 416
000211                 1901     ?C0024:
000211 90000007        1902             MOV     DPTR,#07H
000215 02000000   E    1903             LJMP    ?C?ADDXBP
                       1904     ; END OF _?cQueueSendFromISR
                       1905     
                       1906     ; /*-----------------------------------------------------------*/
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    31

                       1907     ; 
                       1908     ; signed portCHAR cQueueReceive( xQueueHandle pxQueue, void *pcBuffer, portTickType xTic
                               ksToWait ) reentrant
                       1909     
------                 1910             RSEG  ?PR?_?cQueueReceive?QUEUE
000000                 1911     _?cQueueReceive:
                       1912             USING   0
                       1913                             ; SOURCE LINE # 419
000000 9000FFFD        1914             MOV     DPTR,#0FFFDH
000004 12000000   E    1915             LCALL   ?C?ADDXBP
000008 EB              1916             MOV     A,R3
000009 F0              1917             MOVX    @DPTR,A
00000A A3              1918             INC     DPTR
00000B EA              1919             MOV     A,R2
00000C F0              1920             MOVX    @DPTR,A
00000D A3              1921             INC     DPTR
00000E E9              1922             MOV     A,R1
00000F F0              1923             MOVX    @DPTR,A
000010 9000FFFF        1924             MOV     DPTR,#0FFFFH
000014 12000000   E    1925             LCALL   ?C?ADDXBP
                       1926     ; {
                       1927     ; signed portCHAR cReturn;
                       1928     ; 
                       1929     ;       /* This function is very similar to cQueueSend().  See comments within
                       1930     ;       cQueueSend() for a more detailed explanation.
                       1931     ; 
                       1932     ;       Make sure other tasks do not access the queue. */
                       1933     ;       vTaskSuspendAll();
                       1934                             ; SOURCE LINE # 427
000018 12000000   E    1935             LCALL   _?vTaskSuspendAll
                       1936     ; 
                       1937     ;       /* Make sure interrupts do not access the queue. */
                       1938     ;       prvLockQueue( pxQueue );
                       1939                             ; SOURCE LINE # 430
00001C 12000000   F    1940             LCALL   L?0078
                       1941     ; 
                       1942     ;       /* If there are no messages in the queue we may have to block. */
                       1943     ;       if( prvIsQueueEmpty( pxQueue ) )
                       1944                             ; SOURCE LINE # 433
000020 850083     E    1945             MOV     DPH,?C_XBP
000023 850082     E    1946             MOV     DPL,?C_XBP+01H
000026 A3              1947             INC     DPTR
000027 759300     E    1948             MOV     DPX,#?C?XDATASEG
00002A E0              1949             MOVX    A,@DPTR
00002B FB              1950             MOV     R3,A
00002C A3              1951             INC     DPTR
00002D E0              1952             MOVX    A,@DPTR
00002E FA              1953             MOV     R2,A
00002F A3              1954             INC     DPTR
000030 E0              1955             MOVX    A,@DPTR
000031 F9              1956             MOV     R1,A
000032 12000000   F    1957             LCALL   _?prvIsQueueEmpty
000036 EF              1958             MOV     A,R7
000037 606E            1959             JZ      ?C0026
                       1960     ;       {
                       1961                             ; SOURCE LINE # 434
                       1962     ;               /* There are no messages in the queue, do we want to block or just
                       1963     ;               leave with nothing? */                  
                       1964     ;               if( xTicksToWait > ( portTickType ) 0 )
                       1965                             ; SOURCE LINE # 437
000039 E4              1966             CLR     A
00003A FF              1967             MOV     R7,A
00003B FE              1968             MOV     R6,A
00003C FD              1969             MOV     R5,A
00003D FC              1970             MOV     R4,A
00003E 90000007        1971             MOV     DPTR,#07H
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    32

000042 12000000   E    1972             LCALL   ?C?XBPOFF
000046 E0              1973             MOVX    A,@DPTR
000047 F8              1974             MOV     R0,A
000048 A3              1975             INC     DPTR
000049 E0              1976             MOVX    A,@DPTR
00004A F9              1977             MOV     R1,A
00004B A3              1978             INC     DPTR
00004C E0              1979             MOVX    A,@DPTR
00004D FA              1980             MOV     R2,A
00004E A3              1981             INC     DPTR
00004F E0              1982             MOVX    A,@DPTR
000050 FB              1983             MOV     R3,A
000051 D3              1984             SETB    C
000052 12000000   E    1985             LCALL   ?C?ULCMP
000056 404F            1986             JC      ?C0026
                       1987     ;               {
                       1988                             ; SOURCE LINE # 438
                       1989     ;                       vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTi
                               cksToWait );
                       1990                             ; SOURCE LINE # 439
000058 90000007        1991             MOV     DPTR,#07H
00005C 12000000   E    1992             LCALL   ?C?XBPOFF
000060 E0              1993             MOVX    A,@DPTR
000061 FC              1994             MOV     R4,A
000062 A3              1995             INC     DPTR
000063 E0              1996             MOVX    A,@DPTR
000064 FD              1997             MOV     R5,A
000065 A3              1998             INC     DPTR
000066 E0              1999             MOVX    A,@DPTR
000067 FE              2000             MOV     R6,A
000068 A3              2001             INC     DPTR
000069 E0              2002             MOVX    A,@DPTR
00006A FF              2003             MOV     R7,A
00006B 850083     E    2004             MOV     DPH,?C_XBP
00006E 850082     E    2005             MOV     DPL,?C_XBP+01H
000071 A3              2006             INC     DPTR
000072 759300     E    2007             MOV     DPX,#?C?XDATASEG
000075 E0              2008             MOVX    A,@DPTR
000076 FB              2009             MOV     R3,A
000077 A3              2010             INC     DPTR
000078 E0              2011             MOVX    A,@DPTR
000079 FA              2012             MOV     R2,A
00007A A3              2013             INC     DPTR
00007B E0              2014             MOVX    A,@DPTR
00007C 2424            2015             ADD     A,#024H
00007E F9              2016             MOV     R1,A
00007F E4              2017             CLR     A
000080 3A              2018             ADDC    A,R2
000081 FA              2019             MOV     R2,A
000082 12000000   E    2020             LCALL   _?vTaskPlaceOnEventList
                       2021     ;                       taskENTER_CRITICAL();
000086 A2AFC2AF        2022              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
00008A C0D0                     
                       2023     ;                       {
                       2024                             ; SOURCE LINE # 441
                       2025     ;                               prvUnlockQueue( pxQueue );
                       2026                             ; SOURCE LINE # 442
00008C 12000000   F    2027             LCALL   L?0080
                       2028     ;                               if( !cTaskResumeAll() )
                       2029                             ; SOURCE LINE # 443
000090 12000000   E    2030             LCALL   _?cTaskResumeAll
000094 EF              2031             MOV     A,R7
000095 7004            2032             JNZ     ?C0028
                       2033     ;                               {
                       2034                             ; SOURCE LINE # 444
                       2035     ;                                       taskYIELD();
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    33

                       2036                             ; SOURCE LINE # 445
000097 12000000   E    2037             LCALL   _?vPortYield
                       2038     ;                               }
                       2039                             ; SOURCE LINE # 446
00009B                 2040     ?C0028:
                       2041     ; 
                       2042     ;                               vTaskSuspendAll();
                       2043                             ; SOURCE LINE # 448
00009B 12000000   E    2044             LCALL   _?vTaskSuspendAll
                       2045     ;                               prvLockQueue( pxQueue );                        
                       2046                             ; SOURCE LINE # 449
00009F 12000000   F    2047             LCALL   L?0078
                       2048     ;                       }
                       2049                             ; SOURCE LINE # 450
                       2050     ;                       taskEXIT_CRITICAL();
0000A3 D0D092AF        2051              DB 0D0H, 0D0H, 092H, 0AFH;
                       2052     ;               }
                       2053                             ; SOURCE LINE # 452
                       2054     ;       }
                       2055                             ; SOURCE LINE # 453
0000A7                 2056     ?C0026:
                       2057     ; 
                       2058     ;       taskENTER_CRITICAL();
0000A7 A2AFC2AF        2059              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
0000AB C0D0                     
                       2060     ;       {
                       2061                             ; SOURCE LINE # 456
                       2062     ;               if( pxQueue->ucMessagesWaiting > ( unsigned portCHAR ) 0 )
                       2063                             ; SOURCE LINE # 457
0000AD 850083     E    2064             MOV     DPH,?C_XBP
0000B0 850082     E    2065             MOV     DPL,?C_XBP+01H
0000B3 A3              2066             INC     DPTR
0000B4 759300     E    2067             MOV     DPX,#?C?XDATASEG
0000B7 E0              2068             MOVX    A,@DPTR
0000B8 FB              2069             MOV     R3,A
0000B9 A3              2070             INC     DPTR
0000BA E0              2071             MOVX    A,@DPTR
0000BB FA              2072             MOV     R2,A
0000BC A3              2073             INC     DPTR
0000BD E0              2074             MOVX    A,@DPTR
0000BE 243C            2075             ADD     A,#03CH
0000C0 F9              2076             MOV     R1,A
0000C1 E4              2077             CLR     A
0000C2 3A              2078             ADDC    A,R2
0000C3 FA              2079             MOV     R2,A
0000C4 12000000   E    2080             LCALL   ?C?CLDPTR
0000C8 D3              2081             SETB    C
0000C9 9400            2082             SUBB    A,#00H
0000CB 5003            2083             JNC     $ + 5H
0000CD 010000     F    2084             AJMP    ?C0029
                       2085     ;               {
                       2086                             ; SOURCE LINE # 458
                       2087     ;                       pxQueue->pcReadFrom += pxQueue->ucItemSize;
                       2088                             ; SOURCE LINE # 459
0000D0 850083     E    2089             MOV     DPH,?C_XBP
0000D3 850082     E    2090             MOV     DPL,?C_XBP+01H
0000D6 A3              2091             INC     DPTR
0000D7 759300     E    2092             MOV     DPX,#?C?XDATASEG
0000DA E0              2093             MOVX    A,@DPTR
0000DB FB              2094             MOV     R3,A
0000DC A3              2095             INC     DPTR
0000DD E0              2096             MOVX    A,@DPTR
0000DE FA              2097             MOV     R2,A
0000DF A3              2098             INC     DPTR
0000E0 E0              2099             MOVX    A,@DPTR
0000E1 243E            2100             ADD     A,#03EH
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    34

0000E3 F9              2101             MOV     R1,A
0000E4 E4              2102             CLR     A
0000E5 3A              2103             ADDC    A,R2
0000E6 FA              2104             MOV     R2,A
0000E7 12000000   E    2105             LCALL   ?C?CLDPTR
0000EB FF              2106             MOV     R7,A
0000EC 850083     E    2107             MOV     DPH,?C_XBP
0000EF 850082     E    2108             MOV     DPL,?C_XBP+01H
0000F2 A3              2109             INC     DPTR
0000F3 759300     E    2110             MOV     DPX,#?C?XDATASEG
0000F6 E0              2111             MOVX    A,@DPTR
0000F7 FB              2112             MOV     R3,A
0000F8 A3              2113             INC     DPTR
0000F9 E0              2114             MOVX    A,@DPTR
0000FA FA              2115             MOV     R2,A
0000FB A3              2116             INC     DPTR
0000FC E0              2117             MOVX    A,@DPTR
0000FD 2409            2118             ADD     A,#09H
0000FF F9              2119             MOV     R1,A
000100 E4              2120             CLR     A
000101 3A              2121             ADDC    A,R2
000102 FA              2122             MOV     R2,A
000103 09              2123             INC     R1
000104 E9              2124             MOV     A,R1
000105 7001            2125             JNZ     ?C0073
000107 0A              2126             INC     R2
000108                 2127     ?C0073:
000108 E4              2128             CLR     A
000109 8FF0            2129             MOV     B,R7
00010B 12000000   E    2130             LCALL   ?C?IILDPTR
                       2131     ;                       if( pxQueue->pcReadFrom >= pxQueue->pcTail )
                       2132                             ; SOURCE LINE # 460
00010F 850083     E    2133             MOV     DPH,?C_XBP
000112 850082     E    2134             MOV     DPL,?C_XBP+01H
000115 A3              2135             INC     DPTR
000116 759300     E    2136             MOV     DPX,#?C?XDATASEG
000119 E0              2137             MOVX    A,@DPTR
00011A FB              2138             MOV     R3,A
00011B A3              2139             INC     DPTR
00011C E0              2140             MOVX    A,@DPTR
00011D FA              2141             MOV     R2,A
00011E A3              2142             INC     DPTR
00011F E0              2143             MOVX    A,@DPTR
000120 2403            2144             ADD     A,#03H
000122 F9              2145             MOV     R1,A
000123 E4              2146             CLR     A
000124 3A              2147             ADDC    A,R2
000125 FA              2148             MOV     R2,A
000126 12000000   E    2149             LCALL   ?C?PLDPTR
00012A C003            2150             PUSH    AR3
00012C C002            2151             PUSH    AR2
00012E C001            2152             PUSH    AR1
000130 850083     E    2153             MOV     DPH,?C_XBP
000133 850082     E    2154             MOV     DPL,?C_XBP+01H
000136 A3              2155             INC     DPTR
000137 759300     E    2156             MOV     DPX,#?C?XDATASEG
00013A E0              2157             MOVX    A,@DPTR
00013B FB              2158             MOV     R3,A
00013C A3              2159             INC     DPTR
00013D E0              2160             MOVX    A,@DPTR
00013E FA              2161             MOV     R2,A
00013F A3              2162             INC     DPTR
000140 E0              2163             MOVX    A,@DPTR
000141 2409            2164             ADD     A,#09H
000143 F9              2165             MOV     R1,A
000144 E4              2166             CLR     A
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    35

000145 3A              2167             ADDC    A,R2
000146 FA              2168             MOV     R2,A
000147 12000000   E    2169             LCALL   ?C?PLDPTR
00014B C3              2170             CLR     C
00014C D082            2171             POP     DPL
00014E D083            2172             POP     DPH
000150 D0E0            2173             POP     ACC
000152 E9              2174             MOV     A,R1
000153 9582            2175             SUBB    A,DPL
000155 EA              2176             MOV     A,R2
000156 9583            2177             SUBB    A,DPH
000158                 2178     ?C0074:
000158 4037            2179             JC      ?C0030
                       2180     ;                       {
                       2181                             ; SOURCE LINE # 461
                       2182     ;                               pxQueue->pcReadFrom = pxQueue->pcHead;
                       2183                             ; SOURCE LINE # 462
00015A 850083     E    2184             MOV     DPH,?C_XBP
00015D 850082     E    2185             MOV     DPL,?C_XBP+01H
000160 A3              2186             INC     DPTR
000161 759300     E    2187             MOV     DPX,#?C?XDATASEG
000164 E0              2188             MOVX    A,@DPTR
000165 FB              2189             MOV     R3,A
000166 A3              2190             INC     DPTR
000167 E0              2191             MOVX    A,@DPTR
000168 FA              2192             MOV     R2,A
000169 A3              2193             INC     DPTR
00016A E0              2194             MOVX    A,@DPTR
00016B F9              2195             MOV     R1,A
00016C 12000000   E    2196             LCALL   ?C?PLDPTR
000170 C003            2197             PUSH    AR3
000172 C002            2198             PUSH    AR2
000174 C001            2199             PUSH    AR1
000176 850083     E    2200             MOV     DPH,?C_XBP
000179 850082     E    2201             MOV     DPL,?C_XBP+01H
00017C A3              2202             INC     DPTR
00017D 759300     E    2203             MOV     DPX,#?C?XDATASEG
000180 E0              2204             MOVX    A,@DPTR
000181 FB              2205             MOV     R3,A
000182 A3              2206             INC     DPTR
000183 E0              2207             MOVX    A,@DPTR
000184 FA              2208             MOV     R2,A
000185 A3              2209             INC     DPTR
000186 E0              2210             MOVX    A,@DPTR
000187 2409            2211             ADD     A,#09H
000189 F9              2212             MOV     R1,A
00018A E4              2213             CLR     A
00018B 3A              2214             ADDC    A,R2
00018C FA              2215             MOV     R2,A
00018D 12000000   E    2216             LCALL   ?C?PSTPTR
                       2217     ;                       }
                       2218                             ; SOURCE LINE # 463
000191                 2219     ?C0030:
                       2220     ;                       --( pxQueue->ucMessagesWaiting );
                       2221                             ; SOURCE LINE # 464
000191 850083     E    2222             MOV     DPH,?C_XBP
000194 850082     E    2223             MOV     DPL,?C_XBP+01H
000197 A3              2224             INC     DPTR
000198 759300     E    2225             MOV     DPX,#?C?XDATASEG
00019B E0              2226             MOVX    A,@DPTR
00019C FB              2227             MOV     R3,A
00019D A3              2228             INC     DPTR
00019E E0              2229             MOVX    A,@DPTR
00019F FA              2230             MOV     R2,A
0001A0 A3              2231             INC     DPTR
0001A1 E0              2232             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    36

0001A2 243C            2233             ADD     A,#03CH
0001A4 F9              2234             MOV     R1,A
0001A5 E4              2235             CLR     A
0001A6 3A              2236             ADDC    A,R2
0001A7 FA              2237             MOV     R2,A
0001A8 74FF            2238             MOV     A,#0FFH
0001AA 12000000   E    2239             LCALL   ?C?CILDPTR
                       2240     ;                       memcpy( ( void * ) pcBuffer, ( void * ) pxQueue->pcReadFrom, ( u
                               nsigned ) pxQueue->ucItemSize );
                       2241                             ; SOURCE LINE # 465
0001AE 850083     E    2242             MOV     DPH,?C_XBP
0001B1 850082     E    2243             MOV     DPL,?C_XBP+01H
0001B4 A3              2244             INC     DPTR
0001B5 759300     E    2245             MOV     DPX,#?C?XDATASEG
0001B8 E0              2246             MOVX    A,@DPTR
0001B9 FB              2247             MOV     R3,A
0001BA A3              2248             INC     DPTR
0001BB E0              2249             MOVX    A,@DPTR
0001BC FA              2250             MOV     R2,A
0001BD A3              2251             INC     DPTR
0001BE E0              2252             MOVX    A,@DPTR
0001BF 243E            2253             ADD     A,#03EH
0001C1 F9              2254             MOV     R1,A
0001C2 E4              2255             CLR     A
0001C3 3A              2256             ADDC    A,R2
0001C4 FA              2257             MOV     R2,A
0001C5 12000000   E    2258             LCALL   ?C?CLDPTR
0001C9 FF              2259             MOV     R7,A
0001CA 7E00            2260             MOV     R6,#00H
0001CC 850083     E    2261             MOV     DPH,?C_XBP
0001CF 850082     E    2262             MOV     DPL,?C_XBP+01H
0001D2 A3              2263             INC     DPTR
0001D3 759300     E    2264             MOV     DPX,#?C?XDATASEG
0001D6 E0              2265             MOVX    A,@DPTR
0001D7 FB              2266             MOV     R3,A
0001D8 A3              2267             INC     DPTR
0001D9 E0              2268             MOVX    A,@DPTR
0001DA FA              2269             MOV     R2,A
0001DB A3              2270             INC     DPTR
0001DC E0              2271             MOVX    A,@DPTR
0001DD 2409            2272             ADD     A,#09H
0001DF F9              2273             MOV     R1,A
0001E0 E4              2274             CLR     A
0001E1 3A              2275             ADDC    A,R2
0001E2 FA              2276             MOV     R2,A
0001E3 12000000   E    2277             LCALL   ?C?PLDPTR
0001E7 C003            2278             PUSH    AR3
0001E9 C002            2279             PUSH    AR2
0001EB C001            2280             PUSH    AR1
0001ED 90000004        2281             MOV     DPTR,#04H
0001F1 12000000   E    2282             LCALL   ?C?XBPOFF
0001F5 E0              2283             MOVX    A,@DPTR
0001F6 FB              2284             MOV     R3,A
0001F7 A3              2285             INC     DPTR
0001F8 E0              2286             MOVX    A,@DPTR
0001F9 FA              2287             MOV     R2,A
0001FA A3              2288             INC     DPTR
0001FB E0              2289             MOVX    A,@DPTR
0001FC F8              2290             MOV     R0,A
0001FD AC02            2291             MOV     R4,AR2
0001FF AD03            2292             MOV     R5,AR3
000201 D001            2293             POP     AR1
000203 D002            2294             POP     AR2
000205 D003            2295             POP     AR3
000207 12000000   E    2296             LCALL   ?C?COPY
                       2297     ; 
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    37

                       2298     ;                       /* Increment the lock count so prvUnlockQueue knows to check for
                       2299     ;                       tasks waiting for space to become available on the queue. */
                       2300     ;                       ++( pxQueue->cRxLock );
                       2301                             ; SOURCE LINE # 469
00020B 850083     E    2302             MOV     DPH,?C_XBP
00020E 850082     E    2303             MOV     DPL,?C_XBP+01H
000211 A3              2304             INC     DPTR
000212 759300     E    2305             MOV     DPX,#?C?XDATASEG
000215 E0              2306             MOVX    A,@DPTR
000216 FB              2307             MOV     R3,A
000217 A3              2308             INC     DPTR
000218 E0              2309             MOVX    A,@DPTR
000219 FA              2310             MOV     R2,A
00021A A3              2311             INC     DPTR
00021B E0              2312             MOVX    A,@DPTR
00021C 243F            2313             ADD     A,#03FH
00021E F9              2314             MOV     R1,A
00021F E4              2315             CLR     A
000220 3A              2316             ADDC    A,R2
000221 FA              2317             MOV     R2,A
000222 7401            2318             MOV     A,#01H
000224 12000000   E    2319             LCALL   ?C?CILDPTR
                       2320     ;                       cReturn = ( signed portCHAR ) pdPASS;
                       2321                             ; SOURCE LINE # 470
000228 850083     E    2322             MOV     DPH,?C_XBP
00022B 850082     E    2323             MOV     DPL,?C_XBP+01H
00022E 759300     E    2324             MOV     DPX,#?C?XDATASEG
000231 7401            2325             MOV     A,#01H
000233 F0              2326             MOVX    @DPTR,A
                       2327     ;               }
                       2328                             ; SOURCE LINE # 471
000234 800B            2329             SJMP    ?C0031
000236                 2330     ?C0029:
                       2331     ;               else
                       2332     ;               {
                       2333                             ; SOURCE LINE # 473
                       2334     ;                       cReturn = ( signed portCHAR ) pdFAIL;
                       2335                             ; SOURCE LINE # 474
000236 850083     E    2336             MOV     DPH,?C_XBP
000239 850082     E    2337             MOV     DPL,?C_XBP+01H
00023C 759300     E    2338             MOV     DPX,#?C?XDATASEG
00023F E4              2339             CLR     A
000240 F0              2340             MOVX    @DPTR,A
                       2341     ;               }
                       2342                             ; SOURCE LINE # 475
000241                 2343     ?C0031:
                       2344     ;       }
                       2345                             ; SOURCE LINE # 476
                       2346     ;       taskEXIT_CRITICAL();
000241 D0D092AF        2347              DB 0D0H, 0D0H, 092H, 0AFH;
                       2348     ; 
                       2349     ;       /* We no longer require exclusive access to the queue. */
                       2350     ;       if( prvUnlockQueue( pxQueue ) )
                       2351                             ; SOURCE LINE # 480
000245 12000000   F    2352             LCALL   L?0080
000249 EF              2353             MOV     A,R7
00024A 600D            2354             JZ      ?C0032
                       2355     ;       {
                       2356                             ; SOURCE LINE # 481
                       2357     ;               if( !cTaskResumeAll() )
                       2358                             ; SOURCE LINE # 482
00024C 12000000   E    2359             LCALL   _?cTaskResumeAll
000250 EF              2360             MOV     A,R7
000251 700A            2361             JNZ     ?C0034
                       2362     ;               {
                       2363                             ; SOURCE LINE # 483
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    38

                       2364     ;                       taskYIELD();
                       2365                             ; SOURCE LINE # 484
000253 12000000   E    2366             LCALL   _?vPortYield
                       2367     ;               }
                       2368                             ; SOURCE LINE # 485
                       2369     ;       }
                       2370                             ; SOURCE LINE # 486
000257 8004            2371             SJMP    ?C0034
000259                 2372     ?C0032:
                       2373     ;       else
                       2374     ;       {
                       2375                             ; SOURCE LINE # 488
                       2376     ;               cTaskResumeAll();
                       2377                             ; SOURCE LINE # 489
000259 12000000   E    2378             LCALL   _?cTaskResumeAll
                       2379     ;       }
                       2380                             ; SOURCE LINE # 490
00025D                 2381     ?C0034:
                       2382     ; 
                       2383     ;       return cReturn;
                       2384                             ; SOURCE LINE # 492
00025D 850083     E    2385             MOV     DPH,?C_XBP
000260 850082     E    2386             MOV     DPL,?C_XBP+01H
000263 759300     E    2387             MOV     DPX,#?C?XDATASEG
000266 E0              2388             MOVX    A,@DPTR
000267 FF              2389             MOV     R7,A
                       2390     ; }
                       2391                             ; SOURCE LINE # 493
000268                 2392     ?C0035:
000268 9000000B        2393             MOV     DPTR,#0BH
00026C 02000000   E    2394             LJMP    ?C?ADDXBP
                       2395     ; END OF _?cQueueReceive
                       2396     
                       2397     ; /*-----------------------------------------------------------*/
                       2398     ; 
                       2399     ; signed portCHAR cQueueReceiveFromISR( xQueueHandle pxQueue, void *pcBuffer, signed por
                               tCHAR *pcTaskWoken ) reentrant
                       2400     
------                 2401             RSEG  ?PR?_?cQueueReceiveFromISR?QUEUE
000000                 2402     _?cQueueReceiveFromISR:
                       2403             USING   0
                       2404                             ; SOURCE LINE # 496
000000 9000FFFD        2405             MOV     DPTR,#0FFFDH
000004 12000000   E    2406             LCALL   ?C?ADDXBP
000008 EB              2407             MOV     A,R3
000009 F0              2408             MOVX    @DPTR,A
00000A A3              2409             INC     DPTR
00000B EA              2410             MOV     A,R2
00000C F0              2411             MOVX    @DPTR,A
00000D A3              2412             INC     DPTR
00000E E9              2413             MOV     A,R1
00000F F0              2414             MOVX    @DPTR,A
000010 9000FFFF        2415             MOV     DPTR,#0FFFFH
000014 12000000   E    2416             LCALL   ?C?ADDXBP
                       2417     ; {
                       2418     ; signed portCHAR cReturn;
                       2419     ; 
                       2420     ;       /* We cannot block from an ISR, so check there is data available. */
                       2421     ;       if( pxQueue->ucMessagesWaiting > ( unsigned portCHAR ) 0 )
                       2422                             ; SOURCE LINE # 501
000018 850083     E    2423             MOV     DPH,?C_XBP
00001B 850082     E    2424             MOV     DPL,?C_XBP+01H
00001E A3              2425             INC     DPTR
00001F 759300     E    2426             MOV     DPX,#?C?XDATASEG
000022 E0              2427             MOVX    A,@DPTR
000023 FB              2428             MOV     R3,A
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    39

000024 A3              2429             INC     DPTR
000025 E0              2430             MOVX    A,@DPTR
000026 FA              2431             MOV     R2,A
000027 A3              2432             INC     DPTR
000028 E0              2433             MOVX    A,@DPTR
000029 243C            2434             ADD     A,#03CH
00002B F9              2435             MOV     R1,A
00002C E4              2436             CLR     A
00002D 3A              2437             ADDC    A,R2
00002E FA              2438             MOV     R2,A
00002F 12000000   E    2439             LCALL   ?C?CLDPTR
000033 D3              2440             SETB    C
000034 9400            2441             SUBB    A,#00H
000036 5003            2442             JNC     $ + 5H
000038 010000     F    2443             AJMP    ?C0036
                       2444     ;       {
                       2445                             ; SOURCE LINE # 502
                       2446     ;               /* Copy the data from the queue. */
                       2447     ;               pxQueue->pcReadFrom += pxQueue->ucItemSize;
                       2448                             ; SOURCE LINE # 504
00003B 850083     E    2449             MOV     DPH,?C_XBP
00003E 850082     E    2450             MOV     DPL,?C_XBP+01H
000041 A3              2451             INC     DPTR
000042 759300     E    2452             MOV     DPX,#?C?XDATASEG
000045 E0              2453             MOVX    A,@DPTR
000046 FB              2454             MOV     R3,A
000047 A3              2455             INC     DPTR
000048 E0              2456             MOVX    A,@DPTR
000049 FA              2457             MOV     R2,A
00004A A3              2458             INC     DPTR
00004B E0              2459             MOVX    A,@DPTR
00004C 243E            2460             ADD     A,#03EH
00004E F9              2461             MOV     R1,A
00004F E4              2462             CLR     A
000050 3A              2463             ADDC    A,R2
000051 FA              2464             MOV     R2,A
000052 12000000   E    2465             LCALL   ?C?CLDPTR
000056 FF              2466             MOV     R7,A
000057 850083     E    2467             MOV     DPH,?C_XBP
00005A 850082     E    2468             MOV     DPL,?C_XBP+01H
00005D A3              2469             INC     DPTR
00005E 759300     E    2470             MOV     DPX,#?C?XDATASEG
000061 E0              2471             MOVX    A,@DPTR
000062 FB              2472             MOV     R3,A
000063 A3              2473             INC     DPTR
000064 E0              2474             MOVX    A,@DPTR
000065 FA              2475             MOV     R2,A
000066 A3              2476             INC     DPTR
000067 E0              2477             MOVX    A,@DPTR
000068 2409            2478             ADD     A,#09H
00006A F9              2479             MOV     R1,A
00006B E4              2480             CLR     A
00006C 3A              2481             ADDC    A,R2
00006D FA              2482             MOV     R2,A
00006E 09              2483             INC     R1
00006F E9              2484             MOV     A,R1
000070 7001            2485             JNZ     ?C0075
000072 0A              2486             INC     R2
000073                 2487     ?C0075:
000073 E4              2488             CLR     A
000074 8FF0            2489             MOV     B,R7
000076 12000000   E    2490             LCALL   ?C?IILDPTR
                       2491     ;               if( pxQueue->pcReadFrom >= pxQueue->pcTail )
                       2492                             ; SOURCE LINE # 505
00007A 850083     E    2493             MOV     DPH,?C_XBP
00007D 850082     E    2494             MOV     DPL,?C_XBP+01H
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    40

000080 A3              2495             INC     DPTR
000081 759300     E    2496             MOV     DPX,#?C?XDATASEG
000084 E0              2497             MOVX    A,@DPTR
000085 FB              2498             MOV     R3,A
000086 A3              2499             INC     DPTR
000087 E0              2500             MOVX    A,@DPTR
000088 FA              2501             MOV     R2,A
000089 A3              2502             INC     DPTR
00008A E0              2503             MOVX    A,@DPTR
00008B 2403            2504             ADD     A,#03H
00008D F9              2505             MOV     R1,A
00008E E4              2506             CLR     A
00008F 3A              2507             ADDC    A,R2
000090 FA              2508             MOV     R2,A
000091 12000000   E    2509             LCALL   ?C?PLDPTR
000095 C003            2510             PUSH    AR3
000097 C002            2511             PUSH    AR2
000099 C001            2512             PUSH    AR1
00009B 850083     E    2513             MOV     DPH,?C_XBP
00009E 850082     E    2514             MOV     DPL,?C_XBP+01H
0000A1 A3              2515             INC     DPTR
0000A2 759300     E    2516             MOV     DPX,#?C?XDATASEG
0000A5 E0              2517             MOVX    A,@DPTR
0000A6 FB              2518             MOV     R3,A
0000A7 A3              2519             INC     DPTR
0000A8 E0              2520             MOVX    A,@DPTR
0000A9 FA              2521             MOV     R2,A
0000AA A3              2522             INC     DPTR
0000AB E0              2523             MOVX    A,@DPTR
0000AC 2409            2524             ADD     A,#09H
0000AE F9              2525             MOV     R1,A
0000AF E4              2526             CLR     A
0000B0 3A              2527             ADDC    A,R2
0000B1 FA              2528             MOV     R2,A
0000B2 12000000   E    2529             LCALL   ?C?PLDPTR
0000B6 C3              2530             CLR     C
0000B7 D082            2531             POP     DPL
0000B9 D083            2532             POP     DPH
0000BB D0E0            2533             POP     ACC
0000BD E9              2534             MOV     A,R1
0000BE 9582            2535             SUBB    A,DPL
0000C0 EA              2536             MOV     A,R2
0000C1 9583            2537             SUBB    A,DPH
0000C3                 2538     ?C0076:
0000C3 4037            2539             JC      ?C0037
                       2540     ;               {
                       2541                             ; SOURCE LINE # 506
                       2542     ;                       pxQueue->pcReadFrom = pxQueue->pcHead;
                       2543                             ; SOURCE LINE # 507
0000C5 850083     E    2544             MOV     DPH,?C_XBP
0000C8 850082     E    2545             MOV     DPL,?C_XBP+01H
0000CB A3              2546             INC     DPTR
0000CC 759300     E    2547             MOV     DPX,#?C?XDATASEG
0000CF E0              2548             MOVX    A,@DPTR
0000D0 FB              2549             MOV     R3,A
0000D1 A3              2550             INC     DPTR
0000D2 E0              2551             MOVX    A,@DPTR
0000D3 FA              2552             MOV     R2,A
0000D4 A3              2553             INC     DPTR
0000D5 E0              2554             MOVX    A,@DPTR
0000D6 F9              2555             MOV     R1,A
0000D7 12000000   E    2556             LCALL   ?C?PLDPTR
0000DB C003            2557             PUSH    AR3
0000DD C002            2558             PUSH    AR2
0000DF C001            2559             PUSH    AR1
0000E1 850083     E    2560             MOV     DPH,?C_XBP
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    41

0000E4 850082     E    2561             MOV     DPL,?C_XBP+01H
0000E7 A3              2562             INC     DPTR
0000E8 759300     E    2563             MOV     DPX,#?C?XDATASEG
0000EB E0              2564             MOVX    A,@DPTR
0000EC FB              2565             MOV     R3,A
0000ED A3              2566             INC     DPTR
0000EE E0              2567             MOVX    A,@DPTR
0000EF FA              2568             MOV     R2,A
0000F0 A3              2569             INC     DPTR
0000F1 E0              2570             MOVX    A,@DPTR
0000F2 2409            2571             ADD     A,#09H
0000F4 F9              2572             MOV     R1,A
0000F5 E4              2573             CLR     A
0000F6 3A              2574             ADDC    A,R2
0000F7 FA              2575             MOV     R2,A
0000F8 12000000   E    2576             LCALL   ?C?PSTPTR
                       2577     ;               }
                       2578                             ; SOURCE LINE # 508
0000FC                 2579     ?C0037:
                       2580     ;               --( pxQueue->ucMessagesWaiting );
                       2581                             ; SOURCE LINE # 509
0000FC 850083     E    2582             MOV     DPH,?C_XBP
0000FF 850082     E    2583             MOV     DPL,?C_XBP+01H
000102 A3              2584             INC     DPTR
000103 759300     E    2585             MOV     DPX,#?C?XDATASEG
000106 E0              2586             MOVX    A,@DPTR
000107 FB              2587             MOV     R3,A
000108 A3              2588             INC     DPTR
000109 E0              2589             MOVX    A,@DPTR
00010A FA              2590             MOV     R2,A
00010B A3              2591             INC     DPTR
00010C E0              2592             MOVX    A,@DPTR
00010D 243C            2593             ADD     A,#03CH
00010F F9              2594             MOV     R1,A
000110 E4              2595             CLR     A
000111 3A              2596             ADDC    A,R2
000112 FA              2597             MOV     R2,A
000113 74FF            2598             MOV     A,#0FFH
000115 12000000   E    2599             LCALL   ?C?CILDPTR
                       2600     ;               memcpy( ( void * ) pcBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned 
                               ) pxQueue->ucItemSize );
                       2601                             ; SOURCE LINE # 510
000119 850083     E    2602             MOV     DPH,?C_XBP
00011C 850082     E    2603             MOV     DPL,?C_XBP+01H
00011F A3              2604             INC     DPTR
000120 759300     E    2605             MOV     DPX,#?C?XDATASEG
000123 E0              2606             MOVX    A,@DPTR
000124 FB              2607             MOV     R3,A
000125 A3              2608             INC     DPTR
000126 E0              2609             MOVX    A,@DPTR
000127 FA              2610             MOV     R2,A
000128 A3              2611             INC     DPTR
000129 E0              2612             MOVX    A,@DPTR
00012A 243E            2613             ADD     A,#03EH
00012C F9              2614             MOV     R1,A
00012D E4              2615             CLR     A
00012E 3A              2616             ADDC    A,R2
00012F FA              2617             MOV     R2,A
000130 12000000   E    2618             LCALL   ?C?CLDPTR
000134 FF              2619             MOV     R7,A
000135 7E00            2620             MOV     R6,#00H
000137 850083     E    2621             MOV     DPH,?C_XBP
00013A 850082     E    2622             MOV     DPL,?C_XBP+01H
00013D A3              2623             INC     DPTR
00013E 759300     E    2624             MOV     DPX,#?C?XDATASEG
000141 E0              2625             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    42

000142 FB              2626             MOV     R3,A
000143 A3              2627             INC     DPTR
000144 E0              2628             MOVX    A,@DPTR
000145 FA              2629             MOV     R2,A
000146 A3              2630             INC     DPTR
000147 E0              2631             MOVX    A,@DPTR
000148 2409            2632             ADD     A,#09H
00014A F9              2633             MOV     R1,A
00014B E4              2634             CLR     A
00014C 3A              2635             ADDC    A,R2
00014D FA              2636             MOV     R2,A
00014E 12000000   E    2637             LCALL   ?C?PLDPTR
000152 C003            2638             PUSH    AR3
000154 C002            2639             PUSH    AR2
000156 C001            2640             PUSH    AR1
000158 90000004        2641             MOV     DPTR,#04H
00015C 12000000   E    2642             LCALL   ?C?XBPOFF
000160 E0              2643             MOVX    A,@DPTR
000161 FB              2644             MOV     R3,A
000162 A3              2645             INC     DPTR
000163 E0              2646             MOVX    A,@DPTR
000164 FA              2647             MOV     R2,A
000165 A3              2648             INC     DPTR
000166 E0              2649             MOVX    A,@DPTR
000167 F8              2650             MOV     R0,A
000168 AC02            2651             MOV     R4,AR2
00016A AD03            2652             MOV     R5,AR3
00016C D001            2653             POP     AR1
00016E D002            2654             POP     AR2
000170 D003            2655             POP     AR3
000172 12000000   E    2656             LCALL   ?C?COPY
                       2657     ; 
                       2658     ;               /* If the queue is locked we will not modify the event list.  Instead
                       2659     ;               we update the lock count so the task that unlocks the queue will know
                       2660     ;               that an ISR has removed data while the queue was locked. */
                       2661     ;               if( pxQueue->cRxLock == queueUNLOCKED )
                       2662                             ; SOURCE LINE # 515
000176 850083     E    2663             MOV     DPH,?C_XBP
000179 850082     E    2664             MOV     DPL,?C_XBP+01H
00017C A3              2665             INC     DPTR
00017D 759300     E    2666             MOV     DPX,#?C?XDATASEG
000180 E0              2667             MOVX    A,@DPTR
000181 FB              2668             MOV     R3,A
000182 A3              2669             INC     DPTR
000183 E0              2670             MOVX    A,@DPTR
000184 FA              2671             MOV     R2,A
000185 A3              2672             INC     DPTR
000186 E0              2673             MOVX    A,@DPTR
000187 243F            2674             ADD     A,#03FH
000189 F9              2675             MOV     R1,A
00018A E4              2676             CLR     A
00018B 3A              2677             ADDC    A,R2
00018C FA              2678             MOV     R2,A
00018D 12000000   E    2679             LCALL   ?C?CLDPTR
000191 F4              2680             CPL     A
000192 706F            2681             JNZ     ?C0038
                       2682     ;               {
                       2683                             ; SOURCE LINE # 516
                       2684     ;                       /* We only want to wake one task per ISR, so check that a task h
                               as
                       2685     ;                       not already been woken. */
                       2686     ;                       if( !( *pcTaskWoken ) )
                       2687                             ; SOURCE LINE # 519
000194 90000007        2688             MOV     DPTR,#07H
000198 12000000   E    2689             LCALL   ?C?XBPOFF
00019C E0              2690             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    43

00019D FB              2691             MOV     R3,A
00019E A3              2692             INC     DPTR
00019F E0              2693             MOVX    A,@DPTR
0001A0 FA              2694             MOV     R2,A
0001A1 A3              2695             INC     DPTR
0001A2 E0              2696             MOVX    A,@DPTR
0001A3 F9              2697             MOV     R1,A
0001A4 12000000   E    2698             LCALL   ?C?CLDPTR
0001A8 7076            2699             JNZ     ?C0044
                       2700     ;                       {
                       2701                             ; SOURCE LINE # 520
                       2702     ;                               if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend 
                               ) ) )
                       2703                             ; SOURCE LINE # 521
0001AA 850083     E    2704             MOV     DPH,?C_XBP
0001AD 850082     E    2705             MOV     DPL,?C_XBP+01H
0001B0 A3              2706             INC     DPTR
0001B1 759300     E    2707             MOV     DPX,#?C?XDATASEG
0001B4 E0              2708             MOVX    A,@DPTR
0001B5 FB              2709             MOV     R3,A
0001B6 A3              2710             INC     DPTR
0001B7 E0              2711             MOVX    A,@DPTR
0001B8 FA              2712             MOV     R2,A
0001B9 A3              2713             INC     DPTR
0001BA E0              2714             MOVX    A,@DPTR
0001BB 240C            2715             ADD     A,#0CH
0001BD F9              2716             MOV     R1,A
0001BE E4              2717             CLR     A
0001BF 3A              2718             ADDC    A,R2
0001C0 FA              2719             MOV     R2,A
0001C1 12000000   E    2720             LCALL   ?C?ILDPTR
0001C5 45F0            2721             ORL     A,B
0001C7 C3              2722             CLR     C
0001C8 7001            2723             JNZ     ?C0041
0001CA D3              2724             SETB    C
0001CB                 2725     ?C0041:
0001CB                 2726     ?C0042:
0001CB 4053            2727             JC      ?C0044
                       2728     ;                               {
                       2729                             ; SOURCE LINE # 522
                       2730     ;                                       if( cTaskRemoveFromEventList( &( pxQueue->xTasks
                               WaitingToSend ) ) != ( signed portCHAR ) pdFALSE )
                       2731                             ; SOURCE LINE # 523
0001CD 850083     E    2732             MOV     DPH,?C_XBP
0001D0 850082     E    2733             MOV     DPL,?C_XBP+01H
0001D3 A3              2734             INC     DPTR
0001D4 759300     E    2735             MOV     DPX,#?C?XDATASEG
0001D7 E0              2736             MOVX    A,@DPTR
0001D8 FB              2737             MOV     R3,A
0001D9 A3              2738             INC     DPTR
0001DA E0              2739             MOVX    A,@DPTR
0001DB FA              2740             MOV     R2,A
0001DC A3              2741             INC     DPTR
0001DD E0              2742             MOVX    A,@DPTR
0001DE 240C            2743             ADD     A,#0CH
0001E0 F9              2744             MOV     R1,A
0001E1 E4              2745             CLR     A
0001E2 3A              2746             ADDC    A,R2
0001E3 FA              2747             MOV     R2,A
0001E4 12000000   E    2748             LCALL   _?cTaskRemoveFromEventList
0001E8 EF              2749             MOV     A,R7
0001E9 6035            2750             JZ      ?C0044
                       2751     ;                                       {
                       2752                             ; SOURCE LINE # 524
                       2753     ;                                               /* The task waiting has a higher priorit
                               y than us so
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    44

                       2754     ;                                               force a context switch. */
                       2755     ;                                               *pcTaskWoken = ( signed portCHAR ) pdTRU
                               E;
                       2756                             ; SOURCE LINE # 527
0001EB 90000007        2757             MOV     DPTR,#07H
0001EF 12000000   E    2758             LCALL   ?C?XBPOFF
0001F3 E0              2759             MOVX    A,@DPTR
0001F4 FB              2760             MOV     R3,A
0001F5 A3              2761             INC     DPTR
0001F6 E0              2762             MOVX    A,@DPTR
0001F7 FA              2763             MOV     R2,A
0001F8 A3              2764             INC     DPTR
0001F9 E0              2765             MOVX    A,@DPTR
0001FA F9              2766             MOV     R1,A
0001FB 7401            2767             MOV     A,#01H
0001FD 12000000   E    2768             LCALL   ?C?CSTPTR
                       2769     ;                                       }
                       2770                             ; SOURCE LINE # 528
                       2771     ;                               }
                       2772                             ; SOURCE LINE # 529
                       2773     ;                       }
                       2774                             ; SOURCE LINE # 530
                       2775     ;               }
                       2776                             ; SOURCE LINE # 531
000201 801D            2777             SJMP    ?C0044
000203                 2778     ?C0038:
                       2779     ;               else
                       2780     ;               {
                       2781                             ; SOURCE LINE # 533
                       2782     ;                       /* Increment the lock count so the task that unlocks the queue 
                       2783     ;                       knows that data was removed while it was locked. */
                       2784     ;                       ++( pxQueue->cRxLock );
                       2785                             ; SOURCE LINE # 536
000203 850083     E    2786             MOV     DPH,?C_XBP
000206 850082     E    2787             MOV     DPL,?C_XBP+01H
000209 A3              2788             INC     DPTR
00020A 759300     E    2789             MOV     DPX,#?C?XDATASEG
00020D E0              2790             MOVX    A,@DPTR
00020E FB              2791             MOV     R3,A
00020F A3              2792             INC     DPTR
000210 E0              2793             MOVX    A,@DPTR
000211 FA              2794             MOV     R2,A
000212 A3              2795             INC     DPTR
000213 E0              2796             MOVX    A,@DPTR
000214 243F            2797             ADD     A,#03FH
000216 F9              2798             MOV     R1,A
000217 E4              2799             CLR     A
000218 3A              2800             ADDC    A,R2
000219 FA              2801             MOV     R2,A
00021A 7401            2802             MOV     A,#01H
00021C 12000000   E    2803             LCALL   ?C?CILDPTR
                       2804     ;               }
                       2805                             ; SOURCE LINE # 537
000220                 2806     ?C0044:
                       2807     ; 
                       2808     ;               cReturn = ( signed portCHAR ) pdPASS;
                       2809                             ; SOURCE LINE # 539
000220 850083     E    2810             MOV     DPH,?C_XBP
000223 850082     E    2811             MOV     DPL,?C_XBP+01H
000226 759300     E    2812             MOV     DPX,#?C?XDATASEG
000229 7401            2813             MOV     A,#01H
00022B F0              2814             MOVX    @DPTR,A
                       2815     ;       }
                       2816                             ; SOURCE LINE # 540
00022C 800B            2817             SJMP    ?C0045
00022E                 2818     ?C0036:
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    45

                       2819     ;       else
                       2820     ;       {
                       2821                             ; SOURCE LINE # 542
                       2822     ;               cReturn = ( signed portCHAR ) pdFAIL;
                       2823                             ; SOURCE LINE # 543
00022E 850083     E    2824             MOV     DPH,?C_XBP
000231 850082     E    2825             MOV     DPL,?C_XBP+01H
000234 759300     E    2826             MOV     DPX,#?C?XDATASEG
000237 E4              2827             CLR     A
000238 F0              2828             MOVX    @DPTR,A
                       2829     ;       }
                       2830                             ; SOURCE LINE # 544
000239                 2831     ?C0045:
                       2832     ; 
                       2833     ;       return cReturn;
                       2834                             ; SOURCE LINE # 546
000239 850083     E    2835             MOV     DPH,?C_XBP
00023C 850082     E    2836             MOV     DPL,?C_XBP+01H
00023F 759300     E    2837             MOV     DPX,#?C?XDATASEG
000242 E0              2838             MOVX    A,@DPTR
000243 FF              2839             MOV     R7,A
                       2840     ; }
                       2841                             ; SOURCE LINE # 547
000244                 2842     ?C0046:
000244 9000000A        2843             MOV     DPTR,#0AH
000248 02000000   E    2844             LJMP    ?C?ADDXBP
                       2845     ; END OF _?cQueueReceiveFromISR
                       2846     
                       2847     ; /*-----------------------------------------------------------*/
                       2848     ; 
                       2849     ; unsigned portCHAR ucQueueMessagesWaiting( xQueueHandle pxQueue ) reentrant
                       2850     
------                 2851             RSEG  ?PR?_?ucQueueMessagesWaiting?QUEUE
000000                 2852     _?ucQueueMessagesWaiting:
                       2853             USING   0
                       2854                             ; SOURCE LINE # 550
000000 9000FFFD        2855             MOV     DPTR,#0FFFDH
000004 12000000   E    2856             LCALL   ?C?ADDXBP
000008 EB              2857             MOV     A,R3
000009 F0              2858             MOVX    @DPTR,A
00000A A3              2859             INC     DPTR
00000B EA              2860             MOV     A,R2
00000C F0              2861             MOVX    @DPTR,A
00000D A3              2862             INC     DPTR
00000E E9              2863             MOV     A,R1
00000F F0              2864             MOVX    @DPTR,A
000010 9000FFFF        2865             MOV     DPTR,#0FFFFH
000014 12000000   E    2866             LCALL   ?C?ADDXBP
                       2867     ; {
                       2868     ; unsigned portCHAR ucReturn;
000018 A2AFC2AF        2869              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
00001C C0D0                     
                       2870     ; 
                       2871     ;       taskENTER_CRITICAL();
                       2872     ;               ucReturn = pxQueue->ucMessagesWaiting;
                       2873                             ; SOURCE LINE # 555
00001E 850083     E    2874             MOV     DPH,?C_XBP
000021 850082     E    2875             MOV     DPL,?C_XBP+01H
000024 A3              2876             INC     DPTR
000025 759300     E    2877             MOV     DPX,#?C?XDATASEG
000028 E0              2878             MOVX    A,@DPTR
000029 FB              2879             MOV     R3,A
00002A A3              2880             INC     DPTR
00002B E0              2881             MOVX    A,@DPTR
00002C FA              2882             MOV     R2,A
00002D A3              2883             INC     DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    46

00002E E0              2884             MOVX    A,@DPTR
00002F 243C            2885             ADD     A,#03CH
000031 F9              2886             MOV     R1,A
000032 E4              2887             CLR     A
000033 3A              2888             ADDC    A,R2
000034 FA              2889             MOV     R2,A
000035 12000000   E    2890             LCALL   ?C?CLDPTR
000039 850083     E    2891             MOV     DPH,?C_XBP
00003C 850082     E    2892             MOV     DPL,?C_XBP+01H
00003F 759300     E    2893             MOV     DPX,#?C?XDATASEG
000042 F0              2894             MOVX    @DPTR,A
                       2895     ;       taskEXIT_CRITICAL();
000043 D0D092AF        2896              DB 0D0H, 0D0H, 092H, 0AFH;
                       2897     ; 
                       2898     ;       return ucReturn;
                       2899                             ; SOURCE LINE # 558
000047 850083     E    2900             MOV     DPH,?C_XBP
00004A 850082     E    2901             MOV     DPL,?C_XBP+01H
00004D 759300     E    2902             MOV     DPX,#?C?XDATASEG
000050 E0              2903             MOVX    A,@DPTR
000051 FF              2904             MOV     R7,A
                       2905     ; }
                       2906                             ; SOURCE LINE # 559
000052                 2907     ?C0047:
000052 90000004        2908             MOV     DPTR,#04H
000056 02000000   E    2909             LJMP    ?C?ADDXBP
                       2910     ; END OF _?ucQueueMessagesWaiting
                       2911     
                       2912     ; /*-----------------------------------------------------------*/
                       2913     ; 
                       2914     ; void vQueueDelete( xQueueHandle pxQueue ) reentrant
                       2915     
------                 2916             RSEG  ?PR?_?vQueueDelete?QUEUE
000000                 2917     _?vQueueDelete:
                       2918             USING   0
                       2919                             ; SOURCE LINE # 562
000000 9000FFFD        2920             MOV     DPTR,#0FFFDH
000004 12000000   E    2921             LCALL   ?C?ADDXBP
000008 EB              2922             MOV     A,R3
000009 F0              2923             MOVX    @DPTR,A
00000A A3              2924             INC     DPTR
00000B EA              2925             MOV     A,R2
00000C F0              2926             MOVX    @DPTR,A
00000D A3              2927             INC     DPTR
00000E E9              2928             MOV     A,R1
00000F F0              2929             MOVX    @DPTR,A
                       2930     ; {
                       2931     ;       vPortFree( pxQueue->pcHead );
                       2932                             ; SOURCE LINE # 564
000010 850083     E    2933             MOV     DPH,?C_XBP
000013 850082     E    2934             MOV     DPL,?C_XBP+01H
000016 759300     E    2935             MOV     DPX,#?C?XDATASEG
000019 E0              2936             MOVX    A,@DPTR
00001A FB              2937             MOV     R3,A
00001B A3              2938             INC     DPTR
00001C E0              2939             MOVX    A,@DPTR
00001D FA              2940             MOV     R2,A
00001E A3              2941             INC     DPTR
00001F E0              2942             MOVX    A,@DPTR
000020 F9              2943             MOV     R1,A
000021 12000000   E    2944             LCALL   ?C?PLDPTR
000025 12000000   E    2945             LCALL   _?vPortFree
                       2946     ;       vPortFree( pxQueue );
                       2947                             ; SOURCE LINE # 565
000029 850083     E    2948             MOV     DPH,?C_XBP
00002C 850082     E    2949             MOV     DPL,?C_XBP+01H
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    47

00002F 759300     E    2950             MOV     DPX,#?C?XDATASEG
000032 E0              2951             MOVX    A,@DPTR
000033 FB              2952             MOV     R3,A
000034 A3              2953             INC     DPTR
000035 E0              2954             MOVX    A,@DPTR
000036 FA              2955             MOV     R2,A
000037 A3              2956             INC     DPTR
000038 E0              2957             MOVX    A,@DPTR
000039 F9              2958             MOV     R1,A
00003A 12000000   E    2959             LCALL   _?vPortFree
                       2960     ; }
                       2961                             ; SOURCE LINE # 566
00003E 90000003        2962             MOV     DPTR,#03H
000042 02000000   E    2963             LJMP    ?C?ADDXBP
                       2964     ; END OF _?vQueueDelete
                       2965     
                       2966     ; /*-----------------------------------------------------------*/
                       2967     ; 
                       2968     ; #ifdef KEIL_AX11000
                       2969     ; /*
                       2970     ;  * Mark a queue as locked.  Locking a queue prevents an ISR from 
                       2971     ;  * accessing the queue event lists. 
                       2972     ;  */
                       2973     ; static void prvLockQueue( xQueueHandle pxQueue ) reentrant
                       2974     
------                 2975             RSEG  ?PR?_?prvLockQueue?QUEUE
000000                 2976     L?0077:
                       2977             USING   0
000000                 2978     L?0078:
000000 850083     E    2979             MOV     DPH,?C_XBP
000003 850082     E    2980             MOV     DPL,?C_XBP+01H
000006 A3              2981             INC     DPTR
000007 759300     E    2982             MOV     DPX,#?C?XDATASEG
00000A E0              2983             MOVX    A,@DPTR
00000B FB              2984             MOV     R3,A
00000C A3              2985             INC     DPTR
00000D E0              2986             MOVX    A,@DPTR
00000E FA              2987             MOV     R2,A
00000F A3              2988             INC     DPTR
000010 E0              2989             MOVX    A,@DPTR
000011 F9              2990             MOV     R1,A
000012                 2991     _?prvLockQueue:
                       2992             USING   0
                       2993                             ; SOURCE LINE # 574
000012 9000FFFD        2994             MOV     DPTR,#0FFFDH
000016 12000000   E    2995             LCALL   ?C?ADDXBP
00001A EB              2996             MOV     A,R3
00001B F0              2997             MOVX    @DPTR,A
00001C A3              2998             INC     DPTR
00001D EA              2999             MOV     A,R2
00001E F0              3000             MOVX    @DPTR,A
00001F A3              3001             INC     DPTR
000020 E9              3002             MOV     A,R1
000021 F0              3003             MOVX    @DPTR,A
                       3004     ; {
                       3005     ;       taskENTER_CRITICAL();
000022 A2AFC2AF        3006              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
000026 C0D0                     
                       3007     ;       ++( pxQueue->cRxLock );
                       3008                             ; SOURCE LINE # 577
000028 850083     E    3009             MOV     DPH,?C_XBP
00002B 850082     E    3010             MOV     DPL,?C_XBP+01H
00002E 759300     E    3011             MOV     DPX,#?C?XDATASEG
000031 E0              3012             MOVX    A,@DPTR
000032 FB              3013             MOV     R3,A
000033 A3              3014             INC     DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    48

000034 E0              3015             MOVX    A,@DPTR
000035 FA              3016             MOV     R2,A
000036 A3              3017             INC     DPTR
000037 E0              3018             MOVX    A,@DPTR
000038 243F            3019             ADD     A,#03FH
00003A F9              3020             MOV     R1,A
00003B E4              3021             CLR     A
00003C 3A              3022             ADDC    A,R2
00003D FA              3023             MOV     R2,A
00003E 7401            3024             MOV     A,#01H
000040 12000000   E    3025             LCALL   ?C?CILDPTR
                       3026     ;       ++( pxQueue->cTxLock );
                       3027                             ; SOURCE LINE # 578
000044 850083     E    3028             MOV     DPH,?C_XBP
000047 850082     E    3029             MOV     DPL,?C_XBP+01H
00004A 759300     E    3030             MOV     DPX,#?C?XDATASEG
00004D E0              3031             MOVX    A,@DPTR
00004E FB              3032             MOV     R3,A
00004F A3              3033             INC     DPTR
000050 E0              3034             MOVX    A,@DPTR
000051 FA              3035             MOV     R2,A
000052 A3              3036             INC     DPTR
000053 E0              3037             MOVX    A,@DPTR
000054 2440            3038             ADD     A,#040H
000056 F9              3039             MOV     R1,A
000057 E4              3040             CLR     A
000058 3A              3041             ADDC    A,R2
000059 FA              3042             MOV     R2,A
00005A 7401            3043             MOV     A,#01H
00005C 12000000   E    3044             LCALL   ?C?CILDPTR
                       3045     ;       taskEXIT_CRITICAL();    
000060 D0D092AF        3046              DB 0D0H, 0D0H, 092H, 0AFH;     
                       3047     ; }
                       3048                             ; SOURCE LINE # 580
000064 90000003        3049             MOV     DPTR,#03H
000068 02000000   E    3050             LJMP    ?C?ADDXBP
                       3051     ; END OF _?prvLockQueue
                       3052     
                       3053     ; #endif
                       3054     ; /*-----------------------------------------------------------*/
                       3055     ; 
                       3056     ; static signed portCHAR prvUnlockQueue( xQueueHandle pxQueue ) reentrant
                       3057     
------                 3058             RSEG  ?PR?_?prvUnlockQueue?QUEUE
000000                 3059     L?0079:
                       3060             USING   0
000000                 3061     L?0080:
000000 850083     E    3062             MOV     DPH,?C_XBP
000003 850082     E    3063             MOV     DPL,?C_XBP+01H
000006 A3              3064             INC     DPTR
000007 759300     E    3065             MOV     DPX,#?C?XDATASEG
00000A E0              3066             MOVX    A,@DPTR
00000B FB              3067             MOV     R3,A
00000C A3              3068             INC     DPTR
00000D E0              3069             MOVX    A,@DPTR
00000E FA              3070             MOV     R2,A
00000F A3              3071             INC     DPTR
000010 E0              3072             MOVX    A,@DPTR
000011 F9              3073             MOV     R1,A
000012                 3074     _?prvUnlockQueue:
                       3075             USING   0
                       3076                             ; SOURCE LINE # 584
000012 9000FFFD        3077             MOV     DPTR,#0FFFDH
000016 12000000   E    3078             LCALL   ?C?ADDXBP
00001A EB              3079             MOV     A,R3
00001B F0              3080             MOVX    @DPTR,A
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    49

00001C A3              3081             INC     DPTR
00001D EA              3082             MOV     A,R2
00001E F0              3083             MOVX    @DPTR,A
00001F A3              3084             INC     DPTR
000020 E9              3085             MOV     A,R1
000021 F0              3086             MOVX    @DPTR,A
000022 9000FFFF        3087             MOV     DPTR,#0FFFFH
000026 12000000   E    3088             LCALL   ?C?ADDXBP
                       3089     ; {
                       3090     ; signed portCHAR cYieldRequired = ( signed portCHAR ) pdFALSE;
                       3091                             ; SOURCE LINE # 586
00002A 850083     E    3092             MOV     DPH,?C_XBP
00002D 850082     E    3093             MOV     DPL,?C_XBP+01H
000030 759300     E    3094             MOV     DPX,#?C?XDATASEG
000033 E4              3095             CLR     A
000034 F0              3096             MOVX    @DPTR,A
000035 A2AFC2AF        3097              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
000039 C0D0                     
                       3098     ; 
                       3099     ;       /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
                       3100     ; 
                       3101     ;       /* The lock counts contains the number of extra data items placed or 
                       3102     ;       removed from the queue while the queue was locked.  When a queue is
                       3103     ;       locked items can be added or removed, but the event lists cannot be
                       3104     ;       updated. */
                       3105     ;       taskENTER_CRITICAL();
                       3106     ;       {
                       3107                             ; SOURCE LINE # 595
                       3108     ;               --( pxQueue->cTxLock );
                       3109                             ; SOURCE LINE # 596
00003B 850083     E    3110             MOV     DPH,?C_XBP
00003E 850082     E    3111             MOV     DPL,?C_XBP+01H
000041 A3              3112             INC     DPTR
000042 759300     E    3113             MOV     DPX,#?C?XDATASEG
000045 E0              3114             MOVX    A,@DPTR
000046 FB              3115             MOV     R3,A
000047 A3              3116             INC     DPTR
000048 E0              3117             MOVX    A,@DPTR
000049 FA              3118             MOV     R2,A
00004A A3              3119             INC     DPTR
00004B E0              3120             MOVX    A,@DPTR
00004C 2440            3121             ADD     A,#040H
00004E F9              3122             MOV     R1,A
00004F E4              3123             CLR     A
000050 3A              3124             ADDC    A,R2
000051 FA              3125             MOV     R2,A
000052 74FF            3126             MOV     A,#0FFH
000054 12000000   E    3127             LCALL   ?C?CILDPTR
                       3128     ; 
                       3129     ;               /* See if data was added to the queue while it was locked. */
                       3130     ;               if( pxQueue->cTxLock > queueUNLOCKED )
                       3131                             ; SOURCE LINE # 599
000058 12000000   E    3132             LCALL   ?C?CLDPTR
00005C D3              3133             SETB    C
00005D 6480            3134             XRL     A,#080H
00005F 947F            3135             SUBB    A,#07FH
000061 406A            3136             JC      ?C0050
                       3137     ;               {
                       3138                             ; SOURCE LINE # 600
                       3139     ;                       pxQueue->cTxLock = queueUNLOCKED;
                       3140                             ; SOURCE LINE # 601
000063 850083     E    3141             MOV     DPH,?C_XBP
000066 850082     E    3142             MOV     DPL,?C_XBP+01H
000069 A3              3143             INC     DPTR
00006A 759300     E    3144             MOV     DPX,#?C?XDATASEG
00006D E0              3145             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    50

00006E FB              3146             MOV     R3,A
00006F A3              3147             INC     DPTR
000070 E0              3148             MOVX    A,@DPTR
000071 FA              3149             MOV     R2,A
000072 A3              3150             INC     DPTR
000073 E0              3151             MOVX    A,@DPTR
000074 2440            3152             ADD     A,#040H
000076 F9              3153             MOV     R1,A
000077 E4              3154             CLR     A
000078 3A              3155             ADDC    A,R2
000079 FA              3156             MOV     R2,A
00007A 74FF            3157             MOV     A,#0FFH
00007C 12000000   E    3158             LCALL   ?C?CSTPTR
                       3159     ; 
                       3160     ;                       /* Data was posted while the queue was locked.  Are any tasks
                       3161     ;                       blocked waiting for data to become available? */
                       3162     ;                       if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
                       3163                             ; SOURCE LINE # 605
000080 850083     E    3164             MOV     DPH,?C_XBP
000083 850082     E    3165             MOV     DPL,?C_XBP+01H
000086 A3              3166             INC     DPTR
000087 759300     E    3167             MOV     DPX,#?C?XDATASEG
00008A E0              3168             MOVX    A,@DPTR
00008B FB              3169             MOV     R3,A
00008C A3              3170             INC     DPTR
00008D E0              3171             MOVX    A,@DPTR
00008E FA              3172             MOV     R2,A
00008F A3              3173             INC     DPTR
000090 E0              3174             MOVX    A,@DPTR
000091 2424            3175             ADD     A,#024H
000093 F9              3176             MOV     R1,A
000094 E4              3177             CLR     A
000095 3A              3178             ADDC    A,R2
000096 FA              3179             MOV     R2,A
000097 12000000   E    3180             LCALL   ?C?ILDPTR
00009B 45F0            3181             ORL     A,B
00009D C3              3182             CLR     C
00009E 7001            3183             JNZ     ?C0052
0000A0 D3              3184             SETB    C
0000A1                 3185     ?C0052:
0000A1                 3186     ?C0053:
0000A1 402A            3187             JC      ?C0050
                       3188     ;                       {
                       3189                             ; SOURCE LINE # 606
                       3190     ;                               /* Tasks that are removed from the event list will get a
                               dded to
                       3191     ;                               the pending ready list as the scheduler is still suspend
                               ed. */
                       3192     ;                               if( cTaskRemoveFromEventList( &( pxQueue->xTasksWaitingT
                               oReceive ) ) != ( signed portCHAR ) pdFALSE )
                       3193                             ; SOURCE LINE # 609
0000A3 850083     E    3194             MOV     DPH,?C_XBP
0000A6 850082     E    3195             MOV     DPL,?C_XBP+01H
0000A9 A3              3196             INC     DPTR
0000AA 759300     E    3197             MOV     DPX,#?C?XDATASEG
0000AD E0              3198             MOVX    A,@DPTR
0000AE FB              3199             MOV     R3,A
0000AF A3              3200             INC     DPTR
0000B0 E0              3201             MOVX    A,@DPTR
0000B1 FA              3202             MOV     R2,A
0000B2 A3              3203             INC     DPTR
0000B3 E0              3204             MOVX    A,@DPTR
0000B4 2424            3205             ADD     A,#024H
0000B6 F9              3206             MOV     R1,A
0000B7 E4              3207             CLR     A
0000B8 3A              3208             ADDC    A,R2
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    51

0000B9 FA              3209             MOV     R2,A
0000BA 12000000   E    3210             LCALL   _?cTaskRemoveFromEventList
0000BE EF              3211             MOV     A,R7
0000BF 600C            3212             JZ      ?C0050
                       3213     ;                               {
                       3214                             ; SOURCE LINE # 610
                       3215     ;                                       /* The task waiting has a higher priority so rec
                               ord that a 
                       3216     ;                                       context switch is required. */
                       3217     ;                                       cYieldRequired = ( signed portCHAR ) pdTRUE;
                       3218                             ; SOURCE LINE # 613
0000C1 850083     E    3219             MOV     DPH,?C_XBP
0000C4 850082     E    3220             MOV     DPL,?C_XBP+01H
0000C7 759300     E    3221             MOV     DPX,#?C?XDATASEG
0000CA 7401            3222             MOV     A,#01H
0000CC F0              3223             MOVX    @DPTR,A
                       3224     ;                               }
                       3225                             ; SOURCE LINE # 614
                       3226     ;                       }                       
                       3227                             ; SOURCE LINE # 615
                       3228     ;               }
                       3229                             ; SOURCE LINE # 616
0000CD                 3230     ?C0050:
                       3231     ;       }
                       3232                             ; SOURCE LINE # 617
                       3233     ;       taskEXIT_CRITICAL();
0000CD D0D092AF        3234              DB 0D0H, 0D0H, 092H, 0AFH;
                       3235     ; 
                       3236     ;       /* Do the same for the Rx lock. */
                       3237     ;       taskENTER_CRITICAL();
0000D1 A2AFC2AF        3238              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
0000D5 C0D0                     
                       3239     ;       {
                       3240                             ; SOURCE LINE # 622
                       3241     ;               --( pxQueue->cRxLock );
                       3242                             ; SOURCE LINE # 623
0000D7 850083     E    3243             MOV     DPH,?C_XBP
0000DA 850082     E    3244             MOV     DPL,?C_XBP+01H
0000DD A3              3245             INC     DPTR
0000DE 759300     E    3246             MOV     DPX,#?C?XDATASEG
0000E1 E0              3247             MOVX    A,@DPTR
0000E2 FB              3248             MOV     R3,A
0000E3 A3              3249             INC     DPTR
0000E4 E0              3250             MOVX    A,@DPTR
0000E5 FA              3251             MOV     R2,A
0000E6 A3              3252             INC     DPTR
0000E7 E0              3253             MOVX    A,@DPTR
0000E8 243F            3254             ADD     A,#03FH
0000EA F9              3255             MOV     R1,A
0000EB E4              3256             CLR     A
0000EC 3A              3257             ADDC    A,R2
0000ED FA              3258             MOV     R2,A
0000EE 74FF            3259             MOV     A,#0FFH
0000F0 12000000   E    3260             LCALL   ?C?CILDPTR
                       3261     ; 
                       3262     ;               if( pxQueue->cRxLock > queueUNLOCKED )
                       3263                             ; SOURCE LINE # 625
0000F4 12000000   E    3264             LCALL   ?C?CLDPTR
0000F8 D3              3265             SETB    C
0000F9 6480            3266             XRL     A,#080H
0000FB 947F            3267             SUBB    A,#07FH
0000FD 406A            3268             JC      ?C0055
                       3269     ;               {
                       3270                             ; SOURCE LINE # 626
                       3271     ;                       pxQueue->cRxLock = queueUNLOCKED;
                       3272                             ; SOURCE LINE # 627
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    52

0000FF 850083     E    3273             MOV     DPH,?C_XBP
000102 850082     E    3274             MOV     DPL,?C_XBP+01H
000105 A3              3275             INC     DPTR
000106 759300     E    3276             MOV     DPX,#?C?XDATASEG
000109 E0              3277             MOVX    A,@DPTR
00010A FB              3278             MOV     R3,A
00010B A3              3279             INC     DPTR
00010C E0              3280             MOVX    A,@DPTR
00010D FA              3281             MOV     R2,A
00010E A3              3282             INC     DPTR
00010F E0              3283             MOVX    A,@DPTR
000110 243F            3284             ADD     A,#03FH
000112 F9              3285             MOV     R1,A
000113 E4              3286             CLR     A
000114 3A              3287             ADDC    A,R2
000115 FA              3288             MOV     R2,A
000116 74FF            3289             MOV     A,#0FFH
000118 12000000   E    3290             LCALL   ?C?CSTPTR
                       3291     ; 
                       3292     ;                       if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
                       3293                             ; SOURCE LINE # 629
00011C 850083     E    3294             MOV     DPH,?C_XBP
00011F 850082     E    3295             MOV     DPL,?C_XBP+01H
000122 A3              3296             INC     DPTR
000123 759300     E    3297             MOV     DPX,#?C?XDATASEG
000126 E0              3298             MOVX    A,@DPTR
000127 FB              3299             MOV     R3,A
000128 A3              3300             INC     DPTR
000129 E0              3301             MOVX    A,@DPTR
00012A FA              3302             MOV     R2,A
00012B A3              3303             INC     DPTR
00012C E0              3304             MOVX    A,@DPTR
00012D 240C            3305             ADD     A,#0CH
00012F F9              3306             MOV     R1,A
000130 E4              3307             CLR     A
000131 3A              3308             ADDC    A,R2
000132 FA              3309             MOV     R2,A
000133 12000000   E    3310             LCALL   ?C?ILDPTR
000137 45F0            3311             ORL     A,B
000139 C3              3312             CLR     C
00013A 7001            3313             JNZ     ?C0057
00013C D3              3314             SETB    C
00013D                 3315     ?C0057:
00013D                 3316     ?C0058:
00013D 402A            3317             JC      ?C0055
                       3318     ;                       {
                       3319                             ; SOURCE LINE # 630
                       3320     ;                               if( cTaskRemoveFromEventList( &( pxQueue->xTasksWaitingT
                               oSend ) ) != ( signed portCHAR ) pdFALSE )
                       3321                             ; SOURCE LINE # 631
00013F 850083     E    3322             MOV     DPH,?C_XBP
000142 850082     E    3323             MOV     DPL,?C_XBP+01H
000145 A3              3324             INC     DPTR
000146 759300     E    3325             MOV     DPX,#?C?XDATASEG
000149 E0              3326             MOVX    A,@DPTR
00014A FB              3327             MOV     R3,A
00014B A3              3328             INC     DPTR
00014C E0              3329             MOVX    A,@DPTR
00014D FA              3330             MOV     R2,A
00014E A3              3331             INC     DPTR
00014F E0              3332             MOVX    A,@DPTR
000150 240C            3333             ADD     A,#0CH
000152 F9              3334             MOV     R1,A
000153 E4              3335             CLR     A
000154 3A              3336             ADDC    A,R2
000155 FA              3337             MOV     R2,A
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    53

000156 12000000   E    3338             LCALL   _?cTaskRemoveFromEventList
00015A EF              3339             MOV     A,R7
00015B 600C            3340             JZ      ?C0055
                       3341     ;                               {
                       3342                             ; SOURCE LINE # 632
                       3343     ;                                       cYieldRequired = ( signed portCHAR ) pdTRUE;
                       3344                             ; SOURCE LINE # 633
00015D 850083     E    3345             MOV     DPH,?C_XBP
000160 850082     E    3346             MOV     DPL,?C_XBP+01H
000163 759300     E    3347             MOV     DPX,#?C?XDATASEG
000166 7401            3348             MOV     A,#01H
000168 F0              3349             MOVX    @DPTR,A
                       3350     ;                               }
                       3351                             ; SOURCE LINE # 634
                       3352     ;                       }                       
                       3353                             ; SOURCE LINE # 635
                       3354     ;               }
                       3355                             ; SOURCE LINE # 636
000169                 3356     ?C0055:
                       3357     ;       }
                       3358                             ; SOURCE LINE # 637
                       3359     ;       taskEXIT_CRITICAL();
000169 D0D092AF        3360              DB 0D0H, 0D0H, 092H, 0AFH;
                       3361     ; 
                       3362     ;       return cYieldRequired;
                       3363                             ; SOURCE LINE # 640
00016D 850083     E    3364             MOV     DPH,?C_XBP
000170 850082     E    3365             MOV     DPL,?C_XBP+01H
000173 759300     E    3366             MOV     DPX,#?C?XDATASEG
000176 E0              3367             MOVX    A,@DPTR
000177 FF              3368             MOV     R7,A
                       3369     ; }
                       3370                             ; SOURCE LINE # 641
000178                 3371     ?C0060:
000178 90000004        3372             MOV     DPTR,#04H
00017C 02000000   E    3373             LJMP    ?C?ADDXBP
                       3374     ; END OF _?prvUnlockQueue
                       3375     
                       3376     ; /*-----------------------------------------------------------*/
                       3377     ; 
                       3378     ; static signed portCHAR prvIsQueueEmpty( const xQueueHandle pxQueue ) reentrant
                       3379     
------                 3380             RSEG  ?PR?_?prvIsQueueEmpty?QUEUE
000000                 3381     _?prvIsQueueEmpty:
                       3382             USING   0
                       3383                             ; SOURCE LINE # 644
000000 9000FFFD        3384             MOV     DPTR,#0FFFDH
000004 12000000   E    3385             LCALL   ?C?ADDXBP
000008 EB              3386             MOV     A,R3
000009 F0              3387             MOVX    @DPTR,A
00000A A3              3388             INC     DPTR
00000B EA              3389             MOV     A,R2
00000C F0              3390             MOVX    @DPTR,A
00000D A3              3391             INC     DPTR
00000E E9              3392             MOV     A,R1
00000F F0              3393             MOVX    @DPTR,A
000010 9000FFFF        3394             MOV     DPTR,#0FFFFH
000014 12000000   E    3395             LCALL   ?C?ADDXBP
                       3396     ; {
                       3397     ; signed portCHAR cReturn;
000018 A2AFC2AF        3398              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
00001C C0D0                     
                       3399     ; 
                       3400     ;       taskENTER_CRITICAL();
                       3401     ;               cReturn = ( pxQueue->ucMessagesWaiting == ( unsigned portCHAR ) 0 );
                       3402                             ; SOURCE LINE # 649
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    54

00001E 850083     E    3403             MOV     DPH,?C_XBP
000021 850082     E    3404             MOV     DPL,?C_XBP+01H
000024 A3              3405             INC     DPTR
000025 759300     E    3406             MOV     DPX,#?C?XDATASEG
000028 E0              3407             MOVX    A,@DPTR
000029 FB              3408             MOV     R3,A
00002A A3              3409             INC     DPTR
00002B E0              3410             MOVX    A,@DPTR
00002C FA              3411             MOV     R2,A
00002D A3              3412             INC     DPTR
00002E E0              3413             MOVX    A,@DPTR
00002F 243C            3414             ADD     A,#03CH
000031 F9              3415             MOV     R1,A
000032 E4              3416             CLR     A
000033 3A              3417             ADDC    A,R2
000034 FA              3418             MOV     R2,A
000035 12000000   E    3419             LCALL   ?C?CLDPTR
000039 7F00            3420             MOV     R7,#00H
00003B 7002            3421             JNZ     ?C0061
00003D 7F01            3422             MOV     R7,#01H
00003F                 3423     ?C0061:
00003F                 3424     ?C0062:
00003F 850083     E    3425             MOV     DPH,?C_XBP
000042 850082     E    3426             MOV     DPL,?C_XBP+01H
000045 759300     E    3427             MOV     DPX,#?C?XDATASEG
000048 EF              3428             MOV     A,R7
000049 F0              3429             MOVX    @DPTR,A
                       3430     ;       taskEXIT_CRITICAL();
00004A D0D092AF        3431              DB 0D0H, 0D0H, 092H, 0AFH;
                       3432     ; 
                       3433     ;       return cReturn;
                       3434                             ; SOURCE LINE # 652
00004E 850083     E    3435             MOV     DPH,?C_XBP
000051 850082     E    3436             MOV     DPL,?C_XBP+01H
000054 759300     E    3437             MOV     DPX,#?C?XDATASEG
000057 E0              3438             MOVX    A,@DPTR
000058 FF              3439             MOV     R7,A
                       3440     ; }
                       3441                             ; SOURCE LINE # 653
000059                 3442     ?C0063:
000059 90000004        3443             MOV     DPTR,#04H
00005D 02000000   E    3444             LJMP    ?C?ADDXBP
                       3445     ; END OF _?prvIsQueueEmpty
                       3446     
                       3447     ; /*-----------------------------------------------------------*/
                       3448     ; 
                       3449     ; static signed portCHAR prvIsQueueFull( const xQueueHandle pxQueue ) reentrant
                       3450     
------                 3451             RSEG  ?PR?_?prvIsQueueFull?QUEUE
000000                 3452     _?prvIsQueueFull:
                       3453             USING   0
                       3454                             ; SOURCE LINE # 656
000000 9000FFFD        3455             MOV     DPTR,#0FFFDH
000004 12000000   E    3456             LCALL   ?C?ADDXBP
000008 EB              3457             MOV     A,R3
000009 F0              3458             MOVX    @DPTR,A
00000A A3              3459             INC     DPTR
00000B EA              3460             MOV     A,R2
00000C F0              3461             MOVX    @DPTR,A
00000D A3              3462             INC     DPTR
00000E E9              3463             MOV     A,R1
00000F F0              3464             MOVX    @DPTR,A
000010 9000FFFF        3465             MOV     DPTR,#0FFFFH
000014 12000000   E    3466             LCALL   ?C?ADDXBP
                       3467     ; {
                       3468     ; signed portCHAR cReturn;
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    55

000018 A2AFC2AF        3469              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
00001C C0D0                     
                       3470     ; 
                       3471     ;       taskENTER_CRITICAL();
                       3472     ;               cReturn = ( pxQueue->ucMessagesWaiting == pxQueue->ucLength );
                       3473                             ; SOURCE LINE # 661
00001E 850083     E    3474             MOV     DPH,?C_XBP
000021 850082     E    3475             MOV     DPL,?C_XBP+01H
000024 A3              3476             INC     DPTR
000025 759300     E    3477             MOV     DPX,#?C?XDATASEG
000028 E0              3478             MOVX    A,@DPTR
000029 FB              3479             MOV     R3,A
00002A A3              3480             INC     DPTR
00002B E0              3481             MOVX    A,@DPTR
00002C FA              3482             MOV     R2,A
00002D A3              3483             INC     DPTR
00002E E0              3484             MOVX    A,@DPTR
00002F 243D            3485             ADD     A,#03DH
000031 F9              3486             MOV     R1,A
000032 E4              3487             CLR     A
000033 3A              3488             ADDC    A,R2
000034 FA              3489             MOV     R2,A
000035 12000000   E    3490             LCALL   ?C?CLDPTR
000039 FF              3491             MOV     R7,A
00003A 850083     E    3492             MOV     DPH,?C_XBP
00003D 850082     E    3493             MOV     DPL,?C_XBP+01H
000040 A3              3494             INC     DPTR
000041 759300     E    3495             MOV     DPX,#?C?XDATASEG
000044 E0              3496             MOVX    A,@DPTR
000045 FB              3497             MOV     R3,A
000046 A3              3498             INC     DPTR
000047 E0              3499             MOVX    A,@DPTR
000048 FA              3500             MOV     R2,A
000049 A3              3501             INC     DPTR
00004A E0              3502             MOVX    A,@DPTR
00004B 243C            3503             ADD     A,#03CH
00004D F9              3504             MOV     R1,A
00004E E4              3505             CLR     A
00004F 3A              3506             ADDC    A,R2
000050 FA              3507             MOV     R2,A
000051 12000000   E    3508             LCALL   ?C?CLDPTR
000055 B50704          3509             CJNE    A,AR7,?C0064
000058 7F01            3510             MOV     R7,#01H
00005A 8002            3511             SJMP    ?C0065
00005C                 3512     ?C0064:
00005C 7F00            3513             MOV     R7,#00H
00005E                 3514     ?C0065:
00005E 850083     E    3515             MOV     DPH,?C_XBP
000061 850082     E    3516             MOV     DPL,?C_XBP+01H
000064 759300     E    3517             MOV     DPX,#?C?XDATASEG
000067 EF              3518             MOV     A,R7
000068 F0              3519             MOVX    @DPTR,A
                       3520     ;       taskEXIT_CRITICAL();
000069 D0D092AF        3521              DB 0D0H, 0D0H, 092H, 0AFH;
                       3522     ; 
                       3523     ;       return cReturn;
                       3524                             ; SOURCE LINE # 664
00006D 850083     E    3525             MOV     DPH,?C_XBP
000070 850082     E    3526             MOV     DPL,?C_XBP+01H
000073 759300     E    3527             MOV     DPX,#?C?XDATASEG
000076 E0              3528             MOVX    A,@DPTR
000077 FF              3529             MOV     R7,A
                       3530     ; }
                       3531                             ; SOURCE LINE # 665
000078                 3532     ?C0066:
000078 90000004        3533             MOV     DPTR,#04H
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    56

00007C 02000000   E    3534             LJMP    ?C?ADDXBP
                       3535     ; END OF _?prvIsQueueFull
                       3536     
                       3537             END
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    57

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E     ATTRIBUTES

?C0001. . . . . . . . . . . . . . . . .    EC ADDR  02ABH     R   SEG=?PR?_?XQUEUECREATE?QUEUE
?C0003. . . . . . . . . . . . . . . . .    EC ADDR  0296H     R   SEG=?PR?_?XQUEUECREATE?QUEUE
?C0004. . . . . . . . . . . . . . . . .    EC ADDR  02B1H     R   SEG=?PR?_?XQUEUECREATE?QUEUE
?C0006. . . . . . . . . . . . . . . . .    EC ADDR  00A7H     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0008. . . . . . . . . . . . . . . . .    EC ADDR  009BH     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0009. . . . . . . . . . . . . . . . .    EC ADDR  024DH     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0010. . . . . . . . . . . . . . . . .    EC ADDR  0228H     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0011. . . . . . . . . . . . . . . . .    EC ADDR  0259H     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0012. . . . . . . . . . . . . . . . .    EC ADDR  0271H     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0014. . . . . . . . . . . . . . . . .    EC ADDR  0275H     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0015. . . . . . . . . . . . . . . . .    EC ADDR  0280H     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0016. . . . . . . . . . . . . . . . .    EC ADDR  0207H     R   SEG=?PR?_?CQUEUESENDFROMISR?QUEUE
?C0017. . . . . . . . . . . . . . . . .    EC ADDR  0180H     R   SEG=?PR?_?CQUEUESENDFROMISR?QUEUE
?C0018. . . . . . . . . . . . . . . . .    EC ADDR  01EBH     R   SEG=?PR?_?CQUEUESENDFROMISR?QUEUE
?C0021. . . . . . . . . . . . . . . . .    EC ADDR  01C8H     R   SEG=?PR?_?CQUEUESENDFROMISR?QUEUE
?C0022. . . . . . . . . . . . . . . . .    EC ADDR  01C8H     R   SEG=?PR?_?CQUEUESENDFROMISR?QUEUE
?C0024. . . . . . . . . . . . . . . . .    EC ADDR  0211H     R   SEG=?PR?_?CQUEUESENDFROMISR?QUEUE
?C0026. . . . . . . . . . . . . . . . .    EC ADDR  00A7H     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0028. . . . . . . . . . . . . . . . .    EC ADDR  009BH     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0029. . . . . . . . . . . . . . . . .    EC ADDR  0236H     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0030. . . . . . . . . . . . . . . . .    EC ADDR  0191H     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0031. . . . . . . . . . . . . . . . .    EC ADDR  0241H     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0032. . . . . . . . . . . . . . . . .    EC ADDR  0259H     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0034. . . . . . . . . . . . . . . . .    EC ADDR  025DH     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0035. . . . . . . . . . . . . . . . .    EC ADDR  0268H     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0036. . . . . . . . . . . . . . . . .    EC ADDR  022EH     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C0037. . . . . . . . . . . . . . . . .    EC ADDR  00FCH     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C0038. . . . . . . . . . . . . . . . .    EC ADDR  0203H     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C0041. . . . . . . . . . . . . . . . .    EC ADDR  01CBH     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C0042. . . . . . . . . . . . . . . . .    EC ADDR  01CBH     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C0044. . . . . . . . . . . . . . . . .    EC ADDR  0220H     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C0045. . . . . . . . . . . . . . . . .    EC ADDR  0239H     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C0046. . . . . . . . . . . . . . . . .    EC ADDR  0244H     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C0047. . . . . . . . . . . . . . . . .    EC ADDR  0052H     R   SEG=?PR?_?UCQUEUEMESSAGESWAITING?QUEUE
?C0050. . . . . . . . . . . . . . . . .    EC ADDR  00CDH     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
?C0052. . . . . . . . . . . . . . . . .    EC ADDR  00A1H     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
?C0053. . . . . . . . . . . . . . . . .    EC ADDR  00A1H     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
?C0055. . . . . . . . . . . . . . . . .    EC ADDR  0169H     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
?C0057. . . . . . . . . . . . . . . . .    EC ADDR  013DH     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
?C0058. . . . . . . . . . . . . . . . .    EC ADDR  013DH     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
?C0060. . . . . . . . . . . . . . . . .    EC ADDR  0178H     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
?C0061. . . . . . . . . . . . . . . . .    EC ADDR  003FH     R   SEG=?PR?_?PRVISQUEUEEMPTY?QUEUE
?C0062. . . . . . . . . . . . . . . . .    EC ADDR  003FH     R   SEG=?PR?_?PRVISQUEUEEMPTY?QUEUE
?C0063. . . . . . . . . . . . . . . . .    EC ADDR  0059H     R   SEG=?PR?_?PRVISQUEUEEMPTY?QUEUE
?C0064. . . . . . . . . . . . . . . . .    EC ADDR  005CH     R   SEG=?PR?_?PRVISQUEUEFULL?QUEUE
?C0065. . . . . . . . . . . . . . . . .    EC ADDR  005EH     R   SEG=?PR?_?PRVISQUEUEFULL?QUEUE
?C0066. . . . . . . . . . . . . . . . .    EC ADDR  0078H     R   SEG=?PR?_?PRVISQUEUEFULL?QUEUE
?C0069. . . . . . . . . . . . . . . . .    EC ADDR  019FH     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0070. . . . . . . . . . . . . . . . .    EC ADDR  01EFH     R   SEG=?PR?_?CQUEUESEND?QUEUE
?C0071. . . . . . . . . . . . . . . . .    EC ADDR  00FBH     R   SEG=?PR?_?CQUEUESENDFROMISR?QUEUE
?C0072. . . . . . . . . . . . . . . . .    EC ADDR  0149H     R   SEG=?PR?_?CQUEUESENDFROMISR?QUEUE
?C0073. . . . . . . . . . . . . . . . .    EC ADDR  0108H     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0074. . . . . . . . . . . . . . . . .    EC ADDR  0158H     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
?C0075. . . . . . . . . . . . . . . . .    EC ADDR  0073H     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C0076. . . . . . . . . . . . . . . . .    EC ADDR  00C3H     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
?C?ADDXBP . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?CILDPTR. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?CLDPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?COPY . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?CSTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    58

?C?IILDPTR. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ILDPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?IMUL . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?PLDPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?PSTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ULCMP. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XBPOFF . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XDATASEG . . . . . . . . . . . . . .    N  NUMB  -------       EXT
?C_XBP. . . . . . . . . . . . . . . . .    D  ADDR  -------       EXT
?PR?_?CQUEUERECEIVE?QUEUE . . . . . . .    EC SEG   000270H       REL=INSEG, ALN=BYTE
?PR?_?CQUEUERECEIVEFROMISR?QUEUE. . . .    EC SEG   00024CH       REL=INSEG, ALN=BYTE
?PR?_?CQUEUESEND?QUEUE. . . . . . . . .    EC SEG   000288H       REL=INSEG, ALN=BYTE
?PR?_?CQUEUESENDFROMISR?QUEUE . . . . .    EC SEG   000219H       REL=INSEG, ALN=BYTE
?PR?_?PRVISQUEUEEMPTY?QUEUE . . . . . .    EC SEG   000061H       REL=INSEG, ALN=BYTE
?PR?_?PRVISQUEUEFULL?QUEUE. . . . . . .    EC SEG   000080H       REL=INSEG, ALN=BYTE
?PR?_?PRVLOCKQUEUE?QUEUE. . . . . . . .    EC SEG   00006CH       REL=INSEG, ALN=BYTE
?PR?_?PRVUNLOCKQUEUE?QUEUE. . . . . . .    EC SEG   000180H       REL=INSEG, ALN=BYTE
?PR?_?UCQUEUEMESSAGESWAITING?QUEUE. . .    EC SEG   00005AH       REL=INSEG, ALN=BYTE
?PR?_?VQUEUEDELETE?QUEUE. . . . . . . .    EC SEG   000046H       REL=INSEG, ALN=BYTE
?PR?_?XQUEUECREATE?QUEUE. . . . . . . .    EC SEG   0002B9H       REL=INSEG, ALN=BYTE
_?CQUEUERECEIVE . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?CQUEUERECEIVE?QUEUE
_?CQUEUERECEIVEFROMISR. . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?CQUEUERECEIVEFROMISR?QUEUE
_?CQUEUESEND. . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?CQUEUESEND?QUEUE
_?CQUEUESENDFROMISR . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?CQUEUESENDFROMISR?QUEUE
_?CTASKREMOVEFROMEVENTLIST. . . . . . .    C  ADDR  -------       EXT
_?CTASKRESUMEALL. . . . . . . . . . . .    C  ADDR  -------       EXT
_?PRVISQUEUEEMPTY . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVISQUEUEEMPTY?QUEUE
_?PRVISQUEUEFULL. . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVISQUEUEFULL?QUEUE
_?PRVLOCKQUEUE. . . . . . . . . . . . .    EC ADDR  0012H     R   SEG=?PR?_?PRVLOCKQUEUE?QUEUE
_?PRVUNLOCKQUEUE. . . . . . . . . . . .    EC ADDR  0012H     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
_?PVPORTMALLOC. . . . . . . . . . . . .    C  ADDR  -------       EXT
_?UCQUEUEMESSAGESWAITING. . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?UCQUEUEMESSAGESWAITING?QUEUE
_?VLISTINITIALISE . . . . . . . . . . .    C  ADDR  -------       EXT
_?VPORTFREE . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?VPORTYIELD. . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?VQUEUEDELETE. . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VQUEUEDELETE?QUEUE
_?VTASKPLACEONEVENTLIST . . . . . . . .    C  ADDR  -------       EXT
_?VTASKSUSPENDALL . . . . . . . . . . .    C  ADDR  -------       EXT
_?XQUEUECREATE. . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?XQUEUECREATE?QUEUE
AC. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.6   A   
ACC . . . . . . . . . . . . . . . . . .    D  ADDR  00E0H     A   
ACON. . . . . . . . . . . . . . . . . .    D  ADDR  009DH     A   
AR1 . . . . . . . . . . . . . . . . . .    D  ADDR  0001H     A   
AR2 . . . . . . . . . . . . . . . . . .    D  ADDR  0002H     A   
AR3 . . . . . . . . . . . . . . . . . .    D  ADDR  0003H     A   
AR7 . . . . . . . . . . . . . . . . . .    D  ADDR  0007H     A   
ARCON . . . . . . . . . . . . . . . . .    D  ADDR  00FFH     A   
B . . . . . . . . . . . . . . . . . . .    D  ADDR  00F0H     A   
CANCIR. . . . . . . . . . . . . . . . .    D  ADDR  00DEH     A   
CANDR . . . . . . . . . . . . . . . . .    D  ADDR  00DFH     A   
CCAPH0. . . . . . . . . . . . . . . . .    D  ADDR  00B9H     A   
CCAPH1. . . . . . . . . . . . . . . . .    D  ADDR  00BAH     A   
CCAPH2. . . . . . . . . . . . . . . . .    D  ADDR  00BBH     A   
CCAPH3. . . . . . . . . . . . . . . . .    D  ADDR  00BCH     A   
CCAPH4. . . . . . . . . . . . . . . . .    D  ADDR  00BDH     A   
CCAPL0. . . . . . . . . . . . . . . . .    D  ADDR  00B1H     A   
CCAPL1. . . . . . . . . . . . . . . . .    D  ADDR  00B2H     A   
CCAPL2. . . . . . . . . . . . . . . . .    D  ADDR  00B3H     A   
CCAPL3. . . . . . . . . . . . . . . . .    D  ADDR  00B4H     A   
CCAPL4. . . . . . . . . . . . . . . . .    D  ADDR  00B5H     A   
CCAPM0. . . . . . . . . . . . . . . . .    D  ADDR  00D1H     A   
CCAPM1. . . . . . . . . . . . . . . . .    D  ADDR  00D2H     A   
CCAPM2. . . . . . . . . . . . . . . . .    D  ADDR  00D3H     A   
CCAPM3. . . . . . . . . . . . . . . . .    D  ADDR  00D4H     A   
CCAPM4. . . . . . . . . . . . . . . . .    D  ADDR  00D5H     A   
CCON. . . . . . . . . . . . . . . . . .    D  ADDR  00C3H     A   
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    59

CH. . . . . . . . . . . . . . . . . . .    D  ADDR  00C5H     A   
CKCON . . . . . . . . . . . . . . . . .    D  ADDR  008EH     A   
CL. . . . . . . . . . . . . . . . . . .    D  ADDR  00C4H     A   
CMOD. . . . . . . . . . . . . . . . . .    D  ADDR  00C2H     A   
CPRL2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CSREPR. . . . . . . . . . . . . . . . .    D  ADDR  008FH     A   
CT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CY. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.7   A   
DBAR. . . . . . . . . . . . . . . . . .    D  ADDR  009AH     A   
DCIR. . . . . . . . . . . . . . . . . .    D  ADDR  009BH     A   
DDR . . . . . . . . . . . . . . . . . .    D  ADDR  009CH     A   
DMAHR . . . . . . . . . . . . . . . . .    D  ADDR  00ADH     A   
DMALR . . . . . . . . . . . . . . . . .    D  ADDR  00ABH     A   
DMAMR . . . . . . . . . . . . . . . . .    D  ADDR  00ACH     A   
DPH . . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH0. . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH1. . . . . . . . . . . . . . . . . .    D  ADDR  0085H     A   
DPL . . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL0. . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL1. . . . . . . . . . . . . . . . . .    D  ADDR  0084H     A   
DPS . . . . . . . . . . . . . . . . . .    D  ADDR  0086H     A   
DPX . . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX0. . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX1. . . . . . . . . . . . . . . . . .    D  ADDR  0095H     A   
EA. . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.7   A   
EIE . . . . . . . . . . . . . . . . . .    D  ADDR  00E8H     A   
EIF . . . . . . . . . . . . . . . . . .    D  ADDR  0091H     A   
EINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.0   A   
EINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.1   A   
EINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.2   A   
EINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.3   A   
EINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.4   A   
EIP . . . . . . . . . . . . . . . . . .    D  ADDR  00F8H     A   
EPCR. . . . . . . . . . . . . . . . . .    D  ADDR  00BEH     A   
EPDR. . . . . . . . . . . . . . . . . .    D  ADDR  00BFH     A   
ES0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.4   A   
ES1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.6   A   
ET0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.1   A   
ET1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.3   A   
ET2 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.5   A   
EWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.5   A   
EWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.1   A   
EX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.0   A   
EX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.2   A   
EXEN2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.3   A   
EXF2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.6   A   
F0. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.5   A   
F1. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.1   A   
I2CCIR. . . . . . . . . . . . . . . . .    D  ADDR  0096H     A   
I2CDR . . . . . . . . . . . . . . . . .    D  ADDR  0097H     A   
IE. . . . . . . . . . . . . . . . . . .    D  ADDR  00A8H     A   
IE0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.1   A   
IE1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.3   A   
INT0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
INT1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
IP. . . . . . . . . . . . . . . . . . .    D  ADDR  00B8H     A   
IT0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.0   A   
IT1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.2   A   
L?0077. . . . . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVLOCKQUEUE?QUEUE
L?0078. . . . . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVLOCKQUEUE?QUEUE
L?0079. . . . . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
L?0080. . . . . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVUNLOCKQUEUE?QUEUE
LCR . . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LDAHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
LDALR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
LDCSR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    60

LDHR. . . . . . . . . . . . . . . . . .    D  ADDR  00AAH     A   
LDLR. . . . . . . . . . . . . . . . . .    D  ADDR  00A9H     A   
LMSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSAIER. . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSCR. . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LSR . . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
LSSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
MCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00B6H     A   
MD0 . . . . . . . . . . . . . . . . . .    D  ADDR  00F9H     A   
MD1 . . . . . . . . . . . . . . . . . .    D  ADDR  00FAH     A   
MD2 . . . . . . . . . . . . . . . . . .    D  ADDR  00FBH     A   
MD3 . . . . . . . . . . . . . . . . . .    D  ADDR  00FCH     A   
MD4 . . . . . . . . . . . . . . . . . .    D  ADDR  00FDH     A   
MD5 . . . . . . . . . . . . . . . . . .    D  ADDR  00FEH     A   
MDR . . . . . . . . . . . . . . . . . .    D  ADDR  00B7H     A   
MXAX. . . . . . . . . . . . . . . . . .    D  ADDR  00EAH     A   
OV. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.2   A   
OWCIR . . . . . . . . . . . . . . . . .    D  ADDR  00D6H     A   
OWDR. . . . . . . . . . . . . . . . . .    D  ADDR  00D7H     A   
P . . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.0   A   
P0. . . . . . . . . . . . . . . . . . .    D  ADDR  0080H     A   
P0_0. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
P0_1. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
P0_2. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
P0_3. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
P0_4. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
P0_5. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
P0_6. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
P0_7. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
P1. . . . . . . . . . . . . . . . . . .    D  ADDR  0090H     A   
P1_0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
P1_1. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
P1_2. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
P1_3. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.3   A   
P1_4. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.4   A   
P1_5. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.5   A   
P1_6. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.6   A   
P1_7. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.7   A   
P2. . . . . . . . . . . . . . . . . . .    D  ADDR  00A0H     A   
P2_0. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.0   A   
P2_1. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.1   A   
P2_2. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.2   A   
P2_3. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.3   A   
P2_4. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.4   A   
P2_5. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.5   A   
P2_6. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
P2_7. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.7   A   
P3. . . . . . . . . . . . . . . . . . .    D  ADDR  00B0H     A   
P3_0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
P3_1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
P3_2. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
P3_3. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
P3_4. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
P3_5. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
P3_6. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
P3_7. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
PCON. . . . . . . . . . . . . . . . . .    D  ADDR  0087H     A   
PINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.0   A   
PINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.1   A   
PINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.2   A   
PINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.3   A   
PINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.4   A   
PISSR1. . . . . . . . . . . . . . . . .    D  ADDR  009EH     A   
PISSR2. . . . . . . . . . . . . . . . .    D  ADDR  009FH     A   
PS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.4   A   
PS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.6   A   
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    61

PSW . . . . . . . . . . . . . . . . . .    D  ADDR  00D0H     A   
PT0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.1   A   
PT1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.3   A   
PT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.5   A   
PWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.5   A   
PX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.0   A   
PX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.2   A   
QUEUE . . . . . . . . . . . . . . . . .    -- ----  -------       
RB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.2   A   
RB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.2   A   
RCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.5   A   
RD. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
REN0. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.4   A   
REN1. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.4   A   
RI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.0   A   
RI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.0   A   
RLDH. . . . . . . . . . . . . . . . . .    D  ADDR  00CBH     A   
RLDL. . . . . . . . . . . . . . . . . .    D  ADDR  00CAH     A   
RS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.3   A   
RS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.4   A   
RWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.0   A   
RXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
SBUF0 . . . . . . . . . . . . . . . . .    D  ADDR  0099H     A   
SBUF1 . . . . . . . . . . . . . . . . .    D  ADDR  00C1H     A   
SCON0 . . . . . . . . . . . . . . . . .    D  ADDR  0098H     A   
SCON1 . . . . . . . . . . . . . . . . .    D  ADDR  00C0H     A   
SDSTSR. . . . . . . . . . . . . . . . .    D  ADDR  0094H     A   
SM00. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.7   A   
SM01. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.6   A   
SM02. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.5   A   
SM10. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.7   A   
SM11. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.6   A   
SM12. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.5   A   
SP. . . . . . . . . . . . . . . . . . .    D  ADDR  0081H     A   
SPICIR. . . . . . . . . . . . . . . . .    D  ADDR  00CEH     A   
SPIDR . . . . . . . . . . . . . . . . .    D  ADDR  00CFH     A   
STATUS. . . . . . . . . . . . . . . . .    D  ADDR  00E9H     A   
T0. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
T1. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
T2CON . . . . . . . . . . . . . . . . .    D  ADDR  00C8H     A   
T2IF. . . . . . . . . . . . . . . . . .    D  ADDR  00C9H     A   
TA. . . . . . . . . . . . . . . . . . .    D  ADDR  00EBH     A   
TB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.3   A   
TB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.3   A   
TCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00AEH     A   
TCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.4   A   
TCON. . . . . . . . . . . . . . . . . .    D  ADDR  0088H     A   
TDR . . . . . . . . . . . . . . . . . .    D  ADDR  00AFH     A   
TF0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.5   A   
TF1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.7   A   
TF2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.7   A   
TH0 . . . . . . . . . . . . . . . . . .    D  ADDR  008CH     A   
TH1 . . . . . . . . . . . . . . . . . .    D  ADDR  008DH     A   
TH2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CDH     A   
TI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.1   A   
TI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.1   A   
TL0 . . . . . . . . . . . . . . . . . .    D  ADDR  008AH     A   
TL1 . . . . . . . . . . . . . . . . . .    D  ADDR  008BH     A   
TL2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CCH     A   
TMOD. . . . . . . . . . . . . . . . . .    D  ADDR  0089H     A   
TR0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.4   A   
TR1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.6   A   
TR2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.2   A   
TXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
UR2_DLH . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_DLL . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
AX51 MACRO ASSEMBLER  QUEUE                                                                 03/13/13 09:32:27 PAGE    62

UR2_FCR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_IER . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_IIR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_LCR . . . . . . . . . . . . . . . .    D  ADDR  00E4H     A   
UR2_LSR . . . . . . . . . . . . . . . .    D  ADDR  00E6H     A   
UR2_MCR . . . . . . . . . . . . . . . .    D  ADDR  00E5H     A   
UR2_MSR . . . . . . . . . . . . . . . .    D  ADDR  00E7H     A   
UR2_RBR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
UR2_THR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
WDCON . . . . . . . . . . . . . . . . .    D  ADDR  00D8H     A   
WDIF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.3   A   
WR. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
WTRF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.2   A   
WTST. . . . . . . . . . . . . . . . . .    D  ADDR  0092H     A   
XMRHR . . . . . . . . . . . . . . . . .    D  ADDR  00A7H     A   
XMRLR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
XMWHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
XMWLR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).

C51 COMPILER V9.06   RD                                                                    03/29/2013 16:57:07 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE RD
OBJECT MODULE PLACED IN .\rd.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\bacnet\rd.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INC
                    -DIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;..\S
                    -RC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\buff
                    -er\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..\Sr
                    -c\FreeRTOSSource\include\;..\Src\schedule\;..\src\bacnet;..\src\include;..\src\LCD;..\src\version) DEFINE(KEIL_AX11000) 
                    -VARBANKING DEBUG PRINT(.\rd.lst) OBJECT(.\rd.obj)

line level    source

   1          /*####COPYRIGHTBEGIN####
   2           -------------------------------------------
   3           Copyright (C) 2005 Steve Karg
   4          
   5           This program is free software; you can redistribute it and/or
   6           modify it under the terms of the GNU General Public License
   7           as published by the Free Software Foundation; either version 2
   8           of the License, or (at your option) any later version.
   9          
  10           This program is distributed in the hope that it will be useful,
  11           but WITHOUT ANY WARRANTY; without even the implied warranty of
  12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13           GNU General Public License for more details.
  14          
  15           You should have received a copy of the GNU General Public License
  16           along with this program; if not, write to:
  17           The Free Software Foundation, Inc.
  18           59 Temple Place - Suite 330
  19           Boston, MA  02111-1307, USA.
  20          
  21           As a special exception, if other files instantiate templates or
  22           use macros or inline functions from this file, or you compile
  23           this file and link it with other works to produce a work based
  24           on this file, this file does not by itself cause the resulting
  25           work to be covered by the GNU General Public License. However
  26           the source code for this file must still be made available in
  27           accordance with section (3) of the GNU General Public License.
  28          
  29           This exception does not invalidate any other reasons why a work
  30           based on this file might be covered by the GNU General Public
  31           License.
  32           -------------------------------------------
  33          ####COPYRIGHTEND####*/
  34          #include <stdint.h>
  35          #include "../include/bacenum.h"
  36          #include "../include/bacdcode.h"
  37          #include "../include/bacdef.h"
  38          #include "../include/rd.h"
  39          
  40          /** @file rd.c  Encode/Decode Reinitialize Device APDUs */
  41          #if BACNET_SVC_RD_A
  42          /* encode service */
  43          int rd_encode_apdu(
  44              uint8_t * apdu,
  45              uint8_t invoke_id,
  46              BACNET_REINITIALIZED_STATE state,
  47              BACNET_CHARACTER_STRING * password)
  48          {
  49   1          int len = 0;        /* length of each encoding */
  50   1          int apdu_len = 0;   /* total length of the apdu, return value */
C51 COMPILER V9.06   RD                                                                    03/29/2013 16:57:07 PAGE 2   

  51   1      
  52   1          if (apdu) {
  53   2              apdu[0] = PDU_TYPE_CONFIRMED_SERVICE_REQUEST;
  54   2              apdu[1] = encode_max_segs_max_apdu(0, MAX_APDU);
  55   2              apdu[2] = invoke_id;
  56   2              apdu[3] = SERVICE_CONFIRMED_REINITIALIZE_DEVICE;
  57   2              apdu_len = 4;
  58   2              len = encode_context_enumerated(&apdu[apdu_len], 0, state);
  59   2              apdu_len += len;
  60   2              /* optional password */
  61   2              if (password) {
  62   3                  /* FIXME: must be at least 1 character, limited to 20 characters */
  63   3                  len =
  64   3                      encode_context_character_string(&apdu[apdu_len], 1, password);
  65   3                  apdu_len += len;
  66   3              }
  67   2          }
  68   1      
  69   1          return apdu_len;
  70   1      }
  71          #endif
  72          
  73          /* decode the service request only */
  74          int rd_decode_service_request(
  75              uint8_t * apdu,
  76              unsigned apdu_len,
  77              BACNET_REINITIALIZED_STATE * state,
  78              BACNET_CHARACTER_STRING * password)
  79          {
  80   1          unsigned len = 0;
  81   1          uint8_t tag_number = 0;
  82   1          uint32_t len_value_type = 0;
  83   1          uint32_t value = 0;
  84   1      
  85   1          /* check for value pointers */
  86   1          if (apdu_len) {
  87   2              /* Tag 0: reinitializedStateOfDevice */
  88   2              if (!decode_is_context_tag(&apdu[len], 0))
  89   2                  return -1;
  90   2              len +=
  91   2                  decode_tag_number_and_value(&apdu[len], &tag_number,
  92   2                  &len_value_type);
  93   2              len += decode_enumerated(&apdu[len], len_value_type, &value);
  94   2              if (state)
  95   2                  *state = (BACNET_REINITIALIZED_STATE) value;
  96   2              /* Tag 1: password - optional */
  97   2              if (len < apdu_len) {
  98   3                  if (!decode_is_context_tag(&apdu[len], 1))
  99   3                      return -1;
 100   3                  len +=
 101   3                      decode_tag_number_and_value(&apdu[len], &tag_number,
 102   3                      &len_value_type);
 103   3                  len +=
 104   3                      decode_character_string(&apdu[len], len_value_type, password);
 105   3              }
 106   2          }
 107   1      
 108   1          return (int) len;
 109   1      }
 110          
 111          #ifdef TEST
              #include <assert.h>
C51 COMPILER V9.06   RD                                                                    03/29/2013 16:57:07 PAGE 3   

              #include <string.h>
              #include "ctest.h"
              
              int rd_decode_apdu(
                  uint8_t * apdu,
                  unsigned apdu_len,
                  uint8_t * invoke_id,
                  BACNET_REINITIALIZED_STATE * state,
                  BACNET_CHARACTER_STRING * password)
              {
                  int len = 0;
                  unsigned offset = 0;
              
                  if (!apdu)
                      return -1;
                  /* optional checking - most likely was already done prior to this call */
                  if (apdu[0] != PDU_TYPE_CONFIRMED_SERVICE_REQUEST)
                      return -1;
                  /*  apdu[1] = encode_max_segs_max_apdu(0, MAX_APDU); */
                  *invoke_id = apdu[2];       /* invoke id - filled in by net layer */
                  if (apdu[3] != SERVICE_CONFIRMED_REINITIALIZE_DEVICE)
                      return -1;
                  offset = 4;
              
                  if (apdu_len > offset) {
                      len =
                          rd_decode_service_request(&apdu[offset], apdu_len - offset, state,
                          password);
                  }
              
                  return len;
              }
              
              void test_ReinitializeDevice(
                  Test * pTest)
              {
                  uint8_t apdu[480] = { 0 };
                  int len = 0;
                  int apdu_len = 0;
                  uint8_t invoke_id = 128;
                  uint8_t test_invoke_id = 0;
                  BACNET_REINITIALIZED_STATE state;
                  BACNET_REINITIALIZED_STATE test_state;
                  BACNET_CHARACTER_STRING password;
                  BACNET_CHARACTER_STRING test_password;
              
                  state = BACNET_REINIT_WARMSTART;
                  characterstring_init_ansi(&password, "John 3:16");
                  len = rd_encode_apdu(&apdu[0], invoke_id, state, &password);
                  ct_test(pTest, len != 0);
                  apdu_len = len;
              
                  len =
                      rd_decode_apdu(&apdu[0], apdu_len, &test_invoke_id, &test_state,
                      &test_password);
                  ct_test(pTest, len != -1);
                  ct_test(pTest, test_invoke_id == invoke_id);
                  ct_test(pTest, test_state == state);
                  ct_test(pTest, characterstring_same(&test_password, &password));
              
                  return;
              }
C51 COMPILER V9.06   RD                                                                    03/29/2013 16:57:07 PAGE 4   

              
              #ifdef TEST_REINITIALIZE_DEVICE
              int main(
                  void)
              {
                  Test *pTest;
                  bool rc;
              
                  pTest = ct_create("BACnet ReinitializeDevice", NULL);
                  /* individual tests */
                  rc = ct_addTestFunction(pTest, test_ReinitializeDevice);
                  assert(rc);
              
                  ct_setStream(pTest, stdout);
                  ct_run(pTest);
                  (void) ct_report(pTest);
                  ct_destroy(pTest);
              
                  return 0;
              }
              #endif /* TEST_REINITIALIZE_DEVICE */
              #endif /* TEST */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    812    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

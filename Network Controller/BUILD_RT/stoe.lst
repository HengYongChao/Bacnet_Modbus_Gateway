C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE STOE
OBJECT MODULE PLACED IN .\stoe.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\ethernet\stoe.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020)
                    - INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;
                    -..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\
                    -buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;.
                    -.\Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\stoe.lst) OBJECT(.\stoe.ob
                    -j)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2006       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11          /*=============================================================================
  12           * Module Name: stoe.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: stoe.c,v $
  18           * Revision 1.1.1.1  2006/06/20 05:50:28  borbin
  19           * no message
  20           *
  21           *=============================================================================
  22           */
  23          
  24          /* INCLUDE FILE DECLARATIONS */
  25          #include "reg80390.h"
  26          #include "stoe.h"
  27          #include "dma.h"
  28          #include "delay.h"
  29          #include "interrupt.h"
  30          #include <intrins.h>
  31          
  32          /* GLOBAL VARIABLES DECLARATIONS */
  33          LOCAL_STATION XDATA* PNetStation = {0};
  34          BUF_DESC_PAGE XDATA* PBDP = 0;
  35          void (*STOE_RcvCallback)(U8_T XDATA*, U16_T, U8_T); /* call eth layer rcv process
  36                                                                                                                          function. */
  37          
  38          /* LOCAL VARIABLES DECLARATIONS */
  39          static U8_T XDATA stoe_BufferSize[STOE_SOCKET_BUFFER_SIZE] _at_ STOE_BDP_START_ADDR;
  40          static U8_T XDATA stoe_InterruptStatus = 0;
  41          
  42          /* LOCAL SUBPROGRAM DECLARATIONS */
  43          static void stoe_BdpInit(void);
  44          #if (STOE_GET_INTSTATUS_MODE == STOE_INTERRUPT_MODE)
                static void stoe_InterruptEnable(void);
              #endif
  47          static void stoe_StartOperate(void);
  48          static void stoe_RcvHandle(void);
  49          
  50          /*
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 2   

  51           * ----------------------------------------------------------------------------
  52           * Function Name: stoe_ReadReg
  53           * Purpose:
  54           * Params:
  55           * Returns:
  56           * Note:
  57           * ----------------------------------------------------------------------------
  58           */
  59          void stoe_ReadReg(U8_T regaddr, U8_T XDATA* pbuf, U8_T length)
  60          {
  61   1              U8_T    isr;
  62   1      
  63   1              isr = EA;
  64   1              EA = 0;
  65   1              _nop_();
  66   1              TCIR = regaddr;
  67   1              while (length--)
  68   1                      pbuf[length] = TDR;
  69   1              EA = isr;
  70   1      
  71   1      } /* End of stoe_ReadReg */
  72          
  73          /*
  74           * ----------------------------------------------------------------------------
  75           * Function Name: stoe_WriteReg
  76           * Purpose:
  77           * Params:
  78           * Returns:
  79           * Note:
  80           * ----------------------------------------------------------------------------
  81           */
  82          void stoe_WriteReg(U8_T regaddr, U8_T XDATA* pbuf, U8_T length)
  83          {
  84   1              U8_T    isr;
  85   1      
  86   1              isr = EA;
  87   1              EA = 0;
  88   1              while (length--)
  89   1                      TDR = pbuf[length];
  90   1              TCIR = regaddr;
  91   1              EA = isr;
  92   1      
  93   1      } /* End of stoe_WriteReg */
  94          
  95          /*
  96           * ----------------------------------------------------------------------------
  97           * Function Name: STOE_Init
  98           * Purpose: to initial all registers and variables of STOE. 
  99           * Params: network_type -0: auto- negotiation
 100           *                                              -1: fixed 100 full speed.
 101           *                                              -2: fixed 100 half speed.
 102           *                                              -3: fixed 10 full speed.
 103           *                                              -4: fixed 10 half speed.
 104           * Returns: none
 105           * Note:
 106           * ----------------------------------------------------------------------------
 107           */
 108          void STOE_Init(U8_T network_type)
 109          {
 110   1              U8_T XDATA      temp[2];
 111   1              U8_T XDATA      value[6] = {0,0,0,0,0,0};
 112   1      #if (STOE_TRANSPARENT != STOE_TRANSPARENT_MODE)
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 3   

 113   1              U8_T XDATA      result[6];
 114   1              U8_T XDATA      index, count;
 115   1      #endif
 116   1      
 117   1              /* set xmit & rcv memory. */
 118   1              stoe_BdpInit();
 119   1      
 120   1              PNetStation = &PBDP->NetStation;
 121   1      
 122   1              /* source IP */
 123   1              stoe_ReadReg(STOE_IP_ADDR_REG, (U8_T XDATA*)&PNetStation->DefaultIP, 4);
 124   1              PNetStation->StationIP = PNetStation->DefaultIP;
 125   1      
 126   1              /* subnet mask */
 127   1              stoe_ReadReg(STOE_SUBNET_MASK_REG, (U8_T XDATA*)&PNetStation->DefaultMask, 4);
 128   1              PNetStation->SubnetMask = PNetStation->DefaultMask;
 129   1      
 130   1              /* gateway */
 131   1              stoe_ReadReg(STOE_GATEWAY_IP_REG, (U8_T XDATA*)&PNetStation->DefaultGateway, 4);
 132   1              PNetStation->Gateway = PNetStation->DefaultGateway;
 133   1      
 134   1              /* set L2 control register */
 135   1      #if (STOE_TRANSPARENT == STOE_TRANSPARENT_MODE)
                      temp[0] = (RX_TRANSPARENT | TX_TRANSPARENT);
              #else
 138   1              temp[0] = 0;
 139   1      #endif
 140   1      //#if (STOE_ADD_SNAP_HEADER)
 141   1      //      temp[0] |= TX_SNAP_ENABLE;
 142   1      //#endif
 143   1              stoe_WriteReg(STOE_L2_CTL_REG, temp, 1);
 144   1      
 145   1              /* set ARP table timeout register */
 146   1              temp[0] = STOE_ARP_TIMEOUT;
 147   1              stoe_WriteReg(STOE_ARP_TIMEOUT_REG, temp, 1);
 148   1      
 149   1              /* set L4 control register */
 150   1      #if (STOE_CHECKSUM_OFFLOAD)
 151   1              temp[0] = (DROP_CHKSUMERR_PKT | ENABLE_XMIT_CHKSUM | ENABLE_XMIT_CROSS);
 152   1      #else
                      temp[0] = ENABLE_XMIT_CROSS;
              #endif
 155   1              stoe_WriteReg(STOE_L4_CTL_REG, temp, 1);
 156   1      
 157   1              /* set BDP point */
 158   1              temp[0] = (STOE_BDP_START_ADDR >> 16);
 159   1              temp[1] = (STOE_BDP_START_ADDR >> 8);
 160   1              stoe_WriteReg(STOE_L4_BDP_PNT_REG, temp, 2);
 161   1      
 162   1              /* receive callback function initialize to null point. */
 163   1              STOE_RcvCallback = 0;
 164   1      
 165   1              DMA_Init();
 166   1              DELAY_Init();
 167   1              MAC_Init(network_type);
 168   1      
 169   1      #if (STOE_TRANSPARENT != STOE_TRANSPARENT_MODE)
 170   1              /* clear arp table */
 171   1              for (index = 0; index < 128 ; index++)
 172   1              {
 173   2                      count = (index * 2);
 174   2                      stoe_WriteReg(STOE_ARP_ADDR_REG, &count, 1);
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 4   

 175   2                      count = (ARP_CACHE_CMD_READ | ARP_CACHE_CMD_GO);
 176   2                      stoe_WriteReg(STOE_ARP_CMD_REG, &count, 1);
 177   2      
 178   2                      while (count & ARP_CACHE_CMD_GO)
 179   2                              stoe_ReadReg(STOE_ARP_CMD_REG, &count, 1);
 180   2      
 181   2                      stoe_ReadReg(STOE_ARP_DATA_REG, result, 6);
 182   2      
 183   2                      if (result[0] & BIT7)
 184   2                      {
 185   3                              count = (index * 2);
 186   3                              stoe_WriteReg(STOE_ARP_ADDR_REG, &count, 1);
 187   3                              stoe_WriteReg(STOE_ARP_DATA_REG, value, 6);
 188   3                              count = ARP_CACHE_CMD_GO;
 189   3                              stoe_WriteReg(STOE_ARP_CMD_REG, &count, 1);
 190   3                              while (count & ARP_CACHE_CMD_GO)
 191   3                                      stoe_ReadReg(STOE_ARP_CMD_REG, &count, 1);
 192   3                      }
 193   2              }
 194   1      #endif
 195   1      
 196   1      } /* End of STOE_Init */
 197          
 198          /*
 199          * -----------------------------------------------------------------------------
 200           * Function Name: stoe_BdpInit
 201           * Purpose: initial Buffer Descriptor Page.
 202           * Params:
 203           * Returns:
 204           * Note:
 205           * ----------------------------------------------------------------------------
 206           */
 207          void stoe_BdpInit(void)
 208          {
 209   1              U16_T   page = (STOE_BDP_START_ADDR >> 8);
 210   1      
 211   1              PBDP = STOE_BDP_START_ADDR;
 212   1      
 213   1              // set BDP number
 214   1              PBDP->BDP_ID = 0;
 215   1      
 216   1              // set rcv buffer.
 217   1              PBDP->RSPP = page + 1;
 218   1              PBDP->REPP = page + PAGES_OF_RCV;
 219   1              PBDP->RHPR = PBDP->RSPP;
 220   1              PBDP->RTPR = PBDP->RSPP;
 221   1              PBDP->RFP = PAGES_OF_RCV;
 222   1      
 223   1              // set xmit buffer.
 224   1              PBDP->TSPP = page + 1 + PAGES_OF_RCV;
 225   1              PBDP->TEPP = page + PAGES_OF_RCV + PAGES_OF_XMIT;
 226   1              PBDP->THPR = PBDP->TSPP;
 227   1              PBDP->TTPR = PBDP->TSPP;
 228   1              PBDP->TFP = PAGES_OF_XMIT;
 229   1      
 230   1              // set rcv and xmit start/end buffer address.
 231   1              PBDP->RcvStartAddr = STOE_BDP_START_ADDR + 256;
 232   1              PBDP->XmtStartAddr = PBDP->RcvStartAddr + STOE_RCV_BUF_SIZE;
 233   1              PBDP->RcvEndAddr = PBDP->XmtStartAddr - 1;
 234   1              PBDP->XmtEndAddr = PBDP->XmtStartAddr + STOE_XMIT_BUF_SIZE - 1;
 235   1      
 236   1      } /* End of stoe_BdpInit */
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 5   

 237          
 238          //#if (STOE_GET_IPADDR_TYPE == STOE_INITIAL_ASSIGN_IP)
 239          /*
 240           * ----------------------------------------------------------------------------
 241           * Function Name: STOE_SetIPAddr
 242           * Purpose:
 243           * Params:
 244           * Returns:
 245           * Note:
 246           * ----------------------------------------------------------------------------
 247           */
 248          void STOE_SetIPAddr(U32_T ip)
 249          {
 250   1              if (ip != PNetStation->StationIP)
 251   1              {
 252   2                      PNetStation->StationIP = ip;
 253   2                      stoe_WriteReg(STOE_IP_ADDR_REG, (U8_T XDATA*)&PNetStation->StationIP, 4);
 254   2              }
 255   1      
 256   1      } /* End of STOE_SetIPAddr*/
 257          
 258          /*
 259           * ----------------------------------------------------------------------------
 260           * Function Name: STOE_SetSubnetMask
 261           * Purpose:
 262           * Params:
 263           * Returns:
 264           * Note:
 265           * ----------------------------------------------------------------------------
 266           */
 267          void STOE_SetSubnetMask(U32_T subnet)
 268          {
 269   1              if (subnet != PNetStation->SubnetMask)
 270   1              {
 271   2                      PNetStation->SubnetMask = subnet;
 272   2                      stoe_WriteReg(STOE_SUBNET_MASK_REG, (U8_T XDATA*)&PNetStation->SubnetMask, 4);
 273   2              }
 274   1      
 275   1      } /* End of STOE_SetSubnetMask */
 276          
 277          /*
 278           * ----------------------------------------------------------------------------
 279           * Function Name: STOE_Gateway
 280           * Purpose:
 281           * Params:
 282           * Returns:
 283           * Note:
 284           * ----------------------------------------------------------------------------
 285           */
 286          void STOE_SetGateway(U32_T gateway)
 287          {
 288   1              if (gateway != PNetStation->Gateway)
 289   1              {
 290   2                      PNetStation->Gateway = gateway;
 291   2                      stoe_WriteReg(STOE_GATEWAY_IP_REG, (U8_T XDATA*)&PNetStation->Gateway, 4);
 292   2              }
 293   1      
 294   1      } /* End of STOE_SetGateway */ 
 295          //#endif
 296          
 297          /*
 298           * ----------------------------------------------------------------------------
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 6   

 299           * Function Name: STOE_Start
 300           * Purpose: enable all used interrupts and set some register to start
 301           *                      timer, software-dma and processing received packets.
 302           * Params:
 303           * Returns:
 304           * Note:
 305           * ----------------------------------------------------------------------------
 306           */
 307          void STOE_Start(void)
 308          {
 309   1              U8_T XDATA      temp;
 310   1      
 311   1              /* clear interrupt status */
 312   1              stoe_ReadReg(STOE_INT_STATUS_REG, &temp, 1);
 313   1      
 314   1      #if (STOE_GET_INTSTATUS_MODE == STOE_INTERRUPT_MODE)
                      /* enable STOE interrupt */
                      stoe_InterruptEnable();
              #endif
 318   1      
 319   1              /* start STOE L2/L3/L4 engines*/
 320   1              stoe_StartOperate();
 321   1      
 322   1              /* start DMA module */
 323   1              DMA_Start();
 324   1      
 325   1              /* start MAC module */
 326   1              MAC_Start();
 327   1      
 328   1              EXTINT4(1);     /* Enable INT4 interrupt for stoe & mac modules. */
 329   1      
 330   1      } /* End of STOE_Start */
 331          
 332          #if (STOE_GET_INTSTATUS_MODE == STOE_INTERRUPT_MODE)
              /*
               * ----------------------------------------------------------------------------
               * Function Name: stoe_InterruptEnable
               * Purpose: enable STOE used interrupt
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              void stoe_InterruptEnable(void)
              {
                      U8_T XDATA      temp;
              
                      temp = STOE_DEFAULT_INT_MASK;
                      stoe_WriteReg(STOE_INT_MASK_REG, &temp, 1);
              
              } /* End of stoe_InterruptEnable */
              
              /*
               * ----------------------------------------------------------------------------
               * Function Name: stoe_InterruptDisable
               * Purpose: disable STOE used interrupt
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              void stoe_InterruptDisable(void)
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 7   

              {
                      U8_T XDATA      temp;
              
                      temp = 0;
                      stoe_WriteReg(STOE_INT_MASK_REG, &temp, 1);
              
              } /* End of stoe_InterruptDisable */
              
              /*
               * ----------------------------------------------------------------------------
               * Function Name: STOE_SetInterruptFlag
               * Purpose:
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              void STOE_SetInterruptFlag(void)
              {
                      U8_T XDATA      int_status;
              
                      /* disable stoe interrupt*/
                      stoe_InterruptDisable();
              
                      /* read stoe interrupt status */
                      stoe_ReadReg(STOE_INT_STATUS_REG, &int_status, 1);
              
                      stoe_InterruptStatus = (int_status & STOE_DEFAULT_INT_MASK);
              
              } /* End of STOE_SetInterruptFlag */
              
              /*
               * ----------------------------------------------------------------------------
               * Function Name: STOE_GetInterruptFlag
               * Purpose:
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              U8_T STOE_GetInterruptFlag(void)
              {
                      return stoe_InterruptStatus;
              
              } /* End of STOE_SetInterruptFlag */
              
              /*
               * ----------------------------------------------------------------------------
               * Function Name: STOE_ProcessInterrupt
               * Purpose: When STOE interrupt is trigged, programmer can call this function
               *                      to process interrupt event. 
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              void STOE_ProcessInterrupt(void)
              {
                      U8_T XDATA      temp;
                      U8_T            isr = EA;
              
                      while (stoe_InterruptStatus)
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 8   

                      {
                              EA = isr;
              
                              if (stoe_InterruptStatus & RCV_PACKET)
                              {
                                      while (PBDP->RFP < PAGES_OF_RCV)
                                              stoe_RcvHandle();
                              }
                              if (stoe_InterruptStatus & RCV_BUF_RING_FULL)
                              {
              //                      printf ("\rRX Packet Buffer Ring is Full.\n\r");
                                      temp = RESUME_PKT_RCV;
                                      stoe_WriteReg(STOE_L4_CMD_REG, &temp, 1);
                              }
              
                              isr = EA;
                              EA = 0;
              
                              /* read stoe interrupt status */
                              stoe_ReadReg(STOE_INT_STATUS_REG, &stoe_InterruptStatus, 1);
                              stoe_InterruptStatus &= STOE_DEFAULT_INT_MASK;
                      }
              
                      /* ensable stoe interrupt */
                      stoe_InterruptEnable();
                      EA = isr;
              
              } /* End of STOE_ProcessInterrupt() */
              #else
 452          /*
 453           * ----------------------------------------------------------------------------
 454           * Function Name: STOE_ProcessInterrupt
 455           * Purpose: programmer can call this function by polling type to find that
 456           *                      interrupt event had happened.
 457           * Params:
 458           * Returns:
 459           * Note:
 460           * ----------------------------------------------------------------------------
 461           */
 462          void STOE_ProcessInterrupt(void)
 463          {
 464   1              static U8_T XDATA       int_status;
 465   1              U8_T XDATA                      temp;
 466   1      
 467   1              while (1)
 468   1              {
 469   2                      /* read stoe interrupt status */
 470   2                      stoe_ReadReg(STOE_INT_STATUS_REG, &int_status, 1);
 471   2                      int_status &= STOE_DEFAULT_INT_MASK;
 472   2      
 473   2                      if (!int_status)
 474   2                              break;
 475   2      
 476   2                      if (int_status & RCV_PACKET)
 477   2                      {
 478   3                              while (PBDP->RFP < PAGES_OF_RCV)
 479   3                                      stoe_RcvHandle();
 480   3                      }
 481   2                      if (int_status & RCV_BUF_RING_FULL)
 482   2                      {
 483   3      //                      printf ("\rRX Packet Buffer Ring is Full.\n\r");
 484   3                              temp = RESUME_PKT_RCV;
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 9   

 485   3                              stoe_WriteReg(STOE_L4_CMD_REG, &temp, 1);
 486   3                      }
 487   2              }
 488   1      }
 489          
 490          #endif
 491          
 492          /*
 493           * ----------------------------------------------------------------------------
 494           * Function Name: STOE_WaitHwReleaseRcvBuf
 495           * Purpose:
 496           * Params:
 497           * Returns:
 498           * Note:
 499           * ----------------------------------------------------------------------------
 500           */
 501          void STOE_WaitHwReleaseRcvBuf(void)
 502          {
 503   1              U8_T XDATA      temp;
 504   1              U8_T            isr;
 505   1      
 506   1              isr = EA;
 507   1              EA = 0;
 508   1              if (PBDP->RFP < PAGES_OF_RCV)
 509   1              {
 510   2                      PBDP->RHPR = PBDP->RTPR;
 511   2                      PBDP->RFP = PAGES_OF_RCV;
 512   2              }
 513   1              EA = isr;
 514   1      
 515   1              temp = RESUME_PKT_RCV;
 516   1              stoe_WriteReg(STOE_L4_CMD_REG, &temp, 1);
 517   1      
 518   1              DELAY_Us(1000);
 519   1      
 520   1              isr = EA;
 521   1              EA = 0;
 522   1              while (PBDP->RFP < PAGES_OF_RCV)
 523   1              {
 524   2                      PBDP->RHPR = PBDP->RTPR;
 525   2                      PBDP->RFP = PAGES_OF_RCV;
 526   2                      EA = isr;
 527   2      
 528   2                      DELAY_Us(1000);
 529   2      
 530   2                      isr = EA;
 531   2                      EA = 0;
 532   2              }
 533   1              EA = isr;
 534   1      
 535   1      } /* End of STOE_WaitHwReleaseRcvBuf() */
 536          
 537          /*
 538           * ----------------------------------------------------------------------------
 539           * Function Name: stoe_StartOperate
 540           * Purpose: start L2/L3/L4 engine
 541           * Params:
 542           * Returns:
 543           * Note:
 544           * ----------------------------------------------------------------------------
 545           */
 546          void stoe_StartOperate(void)
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 10  

 547          {
 548   1              U8_T XDATA      temp;
 549   1      
 550   1              stoe_ReadReg(STOE_L2_CTL_REG, &temp, 1);
 551   1      
 552   1              temp |= (RX_START_OPERA | TX_START_OPERA);
 553   1              stoe_WriteReg(STOE_L2_CTL_REG, &temp, 1);
 554   1      
 555   1      } /* End of stoe_StartOperate */
 556          
 557          #if 0
              /*
               * ----------------------------------------------------------------------------
               * Function Name: stoe_StopOperate
               * Purpose: stop L2/L3/L4 engine
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              void stoe_StopOperate(void)
              {
                      U8_T XDATA      temp;
              
                      stoe_ReadReg(STOE_L2_CTL_REG, &temp, 1);
              
                      Temp &= ~(RX_START_OPERA | TX_START_OPERA);
                      stoe_WriteReg(STOE_L2_CTL_REG, &temp, 1);
              
              } /* End of stoe_StopOperate */
              #endif
 578          
 579          /*
 580          * -----------------------------------------------------------------------------
 581           * Function Name: stoe_RcvHandle
 582           * Purpose: 
 583           * Params: 
 584           * Returns:
 585           * Note:
 586           * ----------------------------------------------------------------------------
 587           */
 588          void stoe_RcvHandle(void)
 589          {
 590   1              static STOE_FRAME_HEADER XDATA* pframe;
 591   1              U16_T   length;
 592   1              U8_T    pages, isr;
 593   1      
 594   1              pframe = ((PBDP->RHPR) << 8);
 595   1              length = (pframe->Length & 0xfff);
 596   1      
 597   1              PBDP->STOE_RxInform.Protocol = pframe->Protocol;
 598   1              PBDP->STOE_RxInform.TotalLen = length;
 599   1              PBDP->STOE_RxInform.PBuf = &pframe->Packet; 
 600   1      
 601   1              if (length && STOE_RcvCallback)
 602   1                      STOE_RcvCallback(&pframe->Packet, length, pframe->Protocol);
 603   1      
 604   1              if (PBDP->RHPR > pframe->NPR)
 605   1                      pages = (PBDP->TSPP - PBDP->RHPR) + (pframe->NPR - PBDP->RSPP);
 606   1              else
 607   1                      pages = pframe->NPR - PBDP->RHPR;
 608   1      
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 11  

 609   1              isr = EA;
 610   1              EA = 0;
 611   1              PBDP->RHPR = pframe->NPR;
 612   1              PBDP->RFP += pages;
 613   1              EA = isr;
 614   1      
 615   1      } /* End of stoe_RcvHandle */
 616          
 617          /*
 618          * -----------------------------------------------------------------------------
 619           * Function Name: stoe_XmitHandle
 620           * Purpose: Set send packet bit to tell hardware transmit one packet to ethernet.
 621           * Params: 
 622           * Returns:     
 623           * Note:
 624           * ----------------------------------------------------------------------------
 625           */
 626          void stoe_XmitHandle(void)
 627          {
 628   1              U8_T XDATA temp;
 629   1      
 630   1              stoe_ReadReg(STOE_L4_CMD_REG, &temp, 1);
 631   1              while (temp & XMIT_PACKET)
 632   1                      stoe_ReadReg(STOE_L4_CMD_REG, &temp, 1);
 633   1      
 634   1              temp = XMIT_PACKET;
 635   1              stoe_WriteReg(STOE_L4_CMD_REG, &temp, 1);
 636   1      
 637   1      } /* stoe_XmitHandle */
 638          
 639          /*
 640          * -----------------------------------------------------------------------------
 641           * Function Name: STOE_Send
 642           * Purpose:     Call this function to set add STOE header.
 643           * Params:      pbuf : buffer address, must between TSPP and TEPP.
 644           *                      length : packet length.
 645           *                      protocol : if the packet is ip packet, set the ip layer protocol,
 646           *                                              if not a ip packet, set value to 0xff.
 647           * Returns:
 648           * Note:
 649           * ----------------------------------------------------------------------------
 650           */
 651          void STOE_Send(U8_T XDATA* pbuf, U16_T length, U8_T protocol)
 652          {
 653   1              STOE_FRAME_HEADER XDATA*        pframe =
 654   1                                                                              (STOE_FRAME_HEADER XDATA*)pbuf;
 655   1              U8_T    occupypages = PBDP->STOE_TxInform.Pages;
 656   1              U8_T    isr;
 657   1      
 658   1              pframe->Length = length;
 659   1              pframe->Protocol = protocol;
 660   1      
 661   1              isr = EA;
 662   1              EA = 0;
 663   1              PBDP->TFP -= occupypages;
 664   1              EA = isr;
 665   1      
 666   1              PBDP->TTPR += occupypages;
 667   1              if (PBDP->TTPR > PBDP->TEPP)
 668   1                      PBDP->TTPR = PBDP->TSPP + PBDP->TTPR - PBDP->TEPP - 1;
 669   1      
 670   1              pframe->NPR = PBDP->TTPR;
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 12  

 671   1      
 672   1              stoe_XmitHandle();
 673   1      
 674   1      } /* End of STOE_Send() */
 675          
 676          
 677          /*
 678          * -----------------------------------------------------------------------------
 679           * Function Name: STOE_AssignSendBuf
 680           * Purpose: Assign a buffer that adress is between TSPP and TEPP, so STOE engine
 681           *                              cans transmit the packet to MAC SRAM.
 682           * Params: length : Buffer size that the packet occupied.
 683           * Returns: Assigned transmit buffer address
 684           * Note:
 685           * ----------------------------------------------------------------------------
 686           */
 687          U8_T XDATA* STOE_AssignSendBuf(U16_T length)
 688          {
 689   1              U8_T XDATA*     pframe;
 690   1              U8_T            occupypages;
 691   1      
 692   1              occupypages = ((length + PAGE_SIZE - 1)/PAGE_SIZE);
 693   1      
 694   1              if (PBDP->TFP <= occupypages)
 695   1                      return (U8_T XDATA*)0;
 696   1      
 697   1              pframe = ((PBDP->TTPR) << 8);
 698   1              PBDP->STOE_TxInform.Pages = occupypages;
 699   1      
 700   1              return pframe;
 701   1      
 702   1      } /* End of STOE_AssignSendBuf */
 703          
 704          #if (!BOOTLDR_ISR)
 705          /*
 706          * -----------------------------------------------------------------------------
 707           * Function Name: STOE_CopyCode2TPBR
 708           * Purpose: 
 709           * Params: 
 710           * Returns:
 711           * Note:
 712           * ----------------------------------------------------------------------------
 713           */
 714          U8_T XDATA* STOE_CopyCode2TPBR(U8_T XDATA* pdest, U8_T* psour, U16_T length)
 715          {
 716   1              U16_T   space, leftlen;
 717   1      
 718   1              /* destination address is not in range of TPBR. */
 719   1              if ((pdest > PBDP->XmtEndAddr) || (pdest < PBDP->XmtStartAddr))
 720   1                      return 0;
 721   1      
 722   1              space = (U16_T)PBDP->XmtEndAddr - (U16_T)pdest + 1;
 723   1              if (space > length)
 724   1              {
 725   2                      while (length--)
 726   2                              *pdest++ = *psour++;
 727   2              }
 728   1              else
 729   1              {
 730   2                      leftlen = length - space;
 731   2      
 732   2                      while (space--)
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 13  

 733   2                              *pdest++ = *psour++;
 734   2      
 735   2                      pdest = PBDP->XmtStartAddr;
 736   2      
 737   2                      while (leftlen--)
 738   2                              *pdest++ = *psour++;
 739   2              }
 740   1      
 741   1              return pdest;
 742   1      
 743   1      } /* End of STOE_CopyCode2TPBR */
 744          #endif
 745          
 746          /*
 747          * -----------------------------------------------------------------------------
 748           * Function Name: STOE_CHECK_MAC
 749           * Purpose: 
 750           * Params: 
 751           * Returns:
 752           * Note:
 753           * ----------------------------------------------------------------------------
 754           */
 755          U8_T STOE_CHECK_MAC(U32_T *ip_addr)
 756          {
 757   1              U8_T entry_addr, result[6] = {0};
 758   1              entry_addr = (U8_T)(*ip_addr & 0x7F) * 2;
 759   1      //      PRINTD(DEBUG_MSG, ("STOE_CHECK_MAC :: entry_addr = %bx\n\r", entry_addr));
 760   1              stoe_WriteReg(STOE_ARP_ADDR_REG, &entry_addr, 1);
 761   1      
 762   1              entry_addr = ARP_CACHE_CMD_READ | ARP_CACHE_CMD_GO;
 763   1              stoe_WriteReg(STOE_ARP_CMD_REG, &entry_addr, 1);
 764   1      
 765   1              stoe_ReadReg(STOE_ARP_DATA_REG, result, 6);
 766   1      
 767   1              if (result[0]& 0x80)
 768   1                      return 1;
 769   1              else
 770   1                      return 0;
 771   1      
 772   1      } /* End of STOE_CHECK_MAC() */
 773          
 774          #if (!STOE_TRANSPARENT)
 775          /*
 776          * -----------------------------------------------------------------------------
 777           * Function Name: STOE_EnableIpFilter
 778           * Purpose: Enable hardware IP filter function, the default is enable. 
 779           * Params: 
 780           * Returns:
 781           * Note:
 782           * ----------------------------------------------------------------------------
 783           */
 784          void STOE_EnableIpFilter(void)
 785          {
 786   1              U8_T XDATA      temp;
 787   1      
 788   1              stoe_ReadReg(STOE_L2_CTL_REG, &temp, 1);
 789   1      
 790   1              temp &= ~BIT2;
 791   1              stoe_WriteReg(STOE_L2_CTL_REG, &temp, 1);
 792   1      
 793   1      } /* End of STOE_EnableIpFilter() */
 794          
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 14  

 795          /*
 796          * -----------------------------------------------------------------------------
 797           * Function Name: STOE_DisableIpFilter
 798           * Purpose:  Disable hardware IP filter function, the default is enable.
 799           * Params: 
 800           * Returns:
 801           * Note:
 802           * ----------------------------------------------------------------------------
 803           */
 804          void STOE_DisableIpFilter(void)
 805          {
 806   1              U8_T XDATA      temp;
 807   1      
 808   1              stoe_ReadReg(STOE_L2_CTL_REG, &temp, 1);
 809   1      
 810   1              temp |= BIT2;
 811   1              stoe_WriteReg(STOE_L2_CTL_REG, &temp, 1);
 812   1      
 813   1      } /* End of STOE_DisableIpFilter() */
 814          
 815          /*
 816          * -----------------------------------------------------------------------------
 817           * Function Name: STOE_AddArpTable
 818           * Purpose: 
 819           * Params: 
 820           * Returns:
 821           * Note:
 822           * ----------------------------------------------------------------------------
 823           */
 824          BOOL STOE_AddArpTable(U8_T XDATA* MacAddr, U32_T IpAddr, U8_T Static)
 825          {
 826   1              U8_T            temp, index;
 827   1              U8_T            value[6];
 828   1              U8_T            hash[7];
 829   1      
 830   1              temp = (IpAddr * 2);
 831   1              index = temp;
 832   1              stoe_WriteReg(STOE_ARP_ADDR_REG, &temp, 1);
 833   1              temp = (ARP_CACHE_CMD_READ | ARP_CACHE_CMD_GO);
 834   1              stoe_WriteReg(STOE_ARP_CMD_REG, &temp, 1);
 835   1      
 836   1              while (temp & ARP_CACHE_CMD_GO)
 837   1                      stoe_ReadReg(STOE_ARP_CMD_REG, &temp, 1);
 838   1      
 839   1              stoe_ReadReg(STOE_ARP_DATA_REG, value, 6);
 840   1      
 841   1              if ((value[0] & BIT7) && (IpAddr != *((U32_T*)&value[2])))
 842   1              {
 843   2                      hash[0] = (U8_T)(((IpAddr >> 1) & 1) ^ ((IpAddr >> 9) & 1) ^ ((IpAddr >> 17) & 1) ^ ((IpAddr >> 25) & 1)
             -);
 844   2                      hash[1] = (U8_T)(((IpAddr >> 2) & 1) ^ ((IpAddr >> 10) & 1) ^ ((IpAddr >> 18) & 1) ^ ((IpAddr >> 26) & 1
             -));
 845   2                      hash[2] = (U8_T)(((IpAddr >> 3) & 1) ^ ((IpAddr >> 11) & 1) ^ ((IpAddr >> 19) & 1) ^ ((IpAddr >> 27) & 1
             -));
 846   2                      hash[3] = (U8_T)(((IpAddr >> 4) & 1) ^ ((IpAddr >> 12) & 1) ^ ((IpAddr >> 20) & 1) ^ ((IpAddr >> 28) & 1
             -));
 847   2                      hash[4] = (U8_T)(((IpAddr >> 5) & 1) ^ ((IpAddr >> 13) & 1) ^ ((IpAddr >> 21) & 1) ^ ((IpAddr >> 29) & 1
             -));
 848   2                      hash[5] = (U8_T)(((IpAddr >> 6) & 1) ^ ((IpAddr >> 14) & 1) ^ ((IpAddr >> 22) & 1) ^ ((IpAddr >> 30) & 1
             -));
 849   2                      hash[6] = (U8_T)(((IpAddr >> 7) & 1) ^ ((IpAddr >> 15) & 1) ^ ((IpAddr >> 23) & 1) ^ ((IpAddr >> 31) & 1
             -));
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 15  

 850   2      
 851   2                      temp = (hash[0] << 1) + (hash[1] << 2) + (hash[2] << 3) + (hash[3] << 4) + (hash[4] << 5) + (hash[5] << 
             -6) + (hash[6] << 7);
 852   2                      index = temp;
 853   2                      stoe_WriteReg(STOE_ARP_ADDR_REG, &temp, 1);
 854   2                      temp = (ARP_CACHE_CMD_READ | ARP_CACHE_CMD_GO);
 855   2                      stoe_WriteReg(STOE_ARP_CMD_REG, &temp, 1);
 856   2      
 857   2                      while (temp & ARP_CACHE_CMD_GO)
 858   2                              stoe_ReadReg(STOE_ARP_CMD_REG, &temp, 1);
 859   2      
 860   2                      stoe_ReadReg(STOE_ARP_DATA_REG, value, 6);
 861   2      
 862   2                      if ((value[0] & BIT7) && (IpAddr != *((U32_T*)&value[2])))
 863   2                      {
 864   3                              return FALSE;
 865   3                      }
 866   2              }
 867   1      
 868   1              stoe_WriteReg(STOE_ARP_ADDR_REG, &index, 1);
 869   1      
 870   1              value[0] = 0x80 | ((Static & 0x01) << 6);
 871   1              value[1] = 0;
 872   1              *(U32_T *)&value[2] = IpAddr;
 873   1              stoe_WriteReg(STOE_ARP_DATA_REG, value, 6);
 874   1      
 875   1              temp = ARP_CACHE_CMD_GO;
 876   1              stoe_WriteReg(STOE_ARP_CMD_REG, &temp, 1);
 877   1      
 878   1              while (temp & ARP_CACHE_CMD_GO)
 879   1                      stoe_ReadReg(STOE_ARP_CMD_REG, &temp, 1);
 880   1      
 881   1              temp = (index + 1);
 882   1              stoe_WriteReg(STOE_ARP_ADDR_REG, &temp, 1);
 883   1      
 884   1              stoe_WriteReg(STOE_ARP_DATA_REG, MacAddr, 6);
 885   1      
 886   1              temp = ARP_CACHE_CMD_GO;
 887   1              stoe_WriteReg(STOE_ARP_CMD_REG, &temp, 1);
 888   1      
 889   1              while (temp & ARP_CACHE_CMD_GO)
 890   1                      stoe_ReadReg(STOE_ARP_CMD_REG, &temp, 1);
 891   1      
 892   1              return TRUE;
 893   1      }
 894          #endif
 895          
 896          /* End of stoe.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5540    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =     11      84
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.06   STOE                                                                  03/13/2013 09:32:20 PAGE 16  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

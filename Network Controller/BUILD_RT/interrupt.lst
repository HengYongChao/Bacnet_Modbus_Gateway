C51 COMPILER V9.06   INTERRUPT                                                             03/13/2013 09:32:19 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE INTERRUPT
OBJECT MODULE PLACED IN .\interrupt.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\cpu\interrupt.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020)
                    - INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;
                    -..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\
                    -buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;.
                    -.\Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\interrupt.lst) OBJECT(.\in
                    -terrupt.obj)

line level    source

   1          /*
   2           *********************************************************************************
   3           *     Copyright (c) 2005       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           *********************************************************************************
  10           */
  11          /*================================================================================
  12           * Module Name : interrupt.c
  13           * Purpose     : This file include peripheral interrupt service routine and
  14           *               the wake up interrupt service routine.
  15           * Author      : Robin Lee
  16           * Date        : 2006-01-09
  17           * Notes       :
  18           * $Log: interrupt.c,v $
  19           * Revision 1.3  2006/07/20 03:50:59  robin6633
  20           * 1.Change the header file name "reg80390.h" to "ax110xx.h".
  21           *
  22           * Revision 1.2  2006/04/20 01:22:56  robin6633
  23           * 1.Added watchdog timeout ISR.
  24           *
  25           * Revision 1.1  2006/04/07 11:36:17  robin6633
  26           * no message
  27           *
  28           *================================================================================
  29           */
  30          
  31          /* INCLUDE FILE DECLARATIONS */
  32          #include        "ax110xx.h"
  33          #include        "types.h"
  34          #include        "interrupt.h"
  35          
  36          #if AX_LBI_INT_ENABLE
              #include        "lbi.h"
              #endif
  39          
  40          #if AX_ETH_INT_ENABLE
  41          #include        "mac.h"
  42          #endif
  43          
  44          #if AX_ETH_INT_ENABLE
  45          #include        "stoe.h"
  46          #endif
  47          
  48          #if AX_I2C_INT_ENABLE
  49          #include        "i2c.h"
  50          #endif
C51 COMPILER V9.06   INTERRUPT                                                             03/13/2013 09:32:19 PAGE 2   

  51          
  52          #if AX_SPI_INT_ENABLE
              #include        "spi.h"
              #endif
  55          
  56          #if AX_ONEWIRE_INT_ENABLE
  57          #include        "onewire.h"
  58          #endif
  59          
  60          #if AX_CAN_INT_ENABLE
              #include        "can.h"
              #endif
  63          
  64          #if AX_HSUART_INT_ENABLE
  65          #include        "hsuart.h"
  66          #endif
  67          
  68          
  69          /* NAMING CONSTANT DECLARATIONS */
  70          
  71          
  72          /* STATIC VARIABLE DECLARATIONS */
  73          extern void test_port(U8_T num);
  74          
  75          /* LOCAL SUBPROGRAM DECLARATIONS */
  76          static void     ax11000_PeripherialISR(void);
  77          
  78          #if AX_POWER_MANAGEMENT_INT_ENABLE
              static void     ax11000_PmmISR(void);
              #endif
  81          
  82          #if AX_WATCHDOG_INT_ENB
              void    ax11000_WatchDogISR(void);
              #endif
  85          
  86          
  87          /* LOCAL SUBPROGRAM BODIES */
  88          
  89          /*
  90           *--------------------------------------------------------------------------------
  91           * static void ax11000_PeripherialISR(void)
  92           * Purpose : The interrupt service routine of Flipper peripheral devices.
  93           * Params  : None.
  94           * Returns : None.
  95           * Note    : None.
  96           *--------------------------------------------------------------------------------
  97           */
  98          static void ax11000_PeripherialISR(void) interrupt 9 //use external interrupt 4 (0x4B)
  99          {
 100   1              U8_T    intrStt1 = 0;
 101   1              U8_T    intrStt2 = 0;
 102   1      
 103   1      //      test_port(0x20);
 104   1      
 105   1                      
 106   1      
 107   1      
 108   1              /* Interrupt type check */
 109   1              while (1)
 110   1              {
 111   2              
 112   2      //      P3_7 = ~ P3_7;  
C51 COMPILER V9.06   INTERRUPT                                                             03/13/2013 09:32:19 PAGE 3   

 113   2              
 114   2                      EA = 0;
 115   2                      intrStt1 = PISSR1;
 116   2                      intrStt2 = PISSR2;
 117   2                      EA = 1;
 118   2      
 119   2                      if ((intrStt1 == 0) && (intrStt2 == 0))
 120   2                              break;
 121   2      
 122   2      #if AX_LBI_INT_ENABLE
                              if (intrStt1 & LB_INT_STU)
                              {
                                      LocalBusFunc();
                              }
              #endif
 128   2      
 129   2      #if AX_LBI_INT_ENABLE
                              if (intrStt1 & LB_EXT_INT_STU)
                              {
                                      LocalBusAccessCompleteFunc();
                              }
              #endif
 135   2      
 136   2      #if AX_ETH_INT_ENABLE
 137   2      #if (MAC_GET_INTSTATUS_MODE == MAC_INTERRUPT_MODE)
 138   2                      if (intrStt1 & ETH_INT_STU)
 139   2                      {
 140   3                              MAC_SetInterruptFlag();
 141   3                      }
 142   2      #endif
 143   2      #endif
 144   2      
 145   2      
 146   2      
 147   2      #if AX_ETH_INT_ENABLE
 148   2      #if (STOE_GET_INTSTATUS_MODE == STOE_INTERRUPT_MODE)
                              if (intrStt1 & TOE_INT_STU)
                              {
                                      STOE_SetInterruptFlag();
                              }
              #endif
 154   2      
 155   2      
 156   2      #endif
 157   2      
 158   2      #if AX_CAN_INT_ENABLE
                              if (intrStt1 & CAN_INT_STU)
                              {
                                      CAN_Func();
                              }
              #endif
 164   2      
 165   2      
 166   2      
 167   2      #if AX_I2C_INT_ENABLE
 168   2                      if (intrStt1 & I2C_INT_STU)
 169   2                      {
 170   3                              I2C_Func();
 171   3                      }
 172   2      #endif
 173   2      
 174   2      
C51 COMPILER V9.06   INTERRUPT                                                             03/13/2013 09:32:19 PAGE 4   

 175   2      
 176   2      #if AX_SPI_INT_ENABLE
                              if (intrStt1 & SPI_INT_STU)
                              {
                                      SPI_Func();
                              }
              #endif
 182   2      
 183   2      #if AX_ONEWIRE_INT_ENABLE
 184   2                      if (intrStt1 & OW_INT_STU)
 185   2                      {
 186   3                              ONEWIRE_Func();
 187   3                      }
 188   2      #endif
 189   2      
 190   2      #if AX_HSUART_INT_ENABLE
 191   2                      if (intrStt2 & UART2_INT_STU)
 192   2                      {
 193   3                              HSUR_Func();
 194   3                      }
 195   2      #endif
 196   2              }
 197   1      }
 198          
 199          #if AX_POWER_MANAGEMENT_INT_ENABLE
              /*
               *--------------------------------------------------------------------------------
               * static void ax11000_PmmISR(void)
               * Purpose : The interrupt service routine of the
               *           wake up event in power management mode.
               * Params  : None.
               * Returns : None.
               * Note    : None.
               *--------------------------------------------------------------------------------
               */
              static void ax11000_PmmISR(void) interrupt 11 //use external interrupt 6 (0x5B)
              {
                      U8_T    wakeStatus = 0;
                      U8_T    mode = 0;
                      U8_T    sysClk = 0;
                      U8_T    canReg = 0;
                      U8_T    intEnb = 0;
              
                      EA = 0;
                      EIF &= ~INT6F;  // Clear the flag of interrupt 6.
                      EA = 1;
              
                      
              
                      wakeStatus = PCON;
                      if (!(wakeStatus & SWB_))
                      {
                              PCON &= ~ (PMM_ | STOP_);
                      }
              
              #if AX_ETH_INT_ENABLE
                      /* Ethernet wake up function */
                      /* disable wake up interrupt */
                      MDR  = 0;
                      MCIR = MAC_STOP_PMM_INT_ENABLE_REG;
                      /* clear MAC status register */
                      CLI_MacRd((ULONG)MAC_STOP_PMM_INT_STATUS_REG, &WakeStatus, 1);
C51 COMPILER V9.06   INTERRUPT                                                             03/13/2013 09:32:19 PAGE 5   

                      STOE_Standby = 0;
              #endif
              
              #if AX_CAN_INT_ENABLE
                      /* CAN wake up function */
                      CAN_WakeUpEvent(0); // 0 for exit power management mode
              #endif
              }
              #endif
 246          
 247          #if AX_WATCHDOG_INT_ENB
              /*
               *--------------------------------------------------------------------------------
               * void ax11000_WatchDogISR(void)
               * Purpose : The interrupt service routine of the AX11000 Watchdog timeout.
               * Params  : None
               * Returns : None
               * Note    : None
               *--------------------------------------------------------------------------------
               */
              void ax11000_WatchDogISR(void) interrupt 12
              {
                      if (EWDI)
                      {
                              if (EWT)
                              {
                                      TA = 0xAA;
                                      TA = 0x55;
                                      WDIF = 0; // clear WatchDog Interrupt Flag.
                                      WTRF = 0; // clear the Watchdog Timer Reset Flag.
                                      RWT = 1; // reset watchdog timer.
                              }
                              else
                              {
                                      TA = 0xAA;
                                      TA = 0x55;
                                      WDIF = 0; //clear WatchDog Interrupt Flag.
                                      RWT = 1; // reset watchdog timer.
                              }
                      }
              }
              #endif
 279          
 280          
 281          /* EXPORTED SUBPROGRAM BODIES */
 282          
 283          
 284          /* End of interrupt.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    145    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.06   INTERRUPT                                                             03/13/2013 09:32:19 PAGE 6   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

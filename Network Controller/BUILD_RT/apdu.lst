C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE APDU
OBJECT MODULE PLACED IN .\apdu.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\bacnet\apdu.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) I
                    -NCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;..
                    -\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\bu
                    -ffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..\
                    -Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\apdu.lst) OBJECT(.\apdu.obj)

line level    source

   1          /*####COPYRIGHTBEGIN####
   2           -------------------------------------------
   3           Copyright (C) 2005 Steve Karg
   4          
   5           This program is free software; you can redistribute it and/or
   6           modify it under the terms of the GNU General Public License
   7           as published by the Free Software Foundation; either version 2
   8           of the License, or (at your option) any later version.
   9          
  10           This program is distributed in the hope that it will be useful,
  11           but WITHOUT ANY WARRANTY; without even the implied warranty of
  12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13           GNU General Public License for more details.
  14          
  15           You should have received a copy of the GNU General Public License
  16           along with this program; if not, write to:
  17           The Free Software Foundation, Inc.
  18           59 Temple Place - Suite 330
  19           Boston, MA  02111-1307, USA.
  20          
  21           As a special exception, if other files instantiate templates or
  22           use macros or inline functions from this file, or you compile
  23           this file and link it with other works to produce a work based
  24           on this file, this file does not by itself cause the resulting
  25           work to be covered by the GNU General Public License. However
  26           the source code for this file must still be made available in
  27           accordance with section (3) of the GNU General Public License.
  28          
  29           This exception does not invalidate any other reasons why a work
  30           based on this file might be covered by the GNU General Public
  31           License.
  32           -------------------------------------------
  33          ####COPYRIGHTEND####*/
  34          #include <stdbool.h>
  35          #include <stdint.h>
  36          #include <stddef.h>
  37          #include "../include/bits.h"
  38          #include "../include/apdu.h"
  39          #include "../include/bacdef.h"
  40          #include "../include/bacdcode.h"
  41          #include "../include/bacenum.h"
  42          #include "../include/tsm.h"
  43          #include "../include/dcc.h"
  44          #include "../include/iam.h"
  45          
  46          /** @file apdu.c  Handles APDU services */
  47          
  48          extern int Routed_Device_Service_Approval(
  49              BACNET_CONFIRMED_SERVICE service,
  50              int service_argument,
  51              uint8_t * apdu_buff,
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 2   

  52              uint8_t invoke_id);
  53          
  54          
  55          /* APDU Timeout in Milliseconds */
  56          static uint16_t Timeout_Milliseconds = 3000;
  57          /* Number of APDU Retries */
  58          static uint8_t Number_Of_Retries = 3;
  59          
  60          /* a simple table for crossing the services supported */
  61          static BACNET_SERVICES_SUPPORTED
  62              confirmed_service_supported[MAX_BACNET_CONFIRMED_SERVICE] = {
  63              SERVICE_SUPPORTED_ACKNOWLEDGE_ALARM,
  64              SERVICE_SUPPORTED_CONFIRMED_COV_NOTIFICATION,
  65              SERVICE_SUPPORTED_CONFIRMED_EVENT_NOTIFICATION,
  66              SERVICE_SUPPORTED_GET_ALARM_SUMMARY,
  67              SERVICE_SUPPORTED_GET_ENROLLMENT_SUMMARY,
  68              SERVICE_SUPPORTED_SUBSCRIBE_COV,
  69              SERVICE_SUPPORTED_ATOMIC_READ_FILE,
  70              SERVICE_SUPPORTED_ATOMIC_WRITE_FILE,
  71              SERVICE_SUPPORTED_ADD_LIST_ELEMENT,
  72              SERVICE_SUPPORTED_REMOVE_LIST_ELEMENT,
  73              SERVICE_SUPPORTED_CREATE_OBJECT,
  74              SERVICE_SUPPORTED_DELETE_OBJECT,
  75              SERVICE_SUPPORTED_READ_PROPERTY,
  76              SERVICE_SUPPORTED_READ_PROP_CONDITIONAL,
  77              SERVICE_SUPPORTED_READ_PROP_MULTIPLE,
  78              SERVICE_SUPPORTED_WRITE_PROPERTY,
  79              SERVICE_SUPPORTED_WRITE_PROP_MULTIPLE,
  80              SERVICE_SUPPORTED_DEVICE_COMMUNICATION_CONTROL,
  81              SERVICE_SUPPORTED_PRIVATE_TRANSFER,
  82              SERVICE_SUPPORTED_TEXT_MESSAGE,
  83              SERVICE_SUPPORTED_REINITIALIZE_DEVICE,
  84              SERVICE_SUPPORTED_VT_OPEN,
  85              SERVICE_SUPPORTED_VT_CLOSE,
  86              SERVICE_SUPPORTED_VT_DATA,
  87              SERVICE_SUPPORTED_AUTHENTICATE,
  88              SERVICE_SUPPORTED_REQUEST_KEY,
  89              SERVICE_SUPPORTED_READ_RANGE,
  90              SERVICE_SUPPORTED_LIFE_SAFETY_OPERATION,
  91              SERVICE_SUPPORTED_SUBSCRIBE_COV_PROPERTY,
  92              SERVICE_SUPPORTED_GET_EVENT_INFORMATION
  93          };
  94          
  95          /* a simple table for crossing the services supported */
  96          static BACNET_SERVICES_SUPPORTED
  97              unconfirmed_service_supported[MAX_BACNET_UNCONFIRMED_SERVICE] = {
  98              SERVICE_SUPPORTED_I_AM,
  99              SERVICE_SUPPORTED_I_HAVE,
 100              SERVICE_SUPPORTED_UNCONFIRMED_COV_NOTIFICATION,
 101              SERVICE_SUPPORTED_UNCONFIRMED_EVENT_NOTIFICATION,
 102              SERVICE_SUPPORTED_UNCONFIRMED_PRIVATE_TRANSFER,
 103              SERVICE_SUPPORTED_UNCONFIRMED_TEXT_MESSAGE,
 104              SERVICE_SUPPORTED_TIME_SYNCHRONIZATION,
 105              SERVICE_SUPPORTED_WHO_HAS,
 106              SERVICE_SUPPORTED_WHO_IS,
 107              SERVICE_SUPPORTED_UTC_TIME_SYNCHRONIZATION
 108          };
 109          
 110          /* Confirmed Function Handlers */
 111          /* If they are not set, they are handled by a reject message */
 112          static confirmed_function Confirmed_Function[MAX_BACNET_CONFIRMED_SERVICE];
 113          
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 3   

 114          void apdu_set_confirmed_handler(
 115              BACNET_CONFIRMED_SERVICE service_choice,
 116              confirmed_function pFunction)
 117          {
 118   1          if (service_choice < MAX_BACNET_CONFIRMED_SERVICE)
 119   1              Confirmed_Function[service_choice] = pFunction;
 120   1      }
 121          
 122          /* Allow the APDU handler to automatically reject */
 123          static confirmed_function Unrecognized_Service_Handler;
 124          
 125          void apdu_set_unrecognized_service_handler_handler(
 126              confirmed_function pFunction)
 127          {
 128   1          Unrecognized_Service_Handler = pFunction;
 129   1      }
 130          
 131          /* Unconfirmed Function Handlers */
 132          /* If they are not set, they are not handled */
 133          static unconfirmed_function
 134              Unconfirmed_Function[MAX_BACNET_UNCONFIRMED_SERVICE];
 135          
 136          void apdu_set_unconfirmed_handler(
 137              BACNET_UNCONFIRMED_SERVICE service_choice,
 138              unconfirmed_function pFunction)
 139          {
 140   1          if (service_choice < MAX_BACNET_UNCONFIRMED_SERVICE)
 141   1              Unconfirmed_Function[service_choice] = pFunction;
 142   1      }
 143          
 144          bool apdu_service_supported(
 145              BACNET_SERVICES_SUPPORTED service_supported)
 146          {
 147   1          int i = 0;
 148   1          bool status = false;
 149   1          bool found = false;
 150   1      
 151   1          if (service_supported < MAX_BACNET_SERVICES_SUPPORTED) {
 152   2              /* is it a confirmed service? */
 153   2              for (i = 0; i < MAX_BACNET_CONFIRMED_SERVICE; i++) {
 154   3                  if (confirmed_service_supported[i] == service_supported) {
 155   4                      found = true;
 156   4                      if (Confirmed_Function[i] != NULL) {
 157   5      
 158   5      
 159   5      //#if BAC_ROUTING
 160   5      //                    /* Check to see if the current Device supports this service. */
 161   5      //                    int len =
 162   5      //                        Routed_Device_Service_Approval(service_supported, 0,
 163   5      //                        NULL, 0);
 164   5      //                    if (len > 0)
 165   5      //                        break;  /* Not supported - return false */
 166   5      //#endif
 167   5      
 168   5                          status = true;
 169   5                      }
 170   4                      break;
 171   4                  }
 172   3              }
 173   2      
 174   2              if (!found) {
 175   3                  /* is it an unconfirmed service? */
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 4   

 176   3                  for (i = 0; i < MAX_BACNET_UNCONFIRMED_SERVICE; i++) {
 177   4                      if (unconfirmed_service_supported[i] == service_supported) {
 178   5                          if (Unconfirmed_Function[i] != NULL)
 179   5                              status = true;
 180   5                          break;
 181   5                      }
 182   4                  }
 183   3              }
 184   2          }
 185   1          return status;
 186   1      }
 187          
 188          /** Function to translate a SERVICE_SUPPORTED_ enum to its SERVICE_CONFIRMED_
 189           *  or SERVICE_UNCONFIRMED_ index.
 190           *  Useful with the bactext_confirmed_service_name() functions.
 191           *
 192           * @param service_supported [in] The SERVICE_SUPPORTED_ enum value to convert.
 193           * @param index [out] The SERVICE_CONFIRMED_ or SERVICE_UNCONFIRMED_ index,
 194           *                    if found.
 195           * @param bIsConfirmed [out] True if index is a SERVICE_CONFIRMED_ type.
 196           * @return True if a match was found and index and bIsConfirmed are valid.
 197           */
 198          bool apdu_service_supported_to_index(
 199              BACNET_SERVICES_SUPPORTED service_supported,
 200              size_t * index,
 201              bool * bIsConfirmed)
 202          {
 203   1          int i = 0;
 204   1          bool found = false;
 205   1      
 206   1          *bIsConfirmed = false;
 207   1          if (service_supported < MAX_BACNET_SERVICES_SUPPORTED) {
 208   2              /* is it a confirmed service? */
 209   2              for (i = 0; i < MAX_BACNET_CONFIRMED_SERVICE; i++) {
 210   3                  if (confirmed_service_supported[i] == service_supported) {
 211   4                      found = true;
 212   4                      *index = (size_t) i;
 213   4                      *bIsConfirmed = true;
 214   4                      break;
 215   4                  }
 216   3              }
 217   2      
 218   2              if (!found) {
 219   3                  /* is it an unconfirmed service? */
 220   3                  for (i = 0; i < MAX_BACNET_UNCONFIRMED_SERVICE; i++) {
 221   4                      if (unconfirmed_service_supported[i] == service_supported) {
 222   5                          found = true;
 223   5                          *index = (size_t) i;
 224   5                          break;
 225   5                      }
 226   4                  }
 227   3              }
 228   2          }
 229   1          return found;
 230   1      }
 231          
 232          /* Confirmed ACK Function Handlers */
 233          static confirmed_ack_function
 234              Confirmed_ACK_Function[MAX_BACNET_CONFIRMED_SERVICE];
 235          
 236          void apdu_set_confirmed_simple_ack_handler(
 237              BACNET_CONFIRMED_SERVICE service_choice,
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 5   

 238              confirmed_simple_ack_function pFunction)
 239          {
 240   1          switch (service_choice) {
 241   2              case SERVICE_CONFIRMED_ACKNOWLEDGE_ALARM:
 242   2              case SERVICE_CONFIRMED_COV_NOTIFICATION:
 243   2              case SERVICE_CONFIRMED_EVENT_NOTIFICATION:
 244   2              case SERVICE_CONFIRMED_SUBSCRIBE_COV:
 245   2              case SERVICE_CONFIRMED_SUBSCRIBE_COV_PROPERTY:
 246   2              case SERVICE_CONFIRMED_LIFE_SAFETY_OPERATION:
 247   2                  /* Object Access Services */
 248   2              case SERVICE_CONFIRMED_ADD_LIST_ELEMENT:
 249   2              case SERVICE_CONFIRMED_REMOVE_LIST_ELEMENT:
 250   2              case SERVICE_CONFIRMED_DELETE_OBJECT:
 251   2              case SERVICE_CONFIRMED_WRITE_PROPERTY:
 252   2              case SERVICE_CONFIRMED_WRITE_PROP_MULTIPLE:
 253   2                  /* Remote Device Management Services */
 254   2              case SERVICE_CONFIRMED_DEVICE_COMMUNICATION_CONTROL:
 255   2              case SERVICE_CONFIRMED_TEXT_MESSAGE:
 256   2              case SERVICE_CONFIRMED_REINITIALIZE_DEVICE:
 257   2                  /* Virtual Terminal Services */
 258   2              case SERVICE_CONFIRMED_VT_CLOSE:
 259   2                  /* Security Services */
 260   2              case SERVICE_CONFIRMED_REQUEST_KEY:
 261   2                  Confirmed_ACK_Function[service_choice] =
 262   2                      (confirmed_ack_function) pFunction;
 263   2                  break;
 264   2              default:
 265   2                  break;
 266   2          }
 267   1      }
 268          
 269          void apdu_set_confirmed_ack_handler(
 270              BACNET_CONFIRMED_SERVICE service_choice,
 271              confirmed_ack_function pFunction)
 272          {
 273   1          switch (service_choice) {
 274   2              case SERVICE_CONFIRMED_GET_ALARM_SUMMARY:
 275   2              case SERVICE_CONFIRMED_GET_ENROLLMENT_SUMMARY:
 276   2              case SERVICE_CONFIRMED_GET_EVENT_INFORMATION:
 277   2                  /* File Access Services */
 278   2              case SERVICE_CONFIRMED_ATOMIC_READ_FILE:
 279   2              case SERVICE_CONFIRMED_ATOMIC_WRITE_FILE:
 280   2                  /* Object Access Services */
 281   2              case SERVICE_CONFIRMED_CREATE_OBJECT:
 282   2              case SERVICE_CONFIRMED_READ_PROPERTY:
 283   2              case SERVICE_CONFIRMED_READ_PROP_CONDITIONAL:
 284   2              case SERVICE_CONFIRMED_READ_PROP_MULTIPLE:
 285   2              case SERVICE_CONFIRMED_READ_RANGE:
 286   2                  /* Remote Device Management Services */
 287   2              case SERVICE_CONFIRMED_PRIVATE_TRANSFER:
 288   2                  /* Virtual Terminal Services */
 289   2              case SERVICE_CONFIRMED_VT_OPEN:
 290   2              case SERVICE_CONFIRMED_VT_DATA:
 291   2                  /* Security Services */
 292   2              case SERVICE_CONFIRMED_AUTHENTICATE:
 293   2                  Confirmed_ACK_Function[service_choice] = pFunction;
 294   2                  break;
 295   2              default:
 296   2                  break;
 297   2          }
 298   1      }
 299          
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 6   

 300          static error_function Error_Function[MAX_BACNET_CONFIRMED_SERVICE];
 301          
 302          void apdu_set_error_handler(
 303              BACNET_CONFIRMED_SERVICE service_choice,
 304              error_function pFunction)
 305          {
 306   1          if (service_choice < MAX_BACNET_CONFIRMED_SERVICE)
 307   1              Error_Function[service_choice] = pFunction;
 308   1      }
 309          
 310          static abort_function Abort_Function;
 311          
 312          void apdu_set_abort_handler(
 313              abort_function pFunction)
 314          {
 315   1          Abort_Function = pFunction;
 316   1      }
 317          
 318          static reject_function Reject_Function;
 319          
 320          void apdu_set_reject_handler(
 321              reject_function pFunction)
 322          {
 323   1          Reject_Function = pFunction;
 324   1      }
 325          
 326          uint16_t apdu_decode_confirmed_service_request(
 327              uint8_t * apdu,     /* APDU data */
 328              uint16_t apdu_len,
 329              BACNET_CONFIRMED_SERVICE_DATA * service_data,
 330              uint8_t * service_choice,
 331              uint8_t ** service_request,
 332              uint16_t * service_request_len)
 333          {
 334   1          uint16_t len = 0;   /* counts where we are in PDU */
 335   1      
 336   1          service_data->segmented_message = (apdu[0] & BIT3) ? true : false;
 337   1          service_data->more_follows = (apdu[0] & BIT2) ? true : false;
 338   1          service_data->segmented_response_accepted =
 339   1              (apdu[0] & BIT1) ? true : false;
 340   1          service_data->max_segs = decode_max_segs(apdu[1]);
 341   1          service_data->max_resp = decode_max_apdu(apdu[1]);
 342   1          service_data->invoke_id = apdu[2];
 343   1          len = 3;
 344   1          if (service_data->segmented_message) {
 345   2              service_data->sequence_number = apdu[len++];
 346   2              service_data->proposed_window_number = apdu[len++];
 347   2          }
 348   1          *service_choice = apdu[len++];
 349   1          *service_request = &apdu[len];
 350   1          *service_request_len = apdu_len - len;
 351   1      
 352   1          return len;
 353   1      }
 354          
 355          uint16_t apdu_timeout(
 356              void)
 357          {
 358   1          return Timeout_Milliseconds;
 359   1      }
 360          
 361          void apdu_timeout_set(
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 7   

 362              uint16_t milliseconds)
 363          {
 364   1          Timeout_Milliseconds = milliseconds;
 365   1      }
 366          
 367          uint8_t apdu_retries(
 368              void)
 369          {
 370   1          return Number_Of_Retries;
 371   1      }
 372          
 373          void apdu_retries_set(
 374              uint8_t value)
 375          {
 376   1          Number_Of_Retries = value;
 377   1      }
 378          
 379          
 380          /* When network communications are completely disabled,
 381             only DeviceCommunicationControl and ReinitializeDevice APDUs
 382             shall be processed and no messages shall be initiated.
 383             When the initiation of communications is disabled, 
 384             all APDUs shall be processed and responses returned as 
 385             required... */
 386          static bool apdu_confirmed_dcc_disabled(
 387              uint8_t service_choice)
 388          {
 389   1          bool status = false;
 390   1      
 391   1          if (dcc_communication_disabled()) {
 392   2              switch (service_choice) {
 393   3                  case SERVICE_CONFIRMED_DEVICE_COMMUNICATION_CONTROL:
 394   3                  case SERVICE_CONFIRMED_REINITIALIZE_DEVICE:
 395   3                      break;
 396   3                  default:
 397   3                      status = true;
 398   3                      break;
 399   3              }
 400   2          }
 401   1      
 402   1          return status;
 403   1      }
 404          
 405          /* When network communications are completely disabled,
 406             only DeviceCommunicationControl and ReinitializeDevice APDUs
 407             shall be processed and no messages shall be initiated. */
 408          /* If the request is valid and the 'Enable/Disable' parameter is
 409             DISABLE_INITIATION, the responding BACnet-user shall
 410             discontinue the initiation of messages except for I-Am
 411             requests issued in accordance with the Who-Is service procedure.*/
 412          static bool apdu_unconfirmed_dcc_disabled(
 413              uint8_t service_choice)
 414          {
 415   1          bool status = false;
 416   1      
 417   1          if (dcc_communication_disabled()) {
 418   2              /* there are no Unconfirmed messages that 
 419   2                 can be processed in this state */
 420   2              status = true;
 421   2          } else if (dcc_communication_initiation_disabled()) {
 422   2              /* WhoIs will be processed and I-Am initiated as response. */
 423   2              switch (service_choice) {
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 8   

 424   3                  case SERVICE_UNCONFIRMED_WHO_IS:
 425   3                      break;
 426   3                  default:
 427   3                      status = true;
 428   3                      break;
 429   3              }
 430   2          }
 431   1      
 432   1          return status;
 433   1      }
 434          
 435          /** Process the APDU header and invoke the appropriate service handler
 436           * to manage the received request.
 437           * Almost all requests and ACKs invoke this function.
 438           * @ingroup MISCHNDLR
 439           *
 440           * @param src [in] The BACNET_ADDRESS of the message's source.
 441           * @param apdu [in] The apdu portion of the request, to be processed.
 442           * @param apdu_len [in] The total (remaining) length of the apdu.
 443           */
 444          void apdu_handler(BACNET_ADDRESS * src, uint8_t * apdu, uint16_t apdu_len)  /* APDU data */
 445          {
 446   1          BACNET_CONFIRMED_SERVICE_DATA service_data = { 0 };
 447   1          BACNET_CONFIRMED_SERVICE_ACK_DATA service_ack_data = { 0 };
 448   1          uint8_t invoke_id = 0;
 449   1          uint8_t service_choice = 0;
 450   1          uint8_t *service_request = NULL;
 451   1          uint16_t service_request_len = 0;
 452   1          int len = 0;        /* counts where we are in PDU */
 453   1          uint8_t tag_number = 0;
 454   1          uint32_t len_value = 0;
 455   1          uint32_t error_code = 0;
 456   1          uint32_t error_class = 0;
 457   1          uint8_t reason = 0;
 458   1          bool server = false;
 459   1      
 460   1          if (apdu) {
 461   2              /* PDU Type */
 462   2              switch (apdu[0] & 0xF0) {
 463   3                  case PDU_TYPE_CONFIRMED_SERVICE_REQUEST:
 464   3                      len =
 465   3                          (int) apdu_decode_confirmed_service_request(&apdu[0],
 466   3                          apdu_len, &service_data, &service_choice, &service_request,
 467   3                          &service_request_len);
 468   3                      if (apdu_confirmed_dcc_disabled(service_choice)) {
 469   4                          /* When network communications are completely disabled,
 470   4                             only DeviceCommunicationControl and ReinitializeDevice APDUs
 471   4                             shall be processed and no messages shall be initiated. */
 472   4                          break;
 473   4                      }
 474   3                      if ((service_choice < MAX_BACNET_CONFIRMED_SERVICE) &&
 475   3                          (Confirmed_Function[service_choice])){
 476   4      
 477   4                      //    Confirmed_Function[service_choice] (service_request,
 478   4                      //        service_request_len, src, &service_data);
 479   4                                       }
 480   3                      else if (Unrecognized_Service_Handler) {
 481   4                                                      
 482   4                    //      Unrecognized_Service_Handler(service_request,
 483   4                    //          service_request_len, src, &service_data);
 484   4                      }
 485   3                                      break;
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 9   

 486   3                  case PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST:
 487   3                      service_choice = apdu[1];
 488   3                      service_request = &apdu[2];
 489   3                      service_request_len = apdu_len - 2;
 490   3                      if (apdu_unconfirmed_dcc_disabled(service_choice)) {
 491   4                          /* When network communications are disabled,
 492   4                             only DeviceCommunicationControl and ReinitializeDevice APDUs
 493   4                             shall be processed and no messages shall be initiated.
 494   4                             If communications have been initiation disabled, then
 495   4                             WhoIs may be processed. */
 496   4                          break;
 497   4                      }
 498   3                      if (service_choice < MAX_BACNET_UNCONFIRMED_SERVICE) {
 499   4                          if (Unconfirmed_Function[service_choice]){
 500   5                       //       Unconfirmed_Function[service_choice] (service_request,
 501   5                       //           service_request_len, src);
 502   5                                              }
 503   4                      }
 504   3                      break;
 505   3                  case PDU_TYPE_SIMPLE_ACK:
 506   3                      invoke_id = apdu[1];
 507   3                      service_choice = apdu[2];
 508   3                      switch (service_choice) {
 509   4                          case SERVICE_CONFIRMED_ACKNOWLEDGE_ALARM:
 510   4                          case SERVICE_CONFIRMED_COV_NOTIFICATION:
 511   4                          case SERVICE_CONFIRMED_EVENT_NOTIFICATION:
 512   4                          case SERVICE_CONFIRMED_SUBSCRIBE_COV:
 513   4                          case SERVICE_CONFIRMED_SUBSCRIBE_COV_PROPERTY:
 514   4                          case SERVICE_CONFIRMED_LIFE_SAFETY_OPERATION:
 515   4                              /* Object Access Services */
 516   4                          case SERVICE_CONFIRMED_ADD_LIST_ELEMENT:
 517   4                          case SERVICE_CONFIRMED_REMOVE_LIST_ELEMENT:
 518   4                          case SERVICE_CONFIRMED_DELETE_OBJECT:
 519   4                          case SERVICE_CONFIRMED_WRITE_PROPERTY:
 520   4                          case SERVICE_CONFIRMED_WRITE_PROP_MULTIPLE:
 521   4                              /* Remote Device Management Services */
 522   4                          case SERVICE_CONFIRMED_DEVICE_COMMUNICATION_CONTROL:
 523   4                          case SERVICE_CONFIRMED_REINITIALIZE_DEVICE:
 524   4                          case SERVICE_CONFIRMED_TEXT_MESSAGE:
 525   4                              /* Virtual Terminal Services */
 526   4                          case SERVICE_CONFIRMED_VT_CLOSE:
 527   4                              /* Security Services */
 528   4                          case SERVICE_CONFIRMED_REQUEST_KEY:
 529   4                              if (Confirmed_ACK_Function[service_choice] != NULL) {
 530   5                                  ((confirmed_simple_ack_function)
 531   5                                      Confirmed_ACK_Function[service_choice]) (src,
 532   5                                      invoke_id);
 533   5                              }
 534   4                              tsm_free_invoke_id(invoke_id);
 535   4                              break;
 536   4                          default:
 537   4                              break;
 538   4                      }
 539   3                      break;
 540   3                  case PDU_TYPE_COMPLEX_ACK:
 541   3                      service_ack_data.segmented_message =
 542   3                          (apdu[0] & BIT3) ? true : false;
 543   3                      service_ack_data.more_follows =
 544   3                          (apdu[0] & BIT2) ? true : false;
 545   3                      invoke_id = service_ack_data.invoke_id = apdu[1];
 546   3                      len = 2;
 547   3                      if (service_ack_data.segmented_message) {
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 10  

 548   4                          service_ack_data.sequence_number = apdu[len++];
 549   4                          service_ack_data.proposed_window_number = apdu[len++];
 550   4                      }
 551   3                      service_choice = apdu[len++];
 552   3                      service_request = &apdu[len];
 553   3                      service_request_len = apdu_len - (uint16_t) len;
 554   3                      switch (service_choice) {
 555   4                          case SERVICE_CONFIRMED_GET_ALARM_SUMMARY:
 556   4                          case SERVICE_CONFIRMED_GET_ENROLLMENT_SUMMARY:
 557   4                          case SERVICE_CONFIRMED_GET_EVENT_INFORMATION:
 558   4                              /* File Access Services */
 559   4                          case SERVICE_CONFIRMED_ATOMIC_READ_FILE:
 560   4                          case SERVICE_CONFIRMED_ATOMIC_WRITE_FILE:
 561   4                              /* Object Access Services */
 562   4                          case SERVICE_CONFIRMED_CREATE_OBJECT:
 563   4                          case SERVICE_CONFIRMED_READ_PROPERTY:
 564   4                          case SERVICE_CONFIRMED_READ_PROP_CONDITIONAL:
 565   4                          case SERVICE_CONFIRMED_READ_PROP_MULTIPLE:
 566   4                          case SERVICE_CONFIRMED_READ_RANGE:
 567   4                          case SERVICE_CONFIRMED_PRIVATE_TRANSFER:
 568   4                              /* Virtual Terminal Services */
 569   4                          case SERVICE_CONFIRMED_VT_OPEN:
 570   4                          case SERVICE_CONFIRMED_VT_DATA:
 571   4                              /* Security Services */
 572   4                          case SERVICE_CONFIRMED_AUTHENTICATE:
 573   4                              if (Confirmed_ACK_Function[service_choice] != NULL) {
 574   5                           //       (Confirmed_ACK_Function[service_choice])
 575   5                            //          (service_request, service_request_len, src,
 576   5                            //          &service_ack_data);
 577   5                              }
 578   4                              tsm_free_invoke_id(invoke_id);
 579   4                              break;
 580   4                          default:
 581   4                              break;
 582   4                      }
 583   3                      break;
 584   3                  case PDU_TYPE_SEGMENT_ACK:
 585   3                      /* FIXME: what about a denial of service attack here?
 586   3                         we could check src to see if that matched the tsm */
 587   3                      tsm_free_invoke_id(invoke_id);
 588   3                      break;
 589   3                  case PDU_TYPE_ERROR:
 590   3                      invoke_id = apdu[1];
 591   3                      service_choice = apdu[2];
 592   3                      len = 3;
 593   3      
 594   3                      /* FIXME: Currently special case for C_P_T but there are others which may
 595   3                         need consideration such as ChangeList-Error, CreateObject-Error,
 596   3                         WritePropertyMultiple-Error and VTClose_Error but they may be left as
 597   3                         is for now until support for these services is added */
 598   3      
 599   3                      if (service_choice == SERVICE_CONFIRMED_PRIVATE_TRANSFER) {     /* skip over opening tag 0
             - */
 600   4                          if (decode_is_opening_tag_number(&apdu[len], 0)) {
 601   5                              len++;  /* a tag number of 0 is not extended so only one octet */
 602   5                          }
 603   4                      }
 604   3                      len +=
 605   3                          decode_tag_number_and_value(&apdu[len], &tag_number,
 606   3                          &len_value);
 607   3                      /* FIXME: we could validate that the tag is enumerated... */
 608   3                      len += decode_enumerated(&apdu[len], len_value, &error_class);
C51 COMPILER V9.06   APDU                                                                  01/28/2013 13:37:43 PAGE 11  

 609   3                      len +=
 610   3                          decode_tag_number_and_value(&apdu[len], &tag_number,
 611   3                          &len_value);
 612   3                      /* FIXME: we could validate that the tag is enumerated... */
 613   3                      len += decode_enumerated(&apdu[len], len_value, &error_code);
 614   3      
 615   3                      if (service_choice == SERVICE_CONFIRMED_PRIVATE_TRANSFER) {     /* skip over closing tag 0
             - */
 616   4                          if (decode_is_closing_tag_number(&apdu[len], 0)) {
 617   5                              len++;  /* a tag number of 0 is not extended so only one octet */
 618   5                          }
 619   4                      }
 620   3                      if (service_choice < MAX_BACNET_CONFIRMED_SERVICE) {
 621   4                          if (Error_Function[service_choice]){
 622   5                         //     Error_Function[service_choice] (src, invoke_id,
 623   5                         //         (BACNET_ERROR_CLASS) error_class,
 624   5                         //        (BACNET_ERROR_CODE) error_code);
 625   5                              }
 626   4                                      }
 627   3                      tsm_free_invoke_id(invoke_id);
 628   3                      break;
 629   3                  case PDU_TYPE_REJECT:
 630   3                      invoke_id = apdu[1];
 631   3                      reason = apdu[2];
 632   3                      if (Reject_Function){
 633   4                      //    Reject_Function(src, invoke_id, reason);
 634   4                                      }
 635   3                      tsm_free_invoke_id(invoke_id);
 636   3                      break;
 637   3                  case PDU_TYPE_ABORT:
 638   3                      server = apdu[0] & 0x01;
 639   3                      invoke_id = apdu[1];
 640   3                      reason = apdu[2];
 641   3                      if (Abort_Function){
 642   4                      //    Abort_Function(src, invoke_id, reason, server);
 643   4                      }
 644   3                                      tsm_free_invoke_id(invoke_id);
 645   3                      break;
 646   3                  default:
 647   3                      break;
 648   3              }
 649   2          }
 650   1          return;
 651   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3145    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =    352      92
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

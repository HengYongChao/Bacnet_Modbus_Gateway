C51 COMPILER V9.06   BIP                                                                   01/28/2013 13:35:44 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE BIP
OBJECT MODULE PLACED IN .\bip.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\bacnet\bip.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) IN
                    -CDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;..\
                    -SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\buf
                    -fer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..\S
                    -rc\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\bip.lst) OBJECT(.\bip.obj)

line level    source

   1          /*####COPYRIGHTBEGIN####
   2           -------------------------------------------
   3           Copyright (C) 2005 Steve Karg
   4          
   5           This program is free software; you can redistribute it and/or
   6           modify it under the terms of the GNU General Public License
   7           as published by the Free Software Foundation; either version 2
   8           of the License, or (at your option) any later version.
   9          
  10           This program is distributed in the hope that it will be useful,
  11           but WITHOUT ANY WARRANTY; without even the implied warranty of
  12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13           GNU General Public License for more details.
  14          
  15           You should have received a copy of the GNU General Public License
  16           along with this program; if not, write to:
  17           The Free Software Foundation, Inc.
  18           59 Temple Place - Suite 330
  19           Boston, MA  02111-1307, USA.
  20          
  21           As a special exception, if other files instantiate templates or
  22           use macros or inline functions from this file, or you compile
  23           this file and link it with other works to produce a work based
  24           on this file, this file does not by itself cause the resulting
  25           work to be covered by the GNU General Public License. However
  26           the source code for this file must still be made available in
  27           accordance with section (3) of the GNU General Public License.
  28          
  29           This exception does not invalidate any other reasons why a work
  30           based on this file might be covered by the GNU General Public
  31           License.
  32           -------------------------------------------
  33          ####COPYRIGHTEND####*/
  34          
  35          #include <stdint.h>     /* for standard integer types uint8_t etc. */
  36          #include <stdbool.h>    /* for the standard bool type. */
  37          #include "../include/bacdcode.h"
  38          #include "../include/bacint.h"
  39          #include "../include/bip.h"
  40          #include "../include/bvlc.h"
  41          #include "../include/net.h"        /* custom per port */
  42          #include <string.h>
  43          //#include <WinSock.h>
  44          
  45          #if PRINT_ENABLED
              #include <stdio.h>      /* for standard i/o, like printing */
              #endif
  48          
  49          /** @file bip.c  Configuration and Operations for BACnet/IP */
  50          
  51          static int BIP_Socket = -1;
C51 COMPILER V9.06   BIP                                                                   01/28/2013 13:35:44 PAGE 2   

  52          /* port to use - stored in network byte order */
  53          static uint16_t BIP_Port = 0;   /* this will force initialization in demos */
  54          /* IP Address - stored in network byte order */
  55          static struct in_addr BIP_Address;
  56          /* Broadcast Address - stored in network byte order */
  57          static struct in_addr BIP_Broadcast_Address;
  58          
  59          /** Setter for the BACnet/IP socket handle.
  60           *
  61           * @param sock_fd [in] Handle for the BACnet/IP socket.
  62           */
  63          void bip_set_socket(
  64              int sock_fd)
  65          {
  66   1          BIP_Socket = sock_fd;
  67   1      }
  68          
  69          /** Getter for the BACnet/IP socket handle.
  70           *
  71           * @return The handle to the BACnet/IP socket.
  72           */
  73          int bip_socket(
  74              void)
  75          {
  76   1          return BIP_Socket;
  77   1      }
  78          
  79          bool bip_valid(
  80              void)
  81          {
  82   1          return (BIP_Socket != -1);
  83   1      }
  84          
  85          void bip_set_addr(
  86              uint32_t net_address)
  87          {       /* in network byte order */
  88   1          BIP_Address.s_addr = net_address;
  89   1      }
  90          
  91          /* returns network byte order */
  92          uint32_t bip_get_addr(
  93              void)
  94          {
  95   1          return BIP_Address.s_addr;
  96   1      }
  97          
  98          void bip_set_broadcast_addr(
  99              uint32_t net_address)
 100          {       /* in network byte order */
 101   1          BIP_Broadcast_Address.s_addr = net_address;
 102   1      }
 103          
 104          /* returns network byte order */
 105          uint32_t bip_get_broadcast_addr(
 106              void)
 107          {
 108   1          return BIP_Broadcast_Address.s_addr;
 109   1      }
 110          
 111          
 112          void bip_set_port(
 113              uint16_t port)
C51 COMPILER V9.06   BIP                                                                   01/28/2013 13:35:44 PAGE 3   

 114          {       /* in network byte order */
 115   1          BIP_Port = port;
 116   1      }
 117          
 118          /* returns network byte order */
 119          uint16_t bip_get_port(
 120              void)
 121          {
 122   1          return BIP_Port;
 123   1      }
 124          
 125          static int bip_decode_bip_address(
 126              BACNET_ADDRESS * bac_addr,
 127              struct in_addr *address,    /* in network format */
 128              uint16_t * port)
 129          {       /* in network format */
 130   1          int len = 0;
 131   1      
 132   1          if (bac_addr) {
 133   2              memcpy(&address->s_addr, &bac_addr->mac[0], 4);
 134   2              memcpy(port, &bac_addr->mac[4], 2);
 135   2              len = 6;
 136   2          }
 137   1      
 138   1          return len;
 139   1      }
 140          
 141          /** Function to send a packet out the BACnet/IP socket (Annex J).
 142           * @ingroup DLBIP
 143           *
 144           * @param dest [in] Destination address (may encode an IP address and port #).
 145           * @param npdu_data [in] The NPDU header (Network) information (not used).
 146           * @param pdu [in] Buffer of data to be sent - may be null (why?).
 147           * @param pdu_len [in] Number of bytes in the pdu buffer.
 148           * @return Number of bytes sent on success, negative number on failure.
 149           */
 150          int bip_send_pdu(
 151              BACNET_ADDRESS * dest,      /* destination address */
 152              BACNET_NPDU_DATA * npdu_data,       /* network information */
 153              uint8_t * pdu,      /* any data to be sent - may be null */
 154              unsigned pdu_len)
 155          {       /* number of bytes of data */
 156   1          struct sockaddr_in bip_dest;
 157   1          uint8_t mtu[MAX_MPDU] = { 0 };
 158   1          int mtu_len = 0;
 159   1          int bytes_sent = 0;
 160   1          /* addr and port in host format */
 161   1          struct in_addr address;
 162   1          uint16_t port = 0;
 163   1      
 164   1          (void) npdu_data;
*** WARNING C275 IN LINE 164 OF ..\src\bacnet\bip.c: expression with possibly no effect
 165   1          /* assumes that the driver has already been initialized */
 166   1          if (BIP_Socket < 0) {
 167   2              return BIP_Socket;
 168   2          }
 169   1      
 170   1          mtu[0] = BVLL_TYPE_BACNET_IP;
 171   1          bip_dest.sin_family = AF_INET;
 172   1          if (dest->net == BACNET_BROADCAST_NETWORK) {
 173   2              /* broadcast */
 174   2              address.s_addr = BIP_Broadcast_Address.s_addr;
C51 COMPILER V9.06   BIP                                                                   01/28/2013 13:35:44 PAGE 4   

 175   2              port = BIP_Port;
 176   2              mtu[1] = BVLC_ORIGINAL_BROADCAST_NPDU;
 177   2          } else if (dest->mac_len == 6) {
 178   2              bip_decode_bip_address(dest, &address, &port);
 179   2              mtu[1] = BVLC_ORIGINAL_UNICAST_NPDU;
 180   2          } else {
 181   2              /* invalid address */
 182   2              return -1;
 183   2          }
 184   1          bip_dest.sin_addr.s_addr = address.s_addr;
 185   1          bip_dest.sin_port = port;
 186   1          memset(&(bip_dest.sin_zero), '\0', 8);
 187   1          mtu_len = 2;
 188   1          mtu_len +=
 189   1              encode_unsigned16(&mtu[mtu_len],
 190   1              (uint16_t) (pdu_len + 4 /*inclusive */ ));
 191   1          memcpy(&mtu[mtu_len], pdu, pdu_len);
 192   1          mtu_len += pdu_len;
 193   1      
 194   1          /* Send the packet */
 195   1          bytes_sent =
 196   1              sendto(BIP_Socket, (char *) mtu, mtu_len, 0,
*** WARNING C206 IN LINE 196 OF ..\src\bacnet\bip.c: 'sendto': missing function-prototype
*** ERROR C267 IN LINE 196 OF ..\src\bacnet\bip.c: 'sendto': requires ANSI-style prototype
 197   1              (struct sockaddr *) &bip_dest, sizeof(struct sockaddr));
 198   1      
 199   1          return bytes_sent;
 200   1      }
 201          
 202          /** Implementation of the receive() function for BACnet/IP; receives one
 203           * packet, verifies its BVLC header, and removes the BVLC header from
 204           * the PDU data before returning.
 205           *
 206           * @param src [out] Source of the packet - who should receive any response.
 207           * @param pdu [out] A buffer to hold the PDU portion of the received packet,
 208           *                                      after the BVLC portion has been stripped off.
 209           * @param max_pdu [in] Size of the pdu[] buffer.
 210           * @param timeout [in] The number of milliseconds to wait for a packet.
 211           * @return The number of octets (remaining) in the PDU, or zero on failure.
 212           */
 213          uint16_t bip_receive(
 214              BACNET_ADDRESS * src,       /* source address */
 215              uint8_t * pdu,      /* PDU data */
 216              uint16_t max_pdu,   /* amount of space available in the PDU  */
 217              unsigned timeout)
 218          {
 219   1          int received_bytes = 0;
 220   1          uint16_t pdu_len = 0;       /* return value */
 221   1          fd_set read_fds;
*** ERROR C202 IN LINE 221 OF ..\src\bacnet\bip.c: 'fd_set': undefined identifier
*** ERROR C141 IN LINE 221 OF ..\src\bacnet\bip.c: syntax error near 'read_fds'
 222   1          int max = 0;
*** ERROR C141 IN LINE 222 OF ..\src\bacnet\bip.c: syntax error near 'int'
*** ERROR C202 IN LINE 222 OF ..\src\bacnet\bip.c: 'max': undefined identifier
 223   1          struct timeval select_timeout;
*** ERROR C141 IN LINE 223 OF ..\src\bacnet\bip.c: syntax error near 'struct'
*** ERROR C202 IN LINE 223 OF ..\src\bacnet\bip.c: 'timeval': undefined identifier
 224   1          struct sockaddr_in sin = { 0 };
*** ERROR C141 IN LINE 224 OF ..\src\bacnet\bip.c: syntax error near 'struct'
*** ERROR C202 IN LINE 224 OF ..\src\bacnet\bip.c: 'sockaddr_in': undefined identifier
*** ERROR C141 IN LINE 224 OF ..\src\bacnet\bip.c: syntax error near '{'
*** ERROR C141 IN LINE 224 OF ..\src\bacnet\bip.c: syntax error near '}'
C51 COMPILER V9.06   BIP                                                                   01/28/2013 13:35:44 PAGE 5   

 225   1          socklen_t sin_len = sizeof(sin);
*** ERROR C141 IN LINE 225 OF ..\src\bacnet\bip.c: syntax error near 'socklen_t'
 226   1          uint16_t i = 0;
*** ERROR C141 IN LINE 226 OF ..\src\bacnet\bip.c: syntax error near 'uint16_t'
*** ERROR C202 IN LINE 226 OF ..\src\bacnet\bip.c: 'i': undefined identifier
 227   1          int function = 0;
*** ERROR C141 IN LINE 227 OF ..\src\bacnet\bip.c: syntax error near 'int'
*** ERROR C202 IN LINE 227 OF ..\src\bacnet\bip.c: 'function': undefined identifier
 228   1      
 229   1          /* Make sure the socket is open */
 230   1          if (BIP_Socket < 0)
 231   1              return 0;
 232   1      
 233   1          /* we could just use a non-blocking socket, but that consumes all
 234   1             the CPU time.  We can use a timeout; it is only supported as
 235   1             a select. */
 236   1          if (timeout >= 1000) {
 237   2              select_timeout.tv_sec = timeout / 1000;
 238   2              select_timeout.tv_usec =
 239   2                  1000 * (timeout - select_timeout.tv_sec * 1000);
 240   2          } else {
 241   2              select_timeout.tv_sec = 0;
 242   2              select_timeout.tv_usec = 1000 * timeout;
 243   2          }
 244   1          FD_ZERO(&read_fds);
*** ERROR C202 IN LINE 244 OF ..\src\bacnet\bip.c: 'read_fds': undefined identifier
 245   1          FD_SET(BIP_Socket, &read_fds);
 246   1          max = BIP_Socket;
 247   1          /* see if there is a packet for us */
 248   1          if (select(max + 1, &read_fds, NULL, NULL, &select_timeout) > 0)
 249   1              received_bytes =
 250   1                  recvfrom(BIP_Socket, (char *) &pdu[0], max_pdu, 0,
 251   1                  (struct sockaddr *) &sin, &sin_len);
 252   1          else
 253   1              return 0;
 254   1      
 255   1          /* See if there is a problem */
 256   1          if (received_bytes < 0) {
 257   2              return 0;
 258   2          }
 259   1      
 260   1          /* no problem, just no bytes */
 261   1          if (received_bytes == 0)
 262   1              return 0;
 263   1      
 264   1          /* the signature of a BACnet/IP packet */
 265   1          if (pdu[0] != BVLL_TYPE_BACNET_IP)
 266   1              return 0;
 267   1      
 268   1          if (bvlc_for_non_bbmd(&sin, pdu, received_bytes) > 0) {
 269   2              /* Handled, usually with a NACK. */
 270   2      #if PRINT_ENABLED
                      fprintf(stderr, "BIP: BVLC discarded!\n");
              #endif
 273   2              return 0;
 274   2          }
 275   1      
 276   1          function = bvlc_get_function_code();        /* aka, pdu[1] */
 277   1          if ((function == BVLC_ORIGINAL_UNICAST_NPDU) ||
 278   1              (function == BVLC_ORIGINAL_BROADCAST_NPDU)) {
 279   2              /* ignore messages from me */
 280   2              if ((sin.sin_addr.s_addr == BIP_Address.s_addr) &&
C51 COMPILER V9.06   BIP                                                                   01/28/2013 13:35:44 PAGE 6   

 281   2                  (sin.sin_port == BIP_Port)) {
 282   3                  pdu_len = 0;
 283   3      #if 0
                          fprintf(stderr, "BIP: src is me. Discarded!\n");
              #endif
 286   3              } else {
 287   3                  /* data in src->mac[] is in network format */
 288   3                  src->mac_len = 6;
 289   3                  memcpy(&src->mac[0], &sin.sin_addr.s_addr, 4);
 290   3                  memcpy(&src->mac[4], &sin.sin_port, 2);
 291   3                  /* FIXME: check destination address */
 292   3                  /* see if it is broadcast or for us */
 293   3                  /* decode the length of the PDU - length is inclusive of BVLC */
 294   3                  (void) decode_unsigned16(&pdu[2], &pdu_len);
 295   3                  /* subtract off the BVLC header */
 296   3                  pdu_len -= 4;
 297   3                  if (pdu_len < max_pdu) {
 298   4      #if 0
                              fprintf(stderr, "BIP: NPDU[%hu]:", pdu_len);
              #endif
 301   4                      /* shift the buffer to return a valid PDU */
 302   4                      for (i = 0; i < pdu_len; i++) {
 303   5                          pdu[i] = pdu[4 + i];
 304   5      #if 0
                                  fprintf(stderr, "%02X ", pdu[i]);
              #endif
 307   5                      }
 308   4      #if 0
                              fprintf(stderr, "\n");
              #endif
 311   4                  }
 312   3                  /* ignore packets that are too large */
 313   3                  /* clients should check my max-apdu first */
 314   3                  else {
 315   4                      pdu_len = 0;
 316   4      #if PRINT_ENABLED
                              fprintf(stderr, "BIP: PDU too large. Discarded!.\n");
              #endif
 319   4                  }
 320   3              }
 321   2          } else if (function == BVLC_FORWARDED_NPDU) {
 322   2              memcpy(&sin.sin_addr.s_addr, &pdu[4], 4);
 323   2              memcpy(&sin.sin_port, &pdu[8], 2);
 324   2              if ((sin.sin_addr.s_addr == BIP_Address.s_addr) &&
 325   2                  (sin.sin_port == BIP_Port)) {
 326   3                  /* ignore messages from me */
 327   3                  pdu_len = 0;
 328   3              } else {
 329   3                  /* data in src->mac[] is in network format */
 330   3                  src->mac_len = 6;
 331   3                  memcpy(&src->mac[0], &sin.sin_addr.s_addr, 4);
 332   3                  memcpy(&src->mac[4], &sin.sin_port, 2);
 333   3                  /* FIXME: check destination address */
 334   3                  /* see if it is broadcast or for us */
 335   3                  /* decode the length of the PDU - length is inclusive of BVLC */
 336   3                  (void) decode_unsigned16(&pdu[2], &pdu_len);
 337   3                  /* subtract off the BVLC header */
 338   3                  pdu_len -= 10;
 339   3                  if (pdu_len < max_pdu) {
 340   4                      /* shift the buffer to return a valid PDU */
 341   4                      for (i = 0; i < pdu_len; i++) {
 342   5                          pdu[i] = pdu[4 + 6 + i];
C51 COMPILER V9.06   BIP                                                                   01/28/2013 13:35:44 PAGE 7   

 343   5                      }
 344   4                  } else {
 345   4                      /* ignore packets that are too large */
 346   4                      /* clients should check my max-apdu first */
 347   4                      pdu_len = 0;
 348   4                  }
 349   3              }
 350   2          }
 351   1      
 352   1          return pdu_len;
 353   1      }
 354          
 355          void bip_get_my_address(
 356              BACNET_ADDRESS * my_address)
 357          {
 358   1          int i = 0;
 359   1      
 360   1          if (my_address) {
 361   2              my_address->mac_len = 6;
 362   2              memcpy(&my_address->mac[0], &BIP_Address.s_addr, 4);
 363   2              memcpy(&my_address->mac[4], &BIP_Port, 2);
 364   2              my_address->net = 0;    /* local only, no routing */
 365   2              my_address->len = 0;    /* no SLEN */
 366   2              for (i = 0; i < MAX_MAC_LEN; i++) {
 367   3                  /* no SADR */
 368   3                  my_address->adr[i] = 0;
 369   3              }
 370   2          }
 371   1      
 372   1          return;
 373   1      }
 374          
 375          void bip_get_broadcast_address(
 376              BACNET_ADDRESS * dest)
 377          {       /* destination address */
 378   1          int i = 0;  /* counter */
 379   1      
 380   1          if (dest) {
 381   2              dest->mac_len = 6;
 382   2              memcpy(&dest->mac[0], &BIP_Broadcast_Address.s_addr, 4);
 383   2              memcpy(&dest->mac[4], &BIP_Port, 2);
 384   2              dest->net = BACNET_BROADCAST_NETWORK;
 385   2              dest->len = 0;  /* no SLEN */
 386   2              for (i = 0; i < MAX_MAC_LEN; i++) {
 387   3                  /* no SADR */
 388   3                  dest->adr[i] = 0;
 389   3              }
 390   2          }
 391   1      
 392   1          return;
 393   1      }

C51 COMPILATION COMPLETE.  2 WARNING(S),  17 ERROR(S)

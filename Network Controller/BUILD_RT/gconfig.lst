C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE GCONFIG
OBJECT MODULE PLACED IN .\gconfig.obj
COMPILER INVOKED BY: E:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\management\gconfig.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X
                    -6020) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\h
                    -sur\;..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..
                    -\SRC\buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX110
                    -00\;..\Src\FreeRTOSSource\include\;..\Src\schedule\;..\src\bacnet;..\src\include;..\src\LCD;..\src\version;..\src\modbus
                    -TCP;..\src\gs2e;..\src\adpter1;..\src\scan;..\src\gsm;..\src\dyndns) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\gconf
                    -ig.lst) OBJECT(.\gconfig.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2006       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11           /*============================================================================
  12           * Module Name: gconfig.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: gconfig.c,v $
  18           *
  19           *=============================================================================
  20           */
  21          
  22          /* INCLUDE FILE DECLARATIONS */
  23          #include "adapter.h"
  24          #include "gconfig.h"
  25          
  26          #include "gs2e.h"
  27          #include "tcpip.h"
  28          #include "mstimer.h"
  29          #include "stoe.h"
  30          #include "uart.h"
  31          #include "reg80390.h"
  32          #include "printd.h"
  33          #include "ax11000.h"
  34          #include "hsuart.h"
  35          #include "filesys.h"
  36          
  37          #include <absacc.h>
  38          #include <string.h>
  39          
  40          #include "main.h"
  41          #if (INCLUDE_DNS_CLIENT)
              #include "dnsc.h"
              #endif
  44          /* NAMING CONSTANT DECLARATIONS */
  45          #define DEVICE_STATUS_IDLE                      0
  46          #define DEVICE_STATUS_CONNECTED         1
  47          #define ENABLE_FIRMWARE_UPGRADE         0x5A
  48          
  49          /* MACRO DECLARATIONS */
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 2   

  50          
  51          /* TYPE DECLARATIONS */
  52          typedef U8_T (*pFlashParaData)(U8_T * addr, U16_T len);
  53          
  54          /* GLOBAL VARIABLES DECLARATIONS */
  55          GCONFIG_GID XDATA GCONFIG_Gid = {'A','S','I','X','X','I','S','A'};
  56          
  57          /* LOCAL VARIABLES DECLARATIONS */
  58          U8_T XDATA gconfig_SysClock;
  59          GCONFIG_CFG_DATA XDATA gconfig_ConfigData;
  60          U8_T IDATA FirmwareUpgradeFlag[4] _at_ 0x31;
  61          static GCONFIG_MAC_ADDR macAddr;
  62          
  63          U8_T XDATA gs2e_State;
  64          
  65          
  66          /* LOCAL SUBPROGRAM DECLARATIONS */
  67          static BOOL     gconfig_ReStoreParameter(U32_T addr, GCONFIG_CFG_DATA *pConfig, U16_T len);
  68          static BOOL gconfig_StoreParameter(GCONFIG_CFG_DATA *pSramBase, U16_T len);
  69          static U16_T gconfig_Checksum(U16_T *pBuf, U32_T length);
  70          static void     gconfig_DisplayConfigData(GCONFIG_CFG_DATA *pConfig);
  71          
  72          /*
  73           * ----------------------------------------------------------------------------
  74           * Function Name: GCONFIG_Task
  75           * Purpose: Main function
  76           * Params:
  77           * Returns:
  78           * Note:
  79           * ----------------------------------------------------------------------------
  80           */
  81          void GCONFIG_Task(void)
  82          {
  83   1      
  84   1      } /* End of GCONFIG_Task() */
  85          
  86          /*
  87           * ----------------------------------------------------------------------------
  88           * Function Name: GS2E_GetTaskState
  89           * Purpose: 
  90           * Params:
  91           * Returns:
  92           * Note:
  93           * ----------------------------------------------------------------------------
  94           */
  95          U8_T GS2E_GetTaskState(void)
  96          {
  97   1              return gs2e_State;
  98   1      } /* End of GS2E_GetTaskState() */
  99          /*
 100           * ----------------------------------------------------------------------------
 101           * Function Name: GS2E_SetTaskState
 102           * Purpose: 
 103           * Params:
 104           * Returns:
 105           * Note:
 106           * ----------------------------------------------------------------------------
 107           */
 108          void GS2E_SetTaskState(U8_T state)
 109          {
 110   1              gs2e_State = state;
 111   1      } /* End of GS2E_SetTaskState() */
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 3   

 112          
 113          
 114          
 115          /*
 116           * ----------------------------------------------------------------------------
 117           * Function Name: GCONFIG_Init
 118           * Purpose: Initialization
 119           * Params:
 120           * Returns:
 121           * Note:
 122           * ----------------------------------------------------------------------------
 123           */
 124          //void GCONFIG_Init(void)
 125          //{
 126          //      U16_T portCfg;
 127          //      U16_T baudRateDiv;
 128          //      U8_T  dataStopParityBits = 0;
 129          //      U16_T val;
 130          //      U8_T  flowCtrl, rs485;
 131          //      
 132          //      // Restore last-saved configuration if applicable       
 133          //      GS2E_SetTaskState(GS2E_STATE_IDLE);
 134          //    memcpy((char *)&macAddr, PNetStation->CurrStaAddr, MAC_ADDRESS_LEN);
 135          //      GCONFIG_ReadConfigData();
 136          //
 137          //      // UART 2 parameters setting
 138          //      portCfg = GCONFIG_GetSerialPort();
 139          //      
 140          //      gconfig_SysClock = AX11000_GetSysClk();
 141          //      
 142          //      val = (portCfg >> 11) & 0x001F;
 143          // 
 144          //      baudRateDiv = GCONFIG_GetBaudRate(val);
 145          //
 146          //      val = (portCfg >> 8) & 0x0007; 
 147          //      if (val == 0)           dataStopParityBits |= UR2_CHAR_5;
 148          //      else if (val == 1)      dataStopParityBits |= UR2_CHAR_6;
 149          //      else if (val == 2)      dataStopParityBits |= UR2_CHAR_7;
 150          //      else                            dataStopParityBits |= UR2_CHAR_8;
 151          //
 152          //      val = (portCfg >> 5) & 0x0007; 
 153          //      if (val == 0 || val == 1) dataStopParityBits |= UR2_PARITY_ENB;
 154          //      if (val == 1)                     dataStopParityBits |= UR2_EVEN_PARITY;
 155          //
 156          //      val = portCfg & 0x0003; 
 157          //      if (val == 0)   dataStopParityBits |= UR2_STOP_10;
 158          //      else                    dataStopParityBits |= UR2_STOP_15;
 159          //      
 160          //      val = (portCfg >> 2) & 0x0007; 
 161          //      if (val == 0)           flowCtrl = UR2_FLOW_CTRL_X;
 162          //      else if (val == 1)      flowCtrl = UR2_FLOW_CTRL_HW;
 163          //      else                            flowCtrl = UR2_FLOW_CTRL_NO;
 164          //
 165          //    rs485 = (UR2_DTR | UR2_RTS);
 166          //    val = GCONFIG_GetRs485Mode();
 167          //
 168          //    if (val == 1)
 169          //        rs485 |= UR2_RS485_RECEIVE;
 170          //    else if (val == 2)
 171          //        rs485 |= UR2_RS485_DRIVE;
 172          //    else if (val == 3)
 173          //        rs485 |= (UR2_RS485_DRIVE | UR2_RS485_RECEIVE);
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 4   

 174          //
 175          //      HSUR_Setup( baudRateDiv, 
 176          //                  dataStopParityBits, 
 177          //                              (UR2_RDI_ENB|UR2_RLSI_ENB|UR2_MSI_ENB),
 178          //                              (UR2_FIFO_MODE|UR2_RXFIFO_RST|UR2_TXFIFO_RST|UR2_TRIG_08), 
 179          //                              rs485);
 180          // 
 181          //      HSUR_SetFlowControl(flowCtrl);  
 182          //
 183          //} /* End of GCONFIG_Init() */
 184          
 185          /////////////////////////////////////////////////////////////////////////////////
 186          
 187          void GCONFIG_Init(void)
 188          {
 189   1              U16_T portCfg = 0;
 190   1              U16_T baudRateDiv = 0;
 191   1              U8_T  dataStopParityBits = 0;
 192   1              U16_T val = 0;
 193   1              U8_T  sysClock = 0; 
 194   1              U8_T  flowCtrl = 0;
 195   1      
 196   1      //      GCONFIG_PRINTD("GCONFIG_Init()...\n\r");
 197   1      
 198   1              // Restore last-saved configuration if applicable       
 199   1              GCONFIG_ReadConfigData();
 200   1      
 201   1      //      if (gconfig_ConfigData.FirmwareUpgradeMode == GCONFIG_FW_UPGRADE_ENABLE)
 202   1      //      {
 203   1      //              gconfig_ConfigData.FirmwareUpgradeMode = GCONFIG_FW_UPGRADE_DISABLE;
 204   1      //
 205   1      //              //GCONFIG_WriteConfigData();
 206   1      //      }
 207   1      
 208   1      } /* End of GCONFIG_Init() */
 209          
 210          
 211          /*
 212           * ----------------------------------------------------------------------------
 213           * Function Name: GCONFIG_SetConfigPacket
 214           * Purpose: 
 215           * Params:
 216           * Returns:
 217           * Note:
 218           * ----------------------------------------------------------------------------
 219           */
 220          void GCONFIG_SetConfigPacket(GCONFIG_CFG_PKT* pCfgPkt)
 221          {
 222   1              gconfig_ConfigData.Option = pCfgPkt->Option;
 223   1              gconfig_ConfigData.DevName = pCfgPkt->DevName;
 224   1              gconfig_ConfigData.Network = pCfgPkt->Network;
 225   1              gconfig_ConfigData.ServerStaticIP = pCfgPkt->ServerStaticIP;
 226   1              gconfig_ConfigData.ServerDataPktListenPort = pCfgPkt->ServerDataPktListenPort;
 227   1              gconfig_ConfigData.ServerMulticastListenPort = pCfgPkt->ServerMulticastListenPort;
 228   1              gconfig_ConfigData.ServerBroadcastListenPort = pCfgPkt->ServerBroadcastListenPort;
 229   1              gconfig_ConfigData.ClientDestIP = pCfgPkt->ClientDestIP;
 230   1              gconfig_ConfigData.ClientDestPort = pCfgPkt->ClientDestPort; 
 231   1              gconfig_ConfigData.Netmask = pCfgPkt->Netmask;
 232   1              gconfig_ConfigData.Gateway = pCfgPkt->Gateway;
 233   1              gconfig_ConfigData.Dns = pCfgPkt->Dns;
 234   1              gconfig_ConfigData.SerialPort = pCfgPkt->SerialPort;            
 235   1              gconfig_ConfigData.EthernetTxTimer = pCfgPkt->EthernetTxTimer;
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 5   

 236   1      
 237   1          gconfig_ConfigData.Rs485Mode = pCfgPkt->Rs485Mode;
 238   1          memcpy((char *)&gconfig_ConfigData.AccessibleIP[0], (char *)&pCfgPkt->AccessibleIP[0], (GCONFIG_ACCESS
             -IBLE_IP_NUM*4));
 239   1          memcpy((char *)&gconfig_ConfigData.Smtp, (char *)&pCfgPkt->Smtp, sizeof(GCONFIG_SMTP_CONFIG));
 240   1          memcpy((char *)&gconfig_ConfigData.DestHostName, (char *)&pCfgPkt->DestHostName, 36);
 241   1              
 242   1          gconfig_ConfigData.TftpServerIp = pCfgPkt->TftpServerIp;
 243   1          memcpy((char *)&gconfig_ConfigData.Filename, (char *)&pCfgPkt->Filename, 128);
 244   1      
 245   1              GCONFIG_WriteConfigData();
 246   1      } /* End of GCONFIG_SetConfigPacket() */
 247          
 248          /*
 249           * ----------------------------------------------------------------------------
 250           * Function Name: GCONFIG_GetConfigPacket
 251           * Purpose: 
 252           * Params:
 253           * Returns:
 254           * Note:
 255           * ----------------------------------------------------------------------------
 256           */
 257          void GCONFIG_GetConfigPacket(GCONFIG_CFG_PKT* pCfgPkt)
 258          {
 259   1          memcpy((char *)&pCfgPkt->Gid, (char *)&GCONFIG_Gid, sizeof(GCONFIG_Gid));
 260   1              pCfgPkt->Option = gconfig_ConfigData.Option;
 261   1          pCfgPkt->DevName = gconfig_ConfigData.DevName;
 262   1          pCfgPkt->MacAddr = macAddr;
 263   1              pCfgPkt->Network = gconfig_ConfigData.Network;
 264   1          pCfgPkt->ServerDynamicIP = STOE_GetIPAddr();
 265   1              pCfgPkt->ServerStaticIP = gconfig_ConfigData.ServerStaticIP;
 266   1              pCfgPkt->ServerDataPktListenPort = gconfig_ConfigData.ServerDataPktListenPort;
 267   1              pCfgPkt->ServerMulticastListenPort = gconfig_ConfigData.ServerMulticastListenPort;
 268   1              pCfgPkt->ServerBroadcastListenPort = gconfig_ConfigData.ServerBroadcastListenPort;
 269   1              pCfgPkt->ClientDestIP = gconfig_ConfigData.ClientDestIP;
 270   1              pCfgPkt->ClientDestPort = gconfig_ConfigData.ClientDestPort; 
 271   1              pCfgPkt->Netmask = gconfig_ConfigData.Netmask;
 272   1              pCfgPkt->Gateway = gconfig_ConfigData.Gateway;
 273   1              pCfgPkt->Dns = gconfig_ConfigData.Dns;
 274   1              pCfgPkt->SerialPort = gconfig_ConfigData.SerialPort;            
 275   1              pCfgPkt->EthernetTxTimer = gconfig_ConfigData.EthernetTxTimer;
 276   1      
 277   1          pCfgPkt->Rs485Mode = gconfig_ConfigData.Rs485Mode;
 278   1          memcpy((char *)&pCfgPkt->AccessibleIP[0], (char *)&gconfig_ConfigData.AccessibleIP[0], (GCONFIG_ACCESS
             -IBLE_IP_NUM*4));
 279   1          memcpy((char *)&pCfgPkt->Smtp, (char *)&gconfig_ConfigData.Smtp, sizeof(GCONFIG_SMTP_CONFIG));
 280   1          memcpy((char *)&pCfgPkt->DestHostName, (char *)&gconfig_ConfigData.DestHostName, 36);
 281   1              
 282   1          pCfgPkt->TftpServerIp = gconfig_ConfigData.TftpServerIp;
 283   1          memcpy((char *)&pCfgPkt->Filename[0], (char *)&gconfig_ConfigData.Filename[0], 128);
 284   1      
 285   1              if (GS2E_GetTaskState() == GS2E_STATE_IDLE)
 286   1                      pCfgPkt->DeviceStatus = DEVICE_STATUS_IDLE;
 287   1              else
 288   1                      pCfgPkt->DeviceStatus = DEVICE_STATUS_CONNECTED;
 289   1      
 290   1      } /* End of GCONFIG_GetConfigPacket() */
 291          
 292          /*
 293           * ----------------------------------------------------------------------------
 294           * Function Name: GCONFIG_ReadConfigData
 295           * Purpose: 
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 6   

 296           * Params:
 297           * Returns:
 298           * Note:
 299           * ----------------------------------------------------------------------------
 300           */
 301          void GCONFIG_ReadConfigData(void)
 302          {
 303   1      #ifdef RuntimeCodeAt24KH
                      BOOL bRet;
              
                      printd("Read configuration data");
                      bRet = gconfig_ReStoreParameter(0, &gconfig_ConfigData, sizeof(gconfig_ConfigData));
              
                      if (bRet == FALSE || (gconfig_ConfigData.ServerStaticIP & 0x000000FF) == 0)
                      {
                              GCONFIG_ReadDefaultConfigData();
                              GCONFIG_WriteConfigData();
                              gconfig_DisplayConfigData(&gconfig_ConfigData);
                      }
              
              #else
 317   1                      GCONFIG_ReadDefaultConfigData();
 318   1                      gconfig_DisplayConfigData(&gconfig_ConfigData);
 319   1      #endif
 320   1      
 321   1      } /* End of GCONFIG_ReadConfigData() */
 322          
 323          /*
 324           * ----------------------------------------------------------------------------
 325           * Function Name: GCONFIG_WriteConfigData
 326           * Purpose: 
 327           * Params:
 328           * Returns:
 329           * Note:
 330           * ----------------------------------------------------------------------------
 331           */
 332          void GCONFIG_WriteConfigData(void)
 333          {
 334   1      #ifdef RuntimeCodeAt24KH
                      gconfig_StoreParameter(&gconfig_ConfigData, (U16_T)sizeof(gconfig_ConfigData));
              #endif  
 337   1      } /* End of GCONFIG_WriteConfigData() */
 338          
 339          /*
 340           * ----------------------------------------------------------------------------
 341           * Function Name: GCONFIG_ReadDefaultConfigData
 342           * Purpose: 
 343           * Params:
 344           * Returns:
 345           * Note:
 346           * ----------------------------------------------------------------------------
 347           */
 348          void GCONFIG_ReadDefaultConfigData(void)
 349          {
 350   1          U8_T i;
 351   1      
 352   1              printd("Read default configuration data. \n\r");
 353   1      
 354   1              gconfig_ConfigData.CheckSum = 0x00;
 355   1          gconfig_ConfigData.CfgLength = sizeof(gconfig_ConfigData);
 356   1              gconfig_ConfigData.UdpAutoConnectClientIp = 0x00000000;
 357   1              gconfig_ConfigData.UdpAutoConnectClientPort = 0x0000;
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 7   

 358   1      
 359   1              gconfig_ConfigData.Option = 0;
 360   1              memset(&gconfig_ConfigData.DevName, 0, sizeof(GCONFIG_DEV_NAME));
 361   1      
 362   1              gconfig_ConfigData.Network = (GCONFIG_NETWORK_SERVER | 
 363   1                                                  GCONFIG_NETWORK_DHCP_ENABLE |
 364   1                                                  GCONFIG_NETWORK_PROTO_TCP |
 365   1                                                                                              GCONFIG_NETWORK_PROTO_UDP_BCAST
 366   1                                                                                         );
 367   1      
 368   1              gconfig_ConfigData.ServerStaticIP = 0xc0a80003; // 192.168.0.3
 369   1              gconfig_ConfigData.ServerDataPktListenPort = GCONFIG_DEFAULT_DATA_PORT;
 370   1              gconfig_ConfigData.ServerMulticastListenPort = GCONFIG_UDP_MCAST_SERVER_PORT;
 371   1              gconfig_ConfigData.ServerBroadcastListenPort = GCONFIG_UDP_BCAST_SERVER_PORT;
 372   1              gconfig_ConfigData.ClientDestIP = 0xc0a80002;   // 192.168.0.2
 373   1              gconfig_ConfigData.ClientDestPort = GCONFIG_DEFAULT_DATA_PORT; 
 374   1              gconfig_ConfigData.Netmask = 0xffffff00;                        // 255.255.255.0
 375   1              gconfig_ConfigData.Gateway = 0xc0a80001;                        // 192.168.0.1
 376   1              gconfig_ConfigData.Dns = 0xa85f0101;                            // 168.95.1.1
 377   1      
 378   1              gconfig_ConfigData.SerialPort = (GCONFIG_SPORT_BRATE_115200 |
 379   1                                                         GCONFIG_SPORT_DATABIT_8 |
 380   1                                                                         GCONFIG_SPORT_PARITY_NONE |
 381   1                                                                         GCONFIG_SPORT_FLOWC_NONE |
 382   1                                                                         GCONFIG_SPORT_STOPBIT_1
 383   1                                                                        );
 384   1      
 385   1              gconfig_ConfigData.EthernetTxTimer = 100; // 100 ms
 386   1      
 387   1          strcpy(gconfig_ConfigData.Admin.Username, "admin");
 388   1          strcpy(gconfig_ConfigData.Admin.Passwd, "admin");
 389   1          gconfig_ConfigData.Admin.Level = 5;
 390   1      
 391   1          for (i = 0; i < GCONFIG_ACCESSIBLE_IP_NUM; i++)
 392   1          {
 393   2              gconfig_ConfigData.AccessibleIP[i] = 0;
 394   2          }
 395   1      
 396   1          strcpy(gconfig_ConfigData.Smtp.DomainName, "");
 397   1          strcpy(gconfig_ConfigData.Smtp.FromAddr, "");
 398   1          strcpy(gconfig_ConfigData.Smtp.ToAddr1, "");        
 399   1          strcpy(gconfig_ConfigData.Smtp.ToAddr2, "");        
 400   1          strcpy(gconfig_ConfigData.Smtp.ToAddr3, "");
 401   1              
 402   1          gconfig_ConfigData.Smtp.EventEnableBits = 0x0000;
 403   1      
 404   1          gconfig_ConfigData.Rs485Mode = 0;
 405   1      
 406   1          strcpy(gconfig_ConfigData.DestHostName, "");
 407   1      
 408   1          /* the following 5 items will be used for boot loader */
 409   1          gconfig_ConfigData.DeviceIp = 0xc0a80003;
 410   1          gconfig_ConfigData.DeviceNetmask = 0xFFFFFF00;
 411   1          gconfig_ConfigData.DeviceGateway = 0xc0a80001;
 412   1          strcpy(gconfig_ConfigData.Filename, "ax.bin");
 413   1          gconfig_ConfigData.TftpServerIp = 0xc0a80001;
 414   1         
 415   1      } /* End of GCONFIG_ReadDefaultConfigData */
 416          
 417          /////////////////////////////////////////////////////////////////////////////////
 418          
 419          /*
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 8   

 420           * ----------------------------------------------------------------------------
 421           * Function Name: GCONFIG_EnableUdpAutoConnectAfterReboot
 422           * Purpose: 
 423           * Params:
 424           * Returns:
 425           * Note:
 426           * ----------------------------------------------------------------------------
 427           */
 428          U8_T GCONFIG_EnableUdpAutoConnectAfterReboot(void)
 429          {
 430   1              if ((gconfig_ConfigData.Option & GCONFIG_OPTION_ENABLE_UDP_AUTO_CONNECT) 
 431   1                   == GCONFIG_OPTION_ENABLE_UDP_AUTO_CONNECT)
 432   1                      return TRUE;
 433   1              
 434   1              return FALSE;
 435   1      } /* End of GCONFIG_EnableUdpAutoConnectAfterReboot() */
 436          
 437          /*
 438           * ----------------------------------------------------------------------------
 439           * Function Name: GCONFIG_EnableFirmwareUpgrade
 440           * Purpose: 
 441           * Params:
 442           * Returns:
 443           * Note:
 444           * ----------------------------------------------------------------------------
 445           */
 446          void GCONFIG_EnableFirmwareUpgrade(void)
 447          {
 448   1              FirmwareUpgradeFlag[0] = 'a';
 449   1              FirmwareUpgradeFlag[1] = 's';
 450   1              FirmwareUpgradeFlag[2] = 'i';
 451   1              FirmwareUpgradeFlag[3] = 'x';
 452   1      
 453   1          /* save the network configuration for boot loader */
 454   1          gconfig_ConfigData.DeviceIp = STOE_GetIPAddr();
 455   1          gconfig_ConfigData.DeviceNetmask = STOE_GetSubnetMask();
 456   1          gconfig_ConfigData.DeviceGateway = STOE_GetGateway();
 457   1      
 458   1      } /* End of GCONFIG_EnableFirmwareUpgrade() */
 459          
 460          /*
 461           * ----------------------------------------------------------------------------
 462           * Function Name: GCONFIG_IpAddr2Ulong()
 463           * Purpose:
 464           * Params:
 465           * Returns:
 466           * Note:
 467           * ----------------------------------------------------------------------------
 468           */
 469          U32_T GCONFIG_IpAddr2Ulong(U8_T* pBuf, U8_T len)
 470          {
 471   1              U32_T   ip = 0;
 472   1              U8_T*   point = (U8_T*)&ip;
 473   1              U8_T    count = 0;
 474   1              U8_T    count2 = 0;
 475   1      
 476   1              while (1)
 477   1              {
 478   2                      count2 = 0;
 479   2                      while ((*pBuf != '.') && len)
 480   2                      {
 481   3                              count2++;
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 9   

 482   3                              if (count2 > 3) return 0xffffffff;
 483   3      
 484   3                              *point *= 10;
 485   3        
 486   3                              if ((*pBuf < 0x3a) && (*pBuf > 0x2f))
 487   3                                      *point += (*pBuf - 0x30);
 488   3                              else
 489   3                                      return 0xffffffff;
 490   3      
 491   3                              pBuf++;
 492   3                              len--;
 493   3                      }
 494   2        
 495   2                      if (len == 0) break;
 496   2      
 497   2                      pBuf++;
 498   2                      len--;
 499   2                      count++;
 500   2                      point++;
 501   2      
 502   2                      if (count > 3) return 0xffffffff;
 503   2              }
 504   1      
 505   1              if (count != 3) return 0xffffffff;
 506   1      
 507   1              return ip;
 508   1      } /* End of GCONFIG_IpAddr2Ulong() */
 509          /////////////////////////////////////////////////////////////////////////////////
 510          // Get Functions
 511          
 512          /*
 513           * ----------------------------------------------------------------------------
 514           * Function Name: GCONFIG_GetDeviceName
 515           * Purpose: 
 516           * Params:
 517           * Returns:
 518           * Note:
 519           * ----------------------------------------------------------------------------
 520           */
 521          void GCONFIG_SetDeviceName(GCONFIG_DEV_NAME* pDevName)
 522          {
 523   1              memcpy(&gconfig_ConfigData.DevName, pDevName, sizeof(GCONFIG_DEV_NAME)); 
 524   1      } /* End of GCONFIG_GetDeviceName() */
 525          
 526          /*
 527           * ----------------------------------------------------------------------------
 528           * Function Name: GCONFIG_GetNetwork
 529           * Purpose: 
 530           * Params:
 531           * Returns:
 532           * Note:
 533           * ----------------------------------------------------------------------------
 534           */
 535          void GCONFIG_SetNetwork(U16_T val)
 536          {
 537   1              gconfig_ConfigData.Network = val;       
 538   1      } /* End of GCONFIG_GetNetwork() */
 539          
 540          /*
 541           * ----------------------------------------------------------------------------
 542           * Function Name: GCONFIG_SetServerStaticIP
 543           * Purpose: 
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 10  

 544           * Params:
 545           * Returns:
 546           * Note:
 547           * ----------------------------------------------------------------------------
 548           */
 549          void GCONFIG_SetServerStaticIP(U32_T ip)
 550          {
 551   1              gconfig_ConfigData.ServerStaticIP = ip; 
 552   1      } /* End of GCONFIG_SetServerStaticIP() */
 553          
 554          /*
 555           * ----------------------------------------------------------------------------
 556           * Function Name: GCONFIG_SetServerDataPktListenPort
 557           * Purpose: 
 558           * Params:
 559           * Returns:
 560           * Note:
 561           * ----------------------------------------------------------------------------
 562           */
 563          void GCONFIG_SetServerDataPktListenPort(U16_T port)
 564          {
 565   1              gconfig_ConfigData.ServerDataPktListenPort = port;
 566   1      } /* End of GCONFIG_SetServerDataPktListenPort() */
 567          
 568          /*
 569           * ----------------------------------------------------------------------------
 570           * Function Name: GCONFIG_SetServerMulticastListenPort
 571           * Purpose: 
 572           * Params:
 573           * Returns:
 574           * Note:
 575           * ----------------------------------------------------------------------------
 576           */
 577          void GCONFIG_SetServerMulticastListenPort(U16_T port)
 578          {
 579   1              gconfig_ConfigData.ServerMulticastListenPort = port;
 580   1      } /* End of GCONFIG_SetServerMulticastListenPort() */
 581          
 582          /*
 583           * ----------------------------------------------------------------------------
 584           * Function Name: GCONFIG_SetServerBroadcastListenPort
 585           * Purpose: 
 586           * Params:
 587           * Returns:
 588           * Note:
 589           * ----------------------------------------------------------------------------
 590           */
 591          void GCONFIG_SetServerBroadcastListenPort(U16_T port)
 592          {
 593   1              gconfig_ConfigData.ServerBroadcastListenPort = port;
 594   1      } /* End of GCONFIG_SetServerBroadcastListenPort() */
 595          
 596          /*
 597           * ----------------------------------------------------------------------------
 598           * Function Name: GCONFIG_SetClientDestIP
 599           * Purpose: 
 600           * Params:
 601           * Returns:
 602           * Note:
 603           * ----------------------------------------------------------------------------
 604           */
 605          void GCONFIG_SetClientDestIP(U32_T ip)
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 11  

 606          {
 607   1              gconfig_ConfigData.ClientDestIP = ip;
 608   1      } /* End of GCONFIG_SetClientDestIP() */
 609          
 610          /*
 611           * ----------------------------------------------------------------------------
 612           * Function Name: GCONFIG_SetClientDestPort
 613           * Purpose: 
 614           * Params:
 615           * Returns:
 616           * Note:
 617           * ----------------------------------------------------------------------------
 618           */
 619          void GCONFIG_SetClientDestPort(U16_T port)
 620          {
 621   1              gconfig_ConfigData.ClientDestPort = port;
 622   1      } /* End of GCONFIG_SetClientDestPort() */
 623          
 624          /*
 625           * ----------------------------------------------------------------------------
 626           * Function Name: GCONFIG_SetNetmask
 627           * Purpose: 
 628           * Params:
 629           * Returns:
 630           * Note:
 631           * ----------------------------------------------------------------------------
 632           */
 633          void GCONFIG_SetNetmask(U32_T netmask)
 634          {
 635   1              gconfig_ConfigData.Netmask = netmask;
 636   1      } /* End of GCONFIG_SetNetmask() */
 637          
 638          /*
 639           * ----------------------------------------------------------------------------
 640           * Function Name: GCONFIG_SetGateway
 641           * Purpose: 
 642           * Params:
 643           * Returns:
 644           * Note:
 645           * ----------------------------------------------------------------------------
 646           */
 647          void GCONFIG_SetGateway(U32_T gateway)
 648          {
 649   1              gconfig_ConfigData.Gateway = gateway;
 650   1      } /* End of GCONFIG_SetGateway() */
 651          
 652          /*
 653           * ----------------------------------------------------------------------------
 654           * Function Name: GCONFIG_SetDNS
 655           * Purpose: 
 656           * Params:
 657           * Returns:
 658           * Note:
 659           * ----------------------------------------------------------------------------
 660           */
 661          void GCONFIG_SetDNS(U32_T dns)
 662          {
 663   1              gconfig_ConfigData.Dns = dns;
 664   1      } /* End of GCONFIG_SetDNS() */
 665          
 666          /*
 667           * ----------------------------------------------------------------------------
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 12  

 668           * Function Name: GCONFIG_SetSerialPort
 669           * Purpose: 
 670           * Params:
 671           * Returns:
 672           * Note:
 673           * ----------------------------------------------------------------------------
 674           */
 675          void GCONFIG_SetSerialPort(U16_T sPort)
 676          {
 677   1              gconfig_ConfigData.SerialPort = sPort;
 678   1      } /* End of GCONFIG_SetSerialPort() */
 679          
 680          
 681          /*
 682           * ----------------------------------------------------------------------------
 683           * Function Name: GCONFIG_SetEthernetTxTimer
 684           * Purpose: 
 685           * Params:
 686           * Returns:
 687           * Note:
 688           * ----------------------------------------------------------------------------
 689           */
 690          void GCONFIG_SetEthernetTxTimer(U16_T timer)
 691          {
 692   1              gconfig_ConfigData.EthernetTxTimer = timer;
 693   1      } /* End of GCONFIG_SetEthernetTxTimer() */
 694          
 695          /*
 696           * ----------------------------------------------------------------------------
 697           * Function Name: GCONFIG_SetUdpAutoConnectClientIp
 698           * Purpose: 
 699           * Params:
 700           * Returns:
 701           * Note:
 702           * ----------------------------------------------------------------------------
 703           */
 704          void GCONFIG_SetUdpAutoConnectClientIp(U32_T ip)
 705          {
 706   1              gconfig_ConfigData.UdpAutoConnectClientIp = ip;
 707   1      } /* End of GCONFIG_SetUdpAutoConnectClientIp() */
 708          
 709          /*
 710           * ----------------------------------------------------------------------------
 711           * Function Name: GCONFIG_SetUdpAutoConnectRemotePort
 712           * Purpose: 
 713           * Params:
 714           * Returns:
 715           * Note:
 716           * ----------------------------------------------------------------------------
 717           */
 718          void GCONFIG_SetUdpAutoConnectClientPort(U16_T port)
 719          {
 720   1              gconfig_ConfigData.UdpAutoConnectClientPort = port;
 721   1      } /* End of GCONFIG_SetUdpAutoConnectClientPort() */
 722          
 723          /*
 724           * ----------------------------------------------------------------------------
 725           * Function Name: GCONFIG_SetTftpServerIp
 726           * Purpose: 
 727           * Params:
 728           * Returns:
 729           * Note:
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 13  

 730           * ----------------------------------------------------------------------------
 731           */
 732          void GCONFIG_SetTftpServerIp(U32_T ip)
 733          {
 734   1              gconfig_ConfigData.TftpServerIp = ip;
 735   1      } /* End of GCONFIG_SetTftpServerIp() */
 736          
 737          /*
 738           * ----------------------------------------------------------------------------
 739           * Function Name: GCONFIG_SetFilename
 740           * Purpose: 
 741           * Params:
 742           * Returns:
 743           * Note:
 744           * ----------------------------------------------------------------------------
 745           */
 746          U8_T GCONFIG_SetFilename(U8_T *filename, U8_T len)
 747          {
 748   1              if (len > sizeof(gconfig_ConfigData.Filename) - 1)
 749   1                      len = sizeof(gconfig_ConfigData.Filename) - 1;
 750   1      
 751   1              memcpy(gconfig_ConfigData.Filename, filename, len); 
 752   1              gconfig_ConfigData.Filename[len] = '\0';        
 753   1          return len;
 754   1      } /* End of GCONFIG_SetFilename() */
 755          
 756          /////////////////////////////////////////////////////////////////////////////////
 757          // Get Functions
 758          
 759          /*
 760           * ----------------------------------------------------------------------------
 761           * Function Name: GCONFIG_GetTftpServerIp
 762           * Purpose: 
 763           * Params:
 764           * Returns:
 765           * Note:
 766           * ----------------------------------------------------------------------------
 767           */
 768          U32_T GCONFIG_GetTftpServerIp(void)
 769          {
 770   1              return gconfig_ConfigData.TftpServerIp; 
 771   1      } /* End of GCONFIG_GetTftpServerIp() */
 772          
 773          /*
 774           * ----------------------------------------------------------------------------
 775           * Function Name: GCONFIG_GetFilename
 776           * Purpose: 
 777           * Params:
 778           * Returns:
 779           * Note:
 780           * ----------------------------------------------------------------------------
 781           */
 782          U8_T GCONFIG_GetFilename(U8_T *filename, U8_T len)
 783          {
 784   1          if (!filename || len < sizeof(gconfig_ConfigData.Filename))
 785   1              return 0;
 786   1      
 787   1          memcpy(filename, gconfig_ConfigData.Filename, sizeof(gconfig_ConfigData.Filename)); 
 788   1      
 789   1          return sizeof(gconfig_ConfigData.Filename); 
 790   1      } /* End of GCONFIG_GetFilename() */
 791          
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 14  

 792          /*
 793           * ----------------------------------------------------------------------------
 794           * Function Name: GCONFIG_GetDeviceName
 795           * Purpose: 
 796           * Params:
 797           * Returns:
 798           * Note:
 799           * ----------------------------------------------------------------------------
 800           */
 801          GCONFIG_DEV_NAME* GCONFIG_GetDeviceName(void)
 802          {
 803   1              return &gconfig_ConfigData.DevName;
 804   1      } /* End of GCONFIG_GetDeviceName() */
 805          
 806          /*
 807           * ----------------------------------------------------------------------------
 808           * Function Name: GCONFIG_GetMacAddress
 809           * Purpose: 
 810           * Params:
 811           * Returns:
 812           * Note:
 813           * ----------------------------------------------------------------------------
 814           */
 815          GCONFIG_MAC_ADDR GCONFIG_GetMacAddress(void)
 816          {
 817   1              return macAddr;
 818   1      } /* End of GCONFIG_GetMacAddress() */
 819          
 820          /*
 821           * ----------------------------------------------------------------------------
 822           * Function Name: GCONFIG_GetNetwork
 823           * Purpose: 
 824           * Params:
 825           * Returns:
 826           * Note:
 827           * ----------------------------------------------------------------------------
 828           */
 829          U16_T GCONFIG_GetNetwork(void)
 830          {
 831   1              return gconfig_ConfigData.Network;
 832   1      } /* End of GCONFIG_GetNetwork() */
 833          
 834          /*
 835           * ----------------------------------------------------------------------------
 836           * Function Name: GCONFIG_GetServerStaticIP
 837           * Purpose: 
 838           * Params:
 839           * Returns:
 840           * Note:
 841           * ----------------------------------------------------------------------------
 842           */
 843          U32_T GCONFIG_GetServerStaticIP(void)
 844          {
 845   1              return gconfig_ConfigData.ServerStaticIP;
 846   1      } /* End of GCONFIG_GetServerStaticIP() */
 847          
 848          /*
 849           * ----------------------------------------------------------------------------
 850           * Function Name: GCONFIG_GetServerDataPktListenPort
 851           * Purpose: 
 852           * Params:
 853           * Returns:
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 15  

 854           * Note:
 855           * ----------------------------------------------------------------------------
 856           */
 857          U16_T GCONFIG_GetServerDataPktListenPort(void)
 858          {
 859   1              return gconfig_ConfigData.ServerDataPktListenPort;
 860   1      } /* End of GCONFIG_GetServerDataPktListenPort() */
 861          
 862          /*
 863           * ----------------------------------------------------------------------------
 864           * Function Name: GCONFIG_GetServerMulticastListenPort
 865           * Purpose: 
 866           * Params:
 867           * Returns:
 868           * Note:
 869           * ----------------------------------------------------------------------------
 870           */
 871          U16_T GCONFIG_GetServerMulticastListenPort(void)
 872          {
 873   1              return gconfig_ConfigData.ServerMulticastListenPort;
 874   1      } /* End of GCONFIG_GetServerMulticastListenPort() */
 875          
 876          /*
 877           * ----------------------------------------------------------------------------
 878           * Function Name: GCONFIG_GetServerBroadcastListenPort
 879           * Purpose: 
 880           * Params:
 881           * Returns:
 882           * Note:
 883           * ----------------------------------------------------------------------------
 884           */
 885          U16_T GCONFIG_GetServerBroadcastListenPort(void)
 886          {
 887   1              return gconfig_ConfigData.ServerBroadcastListenPort;
 888   1      } /* End of GCONFIG_GetServerBroadcastListenPort() */
 889          
 890          /*
 891           * ----------------------------------------------------------------------------
 892           * Function Name: GCONFIG_GetClientDestIP
 893           * Purpose: 
 894           * Params:
 895           * Returns:
 896           * Note:
 897           * ----------------------------------------------------------------------------
 898           */
 899          U32_T GCONFIG_GetClientDestIP(void)
 900          {
 901   1      #if (INCLUDE_DNS_CLIENT)
                      U32_T   DestIP, DestNameLen;
                  teDNSC_STATE state;
              
                      DestNameLen = strlen(gconfig_ConfigData.DestHostName);
                      DestIP = GCONFIG_IpAddr2Ulong(gconfig_ConfigData.DestHostName, DestNameLen);
                      if (DestIP == 0xffffffff)
                      {
                              if ((state = DNSC_Query(gconfig_ConfigData.DestHostName, &DestIP)) == DNSC_QUERY_OK)
                                      return DestIP;
                              else if (state == DNSC_QUERY_FREE)
                                      DNSC_Start(gconfig_ConfigData.DestHostName);
                              return 0;               
                      }
                      return DestIP;
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 16  

              #else
 917   1              return gconfig_ConfigData.ClientDestIP;
 918   1      #endif                  
 919   1      } /* End of GCONFIG_GetClientDestIP() */
 920          
 921          /*
 922           * ----------------------------------------------------------------------------
 923           * Function Name: GCONFIG_GetClientDestPort
 924           * Purpose: 
 925           * Params:
 926           * Returns:
 927           * Note:
 928           * ----------------------------------------------------------------------------
 929           */
 930          U16_T GCONFIG_GetClientDestPort(void)
 931          {
 932   1              return gconfig_ConfigData.ClientDestPort;
 933   1      } /* End of GCONFIG_GetClientDestPort() */
 934          
 935          /*
 936           * ----------------------------------------------------------------------------
 937           * Function Name: GCONFIG_GetNetmask
 938           * Purpose: 
 939           * Params:
 940           * Returns:
 941           * Note:
 942           * ----------------------------------------------------------------------------
 943           */
 944          U32_T GCONFIG_GetNetmask(void)
 945          {
 946   1              return gconfig_ConfigData.Netmask;
 947   1      } /* End of GCONFIG_GetNetmask() */
 948          
 949          /*
 950           * ----------------------------------------------------------------------------
 951           * Function Name: GCONFIG_GetGateway
 952           * Purpose: 
 953           * Params:
 954           * Returns:
 955           * Note:
 956           * ----------------------------------------------------------------------------
 957           */
 958          U32_T GCONFIG_GetGateway(void)
 959          {
 960   1              return gconfig_ConfigData.Gateway;
 961   1      } /* End of GCONFIG_GetGateway() */
 962          
 963          /*
 964           * ----------------------------------------------------------------------------
 965           * Function Name: GCONFIG_GetDNS
 966           * Purpose: 
 967           * Params:
 968           * Returns:
 969           * Note:
 970           * ----------------------------------------------------------------------------
 971           */
 972          U32_T GCONFIG_GetDNS(void)
 973          {
 974   1              return gconfig_ConfigData.Dns;
 975   1      } /* End of GCONFIG_GetDNS() */
 976          
 977          /*
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 17  

 978           * ----------------------------------------------------------------------------
 979           * Function Name: GCONFIG_GetSerialPort
 980           * Purpose: 
 981           * Params:
 982           * Returns:
 983           * Note:
 984           * ----------------------------------------------------------------------------
 985           */
 986          U16_T GCONFIG_GetSerialPort(void)
 987          {
 988   1              return gconfig_ConfigData.SerialPort;
 989   1      } /* End of GCONFIG_GetSerialPort() */
 990          
 991          /*
 992           * ----------------------------------------------------------------------------
 993           * Function Name: GCONFIG_GetEthernetTxTimer
 994           * Purpose: 
 995           * Params:
 996           * Returns:
 997           * Note:
 998           * ----------------------------------------------------------------------------
 999           */
1000          U16_T GCONFIG_GetEthernetTxTimer(void)
1001          {
1002   1              return gconfig_ConfigData.EthernetTxTimer;
1003   1      } /* End of GCONFIG_GetEthernetTxTimer() */
1004          
1005          /*
1006           * ----------------------------------------------------------------------------
1007           * Function Name: GCONFIG_GetUdpAutoConnectClientIp
1008           * Purpose: 
1009           * Params:
1010           * Returns:
1011           * Note:
1012           * ----------------------------------------------------------------------------
1013           */
1014          U32_T GCONFIG_GetUdpAutoConnectClientIp(void)
1015          {
1016   1              return gconfig_ConfigData.UdpAutoConnectClientIp;
1017   1      } /* End of GCONFIG_GetUdpAutoConnectClientIp() */
1018          
1019          /*
1020           * ----------------------------------------------------------------------------
1021           * Function Name: GCONFIG_GetUdpAutoConnectClientPort
1022           * Purpose: 
1023           * Params:
1024           * Returns:
1025           * Note:
1026           * ----------------------------------------------------------------------------
1027           */
1028          U16_T GCONFIG_GetUdpAutoConnectClientPort(void)
1029          {
1030   1              return gconfig_ConfigData.UdpAutoConnectClientPort;
1031   1      } /* End of GCONFIG_GetUdpAutoConnectClientPort() */
1032          
1033          /*
1034           * ----------------------------------------------------------------------------
1035           * Function Name: GCONFIG_GetBaudRate
1036           * Purpose: 
1037           * Params:
1038           * Returns:
1039           * Note:
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 18  

1040           * ----------------------------------------------------------------------------
1041           */
1042          U16_T GCONFIG_GetBaudRate(U8_T index)
1043          {
1044   1              U16_T baudRate = 0;
1045   1      
1046   1              switch(gconfig_SysClock)
1047   1              {
1048   2                      case SCS_25M:
1049   2                              if          (index == 0) baudRate = UR2_BR25_921600;
1050   2                              else if (index == 1) baudRate = UR2_BR25_115200;
1051   2                              else if (index == 2) baudRate = UR2_BR25_57600;
1052   2                              else if (index == 3) baudRate = UR2_BR25_38400;
1053   2                              else if (index == 4) baudRate = UR2_BR25_19200;
1054   2                              else if (index == 5) baudRate = UR2_BR25_9600;
1055   2                              else if (index == 6) baudRate = UR2_BR25_4800;
1056   2                              else if (index == 7) baudRate = UR2_BR25_2400;
1057   2                              else if (index == 8) baudRate = UR2_BR25_1200;
1058   2                              break;
1059   2                      case SCS_50M:
1060   2                              if          (index == 0) baudRate = UR2_BR50_921600;
1061   2                              else if (index == 1) baudRate = UR2_BR50_115200;
1062   2                              else if (index == 2) baudRate = UR2_BR50_57600;
1063   2                              else if (index == 3) baudRate = UR2_BR50_38400;
1064   2                              else if (index == 4) baudRate = UR2_BR50_19200;
1065   2                              else if (index == 5) baudRate = UR2_BR50_9600;
1066   2                              else if (index == 6) baudRate = UR2_BR50_4800;
1067   2                              else if (index == 7) baudRate = UR2_BR50_2400;
1068   2                              else if (index == 8) baudRate = UR2_BR50_1200;
1069   2                              break;
1070   2                      case SCS_100M:
1071   2                              if          (index == 0) baudRate = UR2_BR100_921600;
1072   2                              else if (index == 1) baudRate = UR2_BR100_115200;
1073   2                              else if (index == 2) baudRate = UR2_BR100_57600;
1074   2                              else if (index == 3) baudRate = UR2_BR100_38400;
1075   2                              else if (index == 4) baudRate = UR2_BR100_19200;
1076   2                              else if (index == 5) baudRate = UR2_BR100_9600;
1077   2                              else if (index == 6) baudRate = UR2_BR100_4800;
1078   2                              else if (index == 7) baudRate = UR2_BR100_2400;
1079   2                              else if (index == 8) baudRate = UR2_BR100_1200;
1080   2                              break;
1081   2                      default:
1082   2                              printd("Unknown system clock rate!\n\r");
1083   2                              break;
1084   2              }
1085   1              
1086   1              return baudRate;
1087   1      } /* End of GCONFIG_GetBaudRate() */
1088          
1089          /*
1090           * ----------------------------------------------------------------------------
1091           * Function Name: GCONFIG_GetAdmin
1092           * Purpose: 
1093           * Params:
1094           * Returns:
1095           * Note:
1096           * ----------------------------------------------------------------------------
1097           */
1098          S16_T GCONFIG_GetAdmin(U8_T *username, U8_T *passwd, U8_T *level)
1099          {
1100   1          if (!username || !passwd)
1101   1              return -1;
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 19  

1102   1      
1103   1          memcpy(username, gconfig_ConfigData.Admin.Username, 16);
1104   1          memcpy(passwd, gconfig_ConfigData.Admin.Passwd, 16);
1105   1          *level = gconfig_ConfigData.Admin.Level;
1106   1      
1107   1          return 1;
1108   1      } /* End of GCONFIG_GetAdmin() */
1109          
1110          /*
1111           * ----------------------------------------------------------------------------
1112           * Function Name: GCONFIG_SetAdmin
1113           * Purpose: 
1114           * Params:
1115           * Returns:
1116           * Note:
1117           * ----------------------------------------------------------------------------
1118           */
1119          S16_T GCONFIG_SetAdmin(U8_T *username, U8_T *passwd)
1120          {
1121   1          if (!username || !passwd)
1122   1              return -1;
1123   1      
1124   1          memcpy(gconfig_ConfigData.Admin.Username, username, 16);
1125   1          memcpy(gconfig_ConfigData.Admin.Passwd, passwd, 16);
1126   1      
1127   1          return 1;
1128   1      } /* End of GCONFIG_SetAdmin() */
1129          
1130          /*
1131           * ----------------------------------------------------------------------------
1132           * Function Name: GCONFIG_GetAccessibleIP
1133           * Purpose: 
1134           * Params:
1135           * Returns:
1136           * Note:
1137           * ----------------------------------------------------------------------------
1138           */
1139          S16_T GCONFIG_GetAccessibleIP(U8_T idx, U32_T *ip)
1140          {
1141   1          if (!ip || idx >= GCONFIG_ACCESSIBLE_IP_NUM)
1142   1              return -1;
1143   1      
1144   1          *ip = gconfig_ConfigData.AccessibleIP[idx];
1145   1          return 1;
1146   1      
1147   1      } /* End of GCONFIG_GetAccessibleIP() */
1148          
1149          /*
1150           * ----------------------------------------------------------------------------
1151           * Function Name: GCONFIG_SetAccessibleIP
1152           * Purpose: 
1153           * Params:
1154           * Returns:
1155           * Note:
1156           * ----------------------------------------------------------------------------
1157           */
1158          S16_T GCONFIG_SetAccessibleIP(U8_T idx, U32_T ip)
1159          {
1160   1          if (idx >= GCONFIG_ACCESSIBLE_IP_NUM)
1161   1              return -1;
1162   1      
1163   1          gconfig_ConfigData.AccessibleIP[idx] = ip;
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 20  

1164   1          return 1;
1165   1      } /* GCONFIG_SetAccessibleIP() */
1166          
1167          /*
1168           * ----------------------------------------------------------------------------
1169           * Function Name: GCONFIG_SetSMTPDomainName
1170           * Purpose: 
1171           * Params:
1172           * Returns:
1173           * Note:
1174           * ----------------------------------------------------------------------------
1175           */
1176          void GCONFIG_SetSMTPDomainName(U8_T *pIn, U8_T len)
1177          {
1178   1              if (len > sizeof(gconfig_ConfigData.Smtp.DomainName) - 1)
1179   1                      len = sizeof(gconfig_ConfigData.Smtp.DomainName) - 1;
1180   1              
1181   1              memcpy(gconfig_ConfigData.Smtp.DomainName, pIn, len);
1182   1              gconfig_ConfigData.Smtp.DomainName[len] = '\0';
1183   1      } /* GCONFIG_SetSMTPDomainName() */
1184          
1185          /*
1186           * ----------------------------------------------------------------------------
1187           * Function Name: U8_T GCONFIG_GetSMTPDomainName
1188           * Purpose: 
1189           * Params:
1190           * Returns:
1191           * Note:
1192           * ----------------------------------------------------------------------------
1193           */
1194          U8_T GCONFIG_GetSMTPDomainName(U8_T *pOut)
1195          {
1196   1              gconfig_ConfigData.Smtp.DomainName[sizeof(gconfig_ConfigData.Smtp.DomainName) - 1] = '\0';
1197   1          strcpy(pOut, gconfig_ConfigData.Smtp.DomainName);
1198   1      
1199   1              return strlen(gconfig_ConfigData.Smtp.DomainName);
1200   1      } /* GCONFIG_GetSMTPDomainName() */
1201          
1202          /*
1203           * ----------------------------------------------------------------------------
1204           * Function Name: GCONFIG_SetSMTPFrom
1205           * Purpose: 
1206           * Params:
1207           * Returns:
1208           * Note:
1209           * ----------------------------------------------------------------------------
1210           */
1211          void GCONFIG_SetSMTPFrom(U8_T *pIn, U8_T len)
1212          {
1213   1              if (len > sizeof(gconfig_ConfigData.Smtp.FromAddr) - 1)
1214   1                      len = sizeof(gconfig_ConfigData.Smtp.FromAddr) - 1;
1215   1              
1216   1              memcpy(gconfig_ConfigData.Smtp.FromAddr, pIn, len);
1217   1              gconfig_ConfigData.Smtp.FromAddr[len] = '\0';
1218   1      } /* GCONFIG_SetSMTPFrom() */
1219          
1220          /*
1221           * ----------------------------------------------------------------------------
1222           * Function Name: U8_T GCONFIG_GetSMTPFrom()
1223           * Purpose: 
1224           * Params:
1225           * Returns:
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 21  

1226           * Note:
1227           * ----------------------------------------------------------------------------
1228           */
1229          U8_T GCONFIG_GetSMTPFrom(U8_T *pOut)
1230          {
1231   1              gconfig_ConfigData.Smtp.FromAddr[sizeof(gconfig_ConfigData.Smtp.FromAddr) - 1] = '\0';
1232   1          strcpy(pOut, gconfig_ConfigData.Smtp.FromAddr);
1233   1      
1234   1              return strlen(gconfig_ConfigData.Smtp.FromAddr);
1235   1      } /* GCONFIG_GetSMTPFrom() */
1236          /*
1237           * ----------------------------------------------------------------------------
1238           * Function Name: GCONFIG_SetSMTPTo1
1239           * Purpose: 
1240           * Params:
1241           * Returns:
1242           * Note:
1243           * ----------------------------------------------------------------------------
1244           */
1245          void GCONFIG_SetSMTPTo1(U8_T *pIn, U8_T len)
1246          {
1247   1              if (len > sizeof(gconfig_ConfigData.Smtp.ToAddr1) - 1)
1248   1                      len = sizeof(gconfig_ConfigData.Smtp.ToAddr1) - 1;
1249   1              
1250   1              memcpy(gconfig_ConfigData.Smtp.ToAddr1, pIn, len);
1251   1              gconfig_ConfigData.Smtp.ToAddr1[len] = '\0';
1252   1      } /* GCONFIG_SetSMTPTo1() */
1253          
1254          /*
1255           * ----------------------------------------------------------------------------
1256           * Function Name: U8_T GCONFIG_GetSMTPTo1()
1257           * Purpose: 
1258           * Params:
1259           * Returns:
1260           * Note:
1261           * ----------------------------------------------------------------------------
1262           */
1263          U8_T GCONFIG_GetSMTPTo1(U8_T *pOut)
1264          {
1265   1              gconfig_ConfigData.Smtp.ToAddr1[sizeof(gconfig_ConfigData.Smtp.ToAddr1) - 1] = '\0';
1266   1          strcpy(pOut, gconfig_ConfigData.Smtp.ToAddr1);
1267   1      
1268   1              return strlen(gconfig_ConfigData.Smtp.ToAddr1);
1269   1      } /* GCONFIG_GetSMTPTo1() */
1270          /*
1271           * ----------------------------------------------------------------------------
1272           * Function Name: GCONFIG_SetSMTPTo2
1273           * Purpose: 
1274           * Params:
1275           * Returns:
1276           * Note:
1277           * ----------------------------------------------------------------------------
1278           */
1279          void GCONFIG_SetSMTPTo2(U8_T *pIn, U8_T len)
1280          {
1281   1              if (len > sizeof(gconfig_ConfigData.Smtp.ToAddr2) - 1)
1282   1                      len = sizeof(gconfig_ConfigData.Smtp.ToAddr2) - 1;
1283   1              
1284   1              memcpy(gconfig_ConfigData.Smtp.ToAddr2, pIn, len);
1285   1              gconfig_ConfigData.Smtp.ToAddr2[len] = '\0';
1286   1      } /* GCONFIG_SetSMTPTo2() */
1287          
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 22  

1288          /*
1289           * ----------------------------------------------------------------------------
1290           * Function Name: U8_T GCONFIG_GetSMTPTo2()
1291           * Purpose: 
1292           * Params:
1293           * Returns:
1294           * Note:
1295           * ----------------------------------------------------------------------------
1296           */
1297          U8_T GCONFIG_GetSMTPTo2(U8_T *pOut)
1298          {
1299   1              gconfig_ConfigData.Smtp.ToAddr2[sizeof(gconfig_ConfigData.Smtp.ToAddr2) - 1] = '\0';
1300   1          strcpy(pOut, gconfig_ConfigData.Smtp.ToAddr2);
1301   1      
1302   1              return strlen(gconfig_ConfigData.Smtp.ToAddr2);
1303   1      } /* GCONFIG_GetSMTPTo2() */
1304          /*
1305           * ----------------------------------------------------------------------------
1306           * Function Name: GCONFIG_SetSMTPTo3
1307           * Purpose: 
1308           * Params:
1309           * Returns:
1310           * Note:
1311           * ----------------------------------------------------------------------------
1312           */
1313          void GCONFIG_SetSMTPTo3(U8_T *pIn, U8_T len)
1314          {
1315   1              if (len > sizeof(gconfig_ConfigData.Smtp.ToAddr3) - 1)
1316   1                      len = sizeof(gconfig_ConfigData.Smtp.ToAddr3) - 1;
1317   1              
1318   1              memcpy(gconfig_ConfigData.Smtp.ToAddr3, pIn, len);
1319   1              gconfig_ConfigData.Smtp.ToAddr3[len] = '\0';
1320   1      } /* GCONFIG_SetSMTPTo3() */
1321          
1322          /*
1323           * ----------------------------------------------------------------------------
1324           * Function Name: U8_T GCONFIG_GetSMTPTo3()
1325           * Purpose: 
1326           * Params:
1327           * Returns:
1328           * Note:
1329           * ----------------------------------------------------------------------------
1330           */
1331          U8_T GCONFIG_GetSMTPTo3(U8_T *pOut)
1332          {
1333   1              gconfig_ConfigData.Smtp.ToAddr3[sizeof(gconfig_ConfigData.Smtp.ToAddr3) - 1] = '\0';
1334   1          strcpy(pOut, gconfig_ConfigData.Smtp.ToAddr3);
1335   1      
1336   1              return strlen(gconfig_ConfigData.Smtp.ToAddr3); 
1337   1      } /* GCONFIG_GetSMTPTo3() */
1338          /*
1339           * ----------------------------------------------------------------------------
1340           * Function Name: GCONFIG_SetAutoWarning
1341           * Purpose: 
1342           * Params:
1343           * Returns:
1344           * Note:
1345           * ----------------------------------------------------------------------------
1346           */
1347          void GCONFIG_SetAutoWarning(U16_T ValueIn)
1348          {
1349   1              gconfig_ConfigData.Smtp.EventEnableBits = ValueIn;
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 23  

1350   1      } /* GCONFIG_SetAutoWarning() */
1351          /*
1352           * ----------------------------------------------------------------------------
1353           * Function Name: GCONFIG_GetAutoWarning
1354           * Purpose: 
1355           * Params:
1356           * Returns:
1357           * Note:
1358           * ----------------------------------------------------------------------------
1359           */
1360          U16_T GCONFIG_GetAutoWarning(void)
1361          {
1362   1              return gconfig_ConfigData.Smtp.EventEnableBits;
1363   1      } /* GCONFIG_GetAutoWarning() */
1364          
1365          /*
1366           * ----------------------------------------------------------------------------
1367           * Function Name: GCONFIG_SetRs485Mode
1368           * Purpose: 
1369           * Params:
1370           * Returns:
1371           * Note:
1372           * ----------------------------------------------------------------------------
1373           */
1374          void GCONFIG_SetRs485Mode(U8_T mode)
1375          {
1376   1              gconfig_ConfigData.Rs485Mode = mode;
1377   1      } /* GCONFIG_SetAutoWarning() */
1378          /*
1379           * ----------------------------------------------------------------------------
1380           * Function Name: GCONFIG_GetRs485Mode
1381           * Purpose: 
1382           * Params:
1383           * Returns:
1384           * Note:
1385           * ----------------------------------------------------------------------------
1386           */
1387          U8_T GCONFIG_GetRs485Mode(void)
1388          {
1389   1              return gconfig_ConfigData.Rs485Mode;
1390   1      } /* GCONFIG_GetRs485Mode() */
1391          
1392          /*
1393           * ----------------------------------------------------------------------------
1394           * Function Name: GCONFIG_SetDestHostName
1395           * Purpose: 
1396           * Params:
1397           * Returns:
1398           * Note:
1399           * ----------------------------------------------------------------------------
1400           */
1401          void GCONFIG_SetDestHostName(U8_T *pIn, U8_T len)
1402          {
1403   1          if (len > (sizeof(gconfig_ConfigData.DestHostName)-1))
1404   1              len = sizeof(gconfig_ConfigData.DestHostName) - 1;
1405   1      
1406   1          memcpy(gconfig_ConfigData.DestHostName, pIn, len);
1407   1          gconfig_ConfigData.DestHostName[len] = '\0';
1408   1      
1409   1      } /* End of GCONFIG_SetDestHostName() */
1410          
1411          /*
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 24  

1412           * ----------------------------------------------------------------------------
1413           * Function Name: GCONFIG_GetDestHostName
1414           * Purpose: 
1415           * Params:
1416           * Returns:
1417           * Note:
1418           * ----------------------------------------------------------------------------
1419           */
1420          U8_T GCONFIG_GetDestHostName(U8_T *pOut)
1421          {
1422   1          gconfig_ConfigData.DestHostName[sizeof(gconfig_ConfigData.DestHostName) - 1] = '\0';
1423   1          strcpy(pOut, gconfig_ConfigData.DestHostName);
1424   1      
1425   1              return strlen(gconfig_ConfigData.DestHostName);
1426   1      } /* End of GCONFIG_GetDestHostName() */
1427          /////////////////////////////////////////////////////////////////////////////////
1428          
1429          /*
1430           * ----------------------------------------------------------------------------
1431           * Function Name: gconfig_ReStoreParameter
1432           * Purpose: 
1433           * Params:
1434           * Returns:
1435           * Note:
1436           * ----------------------------------------------------------------------------
1437           */
1438          static BOOL gconfig_ReStoreParameter(U32_T addr, GCONFIG_CFG_DATA *pConfig, U16_T len)
1439          {
1440   1              U16_T   i;
1441   1              U8_T    *pParaBaseByte;
1442   1              U8_T    paraCheckSum = 0;
1443   1              U8_T    lastWtst = 0;
1444   1      
1445   1              pParaBaseByte = (U8_T *)pConfig;
1446   1      
1447   1              lastWtst = WTST;
1448   1              WTST = PROG_WTST_7;
1449   1              if (CSREPR & PMS) // SRAM shadow
1450   1              {
1451   2                      CSREPR |= FAES;
1452   2                      for (i = 0 ; i < len ; i++)
1453   2                      {
1454   3                              *(pParaBaseByte + i) = FCVAR(U8_T, GCONFIG_CFG_DATA_FLASH_ADDR + addr + i);
1455   3                      }
1456   2                      CSREPR &= ~FAES;
1457   2              }
1458   1              else
1459   1              {
1460   2                      CSREPR &= ~FAES;
1461   2                      for (i = 0 ; i < len ; i++)
1462   2                      {
1463   3                              *(pParaBaseByte + i) = FCVAR(U8_T, GCONFIG_CFG_DATA_FLASH_ADDR + addr + i);
1464   3                      }
1465   2              }
1466   1              WTST = lastWtst;
1467   1      
1468   1          if (0xffff != gconfig_Checksum((U16_T *)pConfig, len))
1469   1          {
1470   2              printd(" failed! (wrong checksum)\n\r");
1471   2                      return FALSE;
1472   2          }
1473   1          else if (pConfig->CfgLength != len)
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 25  

1474   1          {
1475   2              printd(" Invalid configuration data!\n\r");
1476   2                      return FALSE;
1477   2          }
1478   1              printd(" ok.\n\r");
1479   1              gconfig_DisplayConfigData(pConfig);
1480   1              return TRUE;
1481   1      
1482   1      } /* End of gconfig_ReStoreParameter() */
1483          
1484          /*
1485           * ----------------------------------------------------------------------------
1486           * Function Name: gconfig_StoreParameter
1487           * Purpose: 
1488           * Params:
1489           * Returns:
1490           * Note:
1491           * ----------------------------------------------------------------------------
1492           */
1493          static BOOL gconfig_StoreParameter(GCONFIG_CFG_DATA *pConfigData, U16_T len)
1494          {
1495   1              U8_T                    ret = FALSE;
1496   1              pFlashParaData  ptrFlashWrite = (void code*)0x003F00;
1497   1      
1498   1          pConfigData->CheckSum = 0;
1499   1          pConfigData->CfgLength = len;
1500   1          pConfigData->CheckSum = ~gconfig_Checksum((U16_T *)pConfigData, len);
1501   1          
1502   1              ret = (*ptrFlashWrite)((U8_T *)pConfigData, len);       
1503   1      
1504   1              if (ret == FALSE)
1505   1                      printd("Failed to program Configration Data!!\r\n");
1506   1      
1507   1              return ret;
1508   1      } /* End of gconfig_StoreParameter() */
1509          
1510          /*
1511          * -----------------------------------------------------------------------------
1512           * Function Name: gconfig_Checksum
1513           * Purpose:
1514           * Params:
1515           * Returns:
1516           * Note:
1517           * ----------------------------------------------------------------------------
1518           */
1519          static U16_T gconfig_Checksum(U16_T *pBuf, U32_T length)
1520          {
1521   1              U32_T   cksum = 0;
1522   1              U32_T   i, count;
1523   1              U8_T*   inChar = &pBuf;
1524   1              U16_T*  point;
1525   1      
1526   1              count = length/2;
1527   1      
1528   1              for (i = 0; i < count; i++)
1529   1              {
1530   2                      point = pBuf;
1531   2                      cksum += *pBuf++;
1532   2                      if (point > pBuf)
1533   2                              (*inChar) = *inChar + 1;
1534   2      
1535   2                      if (!(i % 0x8000))
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 26  

1536   2                      {
1537   3                              cksum = (cksum >> 16) + (cksum & 0xffff);
1538   3                              cksum += (cksum >> 16);
1539   3                              cksum &= 0xffff;
1540   3                      }
1541   2              }
1542   1                      
1543   1              if (length % 2)
1544   1                      cksum += (*pBuf & 0xff00);
1545   1      
1546   1              cksum = (cksum >> 16) + (cksum & 0xffff);
1547   1              cksum += (cksum >> 16);
1548   1              cksum &= 0xffff;
1549   1      
1550   1              return ((U16_T)cksum);
1551   1      } /* End of gconfig_Checksum() */
1552          
1553          /*
1554           * ----------------------------------------------------------------------------
1555           * Function Name: gconfig_DisplayConfigData
1556           * Purpose: 
1557           * Params:
1558           * Returns:
1559           * Note:
1560           * ----------------------------------------------------------------------------
1561           */
1562          static void     gconfig_DisplayConfigData(GCONFIG_CFG_DATA *pConfigData)
1563          {
1564   1              U8_T i, *pData;
1565   1              U8_T dat;
1566   1              U16_T val;
1567   1      
1568   1              if (GS2E_GetTaskState() == GS2E_STATE_IDLE)
1569   1              {
1570   2                      printd("  Device Name: ");
1571   2                      for (i = 0; i < 16; i++)
1572   2                              printd ("%02bx ", pConfigData->DevName.DevName[i]);             
1573   2      
1574   2                      printd("\n\r");
1575   2                      printd("  MAC Addr: ");
1576   2                      for (i = 0; i < 6; i++)
1577   2                              printd ("%02bx ", macAddr.MacAddr[i]);          
1578   2              
1579   2                      printd("\n\r");
1580   2                      printd("  Network Setting: ");
1581   2                      printd ("%04x\r\n", pConfigData->Network);              
1582   2              
1583   2                      val = pConfigData->Network;
1584   2                      
1585   2                      if (val & GCONFIG_NETWORK_CLIENT) printd("  SC:Cli ");
1586   2                      else                                    printd("  SC:Ser ");
1587   2              
1588   2                      if (val & GCONFIG_NETWORK_DHCP_ENABLE) printd("DHCP:On ");
1589   2                      else                                    printd("DHCP:Off ");
1590   2              
1591   2                      if (val & GCONFIG_NETWORK_PROTO_UDP) printd("UDP:On ");
1592   2                      else                                    printd("UDP:Off ");
1593   2              
1594   2                      if (val & GCONFIG_NETWORK_PROTO_TCP) printd("TCP:On ");
1595   2                      else                                    printd("TCP:Off ");
1596   2              
1597   2                      if (val & GCONFIG_NETWORK_PROTO_UDP_MCAST) printd("MC:On ");
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 27  

1598   2                      else                                    printd("MC:Off ");
1599   2              
1600   2                      if (val & GCONFIG_NETWORK_PROTO_UDP_BCAST) printd("BC:On ");
1601   2                      else                                    printd("BC:Off ");
1602   2              
1603   2                      printd("\n\r");
1604   2              
1605   2                      printd("  SIP:");               
1606   2              pData = (U8_T *)&pConfigData->ServerStaticIP;
1607   2                      for (i = 0; i < 4; i++)
1608   2                              printd ("%bu ", *(pData + i));          
1609   2      
1610   2                      printd(" Port: DA: %u", pConfigData->ServerDataPktListenPort);
1611   2                      printd(" MC: %u", pConfigData->ServerMulticastListenPort);
1612   2                      printd(" BC: %u", pConfigData->ServerBroadcastListenPort);
1613   2                      printd("\n\r");
1614   2      
1615   2                      printd("  Dest Host: %s",pConfigData->DestHostName);
1616   2                      printd(" Dest Port: %u", pConfigData->ClientDestPort);
1617   2                      printd("\n\r");
1618   2                      printd("  Netmask:");
1619   2              pData = (U8_T *)&pConfigData->Netmask;
1620   2                      for (i = 0; i < 4; i++)
1621   2                              printd ("%bu ", *(pData + i));          
1622   2      
1623   2                      printd(" Gateway:");
1624   2              pData = (U8_T *)&pConfigData->Gateway;
1625   2                      for (i = 0; i < 4; i++)
1626   2                              printd ("%bu ", *(pData + i));          
1627   2      
1628   2                      printd(" DNS:");
1629   2              pData = (U8_T *)&pConfigData->Dns;
1630   2                      for (i = 0; i < 4; i++)
1631   2                              printd ("%bu ", *(pData + i));          
1632   2      
1633   2                      printd("\n\r");
1634   2                      printd("  Serial Port Setting: ");
1635   2              
1636   2                      dat = (pConfigData->SerialPort>>8) & 0xFF;
1637   2                      val = (dat >> 3) & 0x1F; 
1638   2                      if      (val == 0) printd ("BR:921600 ");
1639   2                      else if (val == 1) printd ("BR:115200 ");
1640   2                      else if (val == 2) printd ("BR:57600 ");
1641   2                      else if (val == 3) printd ("BR:38400 ");
1642   2                      else if (val == 4) printd ("BR:19200 ");
1643   2                      else if (val == 5) printd ("BR:9600 ");
1644   2                      else if (val == 6) printd ("BR:4800 ");
1645   2                      else if (val == 7) printd ("BR:2400 ");
1646   2                      else if (val == 8) printd ("BR:1200 ");
1647   2              
1648   2                      val = dat & 0x07; 
1649   2                      if (val == 0) printd ("DB:5 ");
1650   2                      else if (val == 1) printd ("DB:6 ");
1651   2                      else if (val == 2) printd ("DB:7 ");
1652   2                      else if (val == 3) printd ("DB:8 ");
1653   2              
1654   2                      dat = (pConfigData->SerialPort & 0x00FF);
1655   2              
1656   2                      val = (dat >> 5) & 0x07; 
1657   2                      if (val == 0) printd ("P:Odd ");
1658   2                      else if (val == 1) printd ("P:Even ");
1659   2                      else if (val == 2) printd ("P:None ");
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 28  

1660   2              
1661   2                      val = (dat >> 2) & 0x07; 
1662   2                      if (val == 0) printd ("FC:Xon-Xoff ");
1663   2                      else if (val == 1) printd ("FC:Hardware ");
1664   2                      else if (val == 2) printd ("FC:None ");
1665   2              
1666   2                      val = dat & 0x03; 
1667   2                      if (val == 0) printd ("SB:1 ");
1668   2                      else if (val == 1) printd ("SB:1.5 ");
1669   2      
1670   2                      printd("\n\r");
1671   2                      printd("  Tx Time Interval:%u", pConfigData->EthernetTxTimer);
1672   2                      printd(" Username:%s Password:%s",pConfigData->Admin.Username, pConfigData->Admin.Passwd);
1673   2                      printd("\n\r");
1674   2                      
1675   2                      printd("  E-Mail Server:%s",pConfigData->Smtp.DomainName);              
1676   2                      printd("\n\r");
1677   2                                      
1678   2                      printd("  From:%s",pConfigData->Smtp.FromAddr);
1679   2                      printd("  To1:%s",pConfigData->Smtp.ToAddr1);
1680   2                      printd("\n\r");
1681   2                      
1682   2                      printd("  To2:%s",pConfigData->Smtp.ToAddr2);
1683   2                      printd("  To3:%s",pConfigData->Smtp.ToAddr3);
1684   2                      printd("\n\r");
1685   2                      
1686   2                      val = pConfigData->Smtp.EventEnableBits;
1687   2                      printd("  AutoWarning:%x ", val);
1688   2                      printd("CS:");
1689   2                      if (val & GCONFIG_SMTP_EVENT_COLDSTART) printd("On ");
1690   2                      else printd("Off ");
1691   2                      
1692   2                      printd("AF:");
1693   2                      if (val & GCONFIG_SMTP_EVENT_AUTH_FAIL) printd("On ");
1694   2                      else printd("Off");
1695   2                      
1696   2                      printd("IPC:");
1697   2                      if (val & GCONFIG_SMTP_EVENT_IP_CHANGED) printd("On ");
1698   2                      else printd("Off ");
1699   2      
1700   2                      printd("PC:");
1701   2                      if (val & GCONFIG_SMTP_EVENT_PSW_CHANGED) printd("On ");
1702   2                      else printd("Off ");
1703   2                      printd("\n\r\n\r");
1704   2              }
1705   1      
1706   1      } /* End of gconfig_DisplayConfigData() */
1707          
1708          /* End of gconfig.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7938    ----
   CONSTANT SIZE    =    818    ----
   XDATA SIZE       =    490     138
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.06   GCONFIG                                                               05/28/2013 10:15:30 PAGE 29  

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

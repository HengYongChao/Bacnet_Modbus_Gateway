C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE GCONFIG
OBJECT MODULE PLACED IN .\gconfig.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\management\gconfig.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X
                    -6020) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\h
                    -sur\;..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..
                    -\SRC\buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX110
                    -00\;..\Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\gconfig.lst) OBJECT(.
                    -\gconfig.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2006       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11           /*============================================================================
  12           * Module Name: gconfig.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: gconfig.c,v $
  18           *
  19           *=============================================================================
  20           */
  21          
  22          /* INCLUDE FILE DECLARATIONS */
  23          #include "adapter.h"
  24          #include "gconfig.h"
  25          #include "tcpip.h"
  26          #include "mstimer.h"
  27          #include "stoe.h"
  28          #include "uart.h"
  29          #include "reg80390.h"
  30          #include "printd.h"
  31          #include "ax11000.h"
  32          #include "i2c.h"
  33          #include "i2capi.h"
  34          #include "delay.h"
  35          //#include "hsuart.h"
  36          
  37          #include <absacc.h>
  38          #include <string.h>
  39          
  40          /* NAMING CONSTANT DECLARATIONS */
  41          
  42          /* MACRO DECLARATIONS */
  43          #define GCONFIG_PRINTD(s) printd(s);
  44          #if GCONFIG_EEPROM_CONFIG
              #define ADDROFDEV 0x50
              #endif
  47          /* TYPE DECLARATIONS */
  48          typedef U8_T (*pFlashParaData)(U8_T * addr, U16_T len);
  49          
  50          /* GLOBAL VARIABLES DECLARATIONS */
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 2   

  51          GCONFIG_GID XDATA GCONFIG_Gid = {'A','S','I','X','X','I','S','A'};
  52          U16_T GCONFIG_CFG_PKT_LEN = sizeof(GCONFIG_CFG_PKT);
  53          /* LOCAL VARIABLES DECLARATIONS */
  54          GCONFIG_CFG_DATA XDATA gconfig_ConfigData;
  55          
  56          static gconfig_BaudRateDiv[3][9] =
  57          // br = 921600 115200  57600   38400   19200   9600    4800    2400    1200   
  58                  { {0x0001, 0x0008, 0x0010, 0x0018, 0x0030, 0x0060, 0x00c1, 0x0182, 0x0304},     // System clock = 25 mhz 
  59                    {0x0002, 0x0010, 0x0020, 0x0030, 0x0060, 0x00c1, 0x0181, 0x0304, 0x0607}, // System clock = 50 mhz 
  60                    {0x0004, 0x0020, 0x0040, 0x0060, 0x00c1, 0x0182, 0x0304, 0x0607, 0x0c0e}  // System clock = 100 mhz 
  61                  };
  62          
  63          /* LOCAL SUBPROGRAM DECLARATIONS */
  64          static BOOL     gconfig_ReStoreParameter(U32_T addr, U8_T *pBase, U16_T len);
  65          static BOOL gconfig_StoreParameter(U8_T *pSramBase, U16_T len);
  66          static U8_T     gconfig_U8tCheckSum(U8_T *pValue, U16_T len);
  67          void    gconfig_DisplayFlashReadWriteDebuggMsg(U8_T *pBase);
  68          
  69          /*
  70           * ----------------------------------------------------------------------------
  71           * Function Name: GCONFIG_Task
  72           * Purpose: Main function
  73           * Params:
  74           * Returns:
  75           * Note:
  76           * ----------------------------------------------------------------------------
  77           */
  78          void GCONFIG_Task(void)
  79          {
  80   1      
  81   1      } /* End of GCONFIG_Task() */
  82          
  83          /*
  84           * ----------------------------------------------------------------------------
  85           * Function Name: GCONFIG_Init
  86           * Purpose: Initialization
  87           * Params:
  88           * Returns:
  89           * Note:
  90           * ----------------------------------------------------------------------------
  91           */
  92          void GCONFIG_Init(void)
  93          {
  94   1              U16_T portCfg = 0;
  95   1              U16_T baudRateDiv = 0;
  96   1              U8_T  dataStopParityBits = 0;
  97   1              U16_T val = 0;
  98   1              U8_T  sysClock = 0; 
  99   1              U8_T  flowCtrl = 0;
 100   1      
 101   1              GCONFIG_PRINTD("GCONFIG_Init()...\n\r");
 102   1      
 103   1              // Restore last-saved configuration if applicable       
 104   1              GCONFIG_ReadConfigData();
 105   1      
 106   1              if (gconfig_ConfigData.FirmwareUpgradeMode == GCONFIG_FW_UPGRADE_ENABLE)
 107   1              {
 108   2                      gconfig_ConfigData.FirmwareUpgradeMode = GCONFIG_FW_UPGRADE_DISABLE;
 109   2      
 110   2                      //GCONFIG_WriteConfigData();
 111   2              }
 112   1      } /* End of GCONFIG_Init() */
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 3   

 113          
 114          /////////////////////////////////////////////////////////////////////////////////
 115          
 116          #if GCONFIG_EEPROM_CONFIG
              /*
               * ----------------------------------------------------------------------------
               * Function Name: GCONFIG_SetEpromData
               * Purpose: 
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              void GCONFIG_SetEpromData(GCONFIG_CFG_PKT* pCfgPkt)
              {
                      BOOL rValue;
                      U8_T i;
                      for (i=0; i<34; i+=8) {
                              rValue = I2C_PageWrite(ADDROFDEV, (0x00+i),
                                      &pCfgPkt->EEPromData.EEPromData[i], 8, I2C_STOP_COND);
                              DELAY_Ms(5);
                      }
              } /* End of GCONFIG_SetConfigPacket() */
              #endif
 137          
 138          /*
 139           * ----------------------------------------------------------------------------
 140           * Function Name: GCONFIG_SetConfigPacket
 141           * Purpose: 
 142           * Params:
 143           * Returns:
 144           * Note:
 145           * ----------------------------------------------------------------------------
 146           */
 147          void GCONFIG_SetConfigPacket(GCONFIG_CFG_PKT* pCfgPkt)
 148          {
 149   1              // Store read-only items
 150   1              U32_T ip = GCONFIG_GetServerDynamicIP();
 151   1              
 152   1              // Update whole configuration packet
 153   1              memcpy(&gconfig_ConfigData.ConfigPkt, pCfgPkt, GCONFIG_CFG_PKT_LEN);
 154   1              
 155   1              // Restore read-only items
 156   1              GCONFIG_SetServerDynamicIP(ip);
 157   1              
 158   1              GCONFIG_WriteConfigData();
 159   1      } /* End of GCONFIG_SetConfigPacket() */
 160          
 161          /*
 162           * ----------------------------------------------------------------------------
 163           * Function Name: GCONFIG_GetConfigPacket
 164           * Purpose: 
 165           * Params:
 166           * Returns:
 167           * Note:
 168           * ----------------------------------------------------------------------------
 169           */
 170          void GCONFIG_GetConfigPacket(GCONFIG_CFG_PKT* pCfgPkt)
 171          {
 172   1      //      printd("GCONFIG_GetConfigPacket()...\n\r");
 173   1              GCONFIG_ReadConfigData();
 174   1              memcpy(pCfgPkt, &gconfig_ConfigData.ConfigPkt, GCONFIG_CFG_PKT_LEN);
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 4   

 175   1      } /* End of GCONFIG_GetConfigPacket() */
 176          
 177          /*
 178           * ----------------------------------------------------------------------------
 179           * Function Name: GCONFIG_ReadConfigData
 180           * Purpose: 
 181           * Params:
 182           * Returns:
 183           * Note:
 184           * ----------------------------------------------------------------------------
 185           */
 186          void GCONFIG_ReadConfigData(void)
 187          {
 188   1              BOOL bRet;
 189   1      #if GCONFIG_EEPROM_CONFIG
                      BOOL rValue;
                      I2C_BUF dumpdata;
                      U8_T i;
              #endif
 194   1              GCONFIG_MAC_ADDR macAddr;
 195   1      
 196   1      #if GCONFIG_EEPROM_CONFIG
                      dumpdata.I2cEnd = 0;
                      dumpdata.I2cDir = 0;
                      dumpdata.DataLen = 0;
                      dumpdata.I2cAddr.SevenBitAddr = 0;
                      dumpdata.I2cAddr.TenBitAddr = 0;
                      for (i=0 ; i<MST_MAX_PKT_NUM ; i++)
                              dumpdata.I2cData[i] = 0;
              #endif
 205   1      
 206   1      #if (RUNTIME_CODE_START_ADDRESS == RUNTIME_CODE_START_AT_24kH)
 207   1              bRet = gconfig_ReStoreParameter(0, (U8_T *)&gconfig_ConfigData, (U16_T)sizeof(gconfig_ConfigData));
 208   1      #else
                      GCONFIG_ReadDefaultConfigData();
              #endif
 211   1      
 212   1      #if GCONFIG_EEPROM_CONFIG
              //      GCONFIG_PRINTD("Read EEProm data...\n\r");
                      rValue = I2C_RdmRead((U16_T)0x0050, (U16_T)0x00, &dumpdata, (U16_T)34, I2C_STOP_COND);
              
                      if(!rValue) {
                      //      GCONFIG_PRINTD("I2C_RdmRead error occurred...\n\r");
                      } else {
                              memcpy(&gconfig_ConfigData.ConfigPkt.EEPromData.EEPromData[0], dumpdata.I2cData, 34);
                      }
              #endif
 222   1      
 223   1      #if GCONFIG_DEBUG_FLASH_RW
 224   1              //      printd("GCONFIG_ReadConfigData()...\n\r");
 225   1                      gconfig_DisplayFlashReadWriteDebuggMsg((U8_T*) &gconfig_ConfigData);
 226   1      #endif
 227   1      
 228   1              if (bRet == FALSE || (gconfig_ConfigData.ConfigPkt.ServerStaticIP & 0x000000FF) == 0)
 229   1              {
 230   2              //      printd("ConfigData error\n\r");
 231   2                      GCONFIG_ReadDefaultConfigData();
 232   2      
 233   2      #if GCONFIG_DEBUG_FLASH_RW
 234   2              //      printd("GCONFIG_ReadDefaultConfigData()...\n\r");
 235   2                      gconfig_DisplayFlashReadWriteDebuggMsg((U8_T*) &gconfig_ConfigData);
 236   2      #endif
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 5   

 237   2      
 238   2                      GCONFIG_WriteConfigData();
 239   2              }
 240   1      
 241   1              memcpy(&macAddr, PNetStation->CurrStaAddr, MAC_ADDRESS_LEN);
 242   1              gconfig_ConfigData.ConfigPkt.MacAddr = macAddr;
 243   1      
 244   1      } /* End of GCONFIG_ReadConfigData() */
 245          
 246          /*
 247           * ----------------------------------------------------------------------------
 248           * Function Name: GCONFIG_WriteConfigData
 249           * Purpose: 
 250           * Params:
 251           * Returns:
 252           * Note:
 253           * ----------------------------------------------------------------------------
 254           */
 255          void GCONFIG_WriteConfigData(void)
 256          {
 257   1      #if (RUNTIME_CODE_START_ADDRESS == RUNTIME_CODE_START_AT_24kH)
 258   1              printd("GCONFIG_WriteConfigData()...\n\r");
 259   1              //gconfig_StoreParameter((U8_T *)&gconfig_ConfigData, (U16_T)sizeof(gconfig_ConfigData));         //LHN
 260   1      #endif
 261   1      } /* End of GCONFIG_WriteConfigData() */
 262          
 263          /*
 264           * ----------------------------------------------------------------------------
 265           * Function Name: GCONFIG_ReadDefaultConfigData
 266           * Purpose: 
 267           * Params:
 268           * Returns:
 269           * Note:
 270           * ----------------------------------------------------------------------------
 271           */
 272          
 273          void GCONFIG_ReadDefaultConfigData(void)
 274          {
 275   1              GCONFIG_DEV_NAME devName = {0};
 276   1      
 277   1              gconfig_ConfigData.CheckSum = 0x00;
 278   1              gconfig_ConfigData.FirmwareUpgradeMode = GCONFIG_FW_UPGRADE_DISABLE;
 279   1              gconfig_ConfigData.PowerSaveMode = 0x00;
 280   1              gconfig_ConfigData.WatchDogMode = 0x00;
 281   1              gconfig_ConfigData.DontFragBit = 0x00;
 282   1              gconfig_ConfigData.TcpTimeout = 0x0000;
 283   1              gconfig_ConfigData.PingTimeout = 0x0000;
 284   1      
 285   1              gconfig_ConfigData.ConfigPkt.Gid = GCONFIG_Gid;
 286   1              gconfig_ConfigData.ConfigPkt.Opcode = GCONFIG_OPCODE_NONE;
 287   1              gconfig_ConfigData.ConfigPkt.Reserved = 0;
 288   1              gconfig_ConfigData.ConfigPkt.DevName = devName;
 289   1      
 290   1              gconfig_ConfigData.ConfigPkt.Network = (//GCONFIG_NETWORK_SERVER                | 
 291   1                                                  GCONFIG_NETWORK_DHCP_ENABLE |
 292   1                                                                                              GCONFIG_NETWORK_PROTO_UDP       |
 293   1                                                  GCONFIG_NETWORK_PROTO_TCP   |
 294   1                                                                                              GCONFIG_NETWORK_PROTO_UDP_BCAST );
 295   1      
 296   1              gconfig_ConfigData.ConfigPkt.ServerDynamicIP = GCONFIG_GetServerDynamicIP();
 297   1              gconfig_ConfigData.ConfigPkt.ServerStaticIP = 0xc0a80041;       // 192.168.0.65
 298   1              gconfig_ConfigData.ConfigPkt.ServerUnicastListenPort = 25000;
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 6   

 299   1              gconfig_ConfigData.ConfigPkt.ServerMulticastListenPort = 25100;
 300   1              gconfig_ConfigData.ConfigPkt.ServerBroadcastListenPort = 25122;
 301   1              gconfig_ConfigData.ConfigPkt.ClientDestIP = 0xc0a80002;         // 192.168.0.2
 302   1              gconfig_ConfigData.ConfigPkt.ClientDestPort = 26000;
 303   1              gconfig_ConfigData.ConfigPkt.Netmask = 0xffffff00;                      // 255.255.255.0
 304   1      //      gconfig_ConfigData.ConfigPkt.Gateway = 0xc0a80001;                      // 192.168.0.1
 305   1              gconfig_ConfigData.ConfigPkt.Gateway = 0xc0a80004;
 306   1              gconfig_ConfigData.ConfigPkt.Dns = 0xc0a80001;                          // 192.168.0.1
 307   1      
 308   1              gconfig_ConfigData.ConfigPkt.SerialPort = (GCONFIG_SPORT_BRATE_115200 |
 309   1                                                                         GCONFIG_SPORT_DATABIT_8 |
 310   1                                                                                                 GCONFIG_SPORT_PARITY_NONE |
 311   1                                                                                                 GCONFIG_SPORT_FLOWC_NONE |
 312   1                                                                                                 GCONFIG_SPORT_STOPBIT_1
 313   1                                                                                                );
 314   1      
 315   1      //      printd("default setting %d", gconfig_ConfigData.ConfigPkt.SerialPort);
 316   1      
 317   1              gconfig_ConfigData.ConfigPkt.DeviceStatus = 0;  
 318   1      
 319   1      } /* End of GCONFIG_ReadDefaultConfigData */
 320          
 321          /////////////////////////////////////////////////////////////////////////////////
 322          // Set 
 323          
 324          /*
 325           * ----------------------------------------------------------------------------
 326           * Function Name: GCONFIG_SetFirmwareUpgradeMode
 327           * Purpose: 
 328           * Params: mode = 1: enable firmware ipgrade after reboot ,  mode = 0: disable
 329           * Returns:
 330           * Note:
 331           * ----------------------------------------------------------------------------
 332           */
 333          void GCONFIG_SetFirmwareUpgradeMode(U8_T mode)
 334          {
 335   1              gconfig_ConfigData.FirmwareUpgradeMode = mode;
 336   1      } /* End of GCONFIG_SetFirmwareUpgradeMode() */
 337          
 338          /*
 339           * ----------------------------------------------------------------------------
 340           * Function Name: GCONFIG_GetDeviceName
 341           * Purpose: 
 342           * Params:
 343           * Returns:
 344           * Note:
 345           * ----------------------------------------------------------------------------
 346           */
 347          void GCONFIG_SetDeviceName(GCONFIG_DEV_NAME* pDevName)
 348          {
 349   1              memcpy(&gconfig_ConfigData.ConfigPkt.DevName, pDevName, sizeof(GCONFIG_DEV_NAME)); 
 350   1      } /* End of GCONFIG_GetDeviceName() */
 351          
 352          /*
 353           * ----------------------------------------------------------------------------
 354           * Function Name: GCONFIG_GetMacAddress
 355           * Purpose: 
 356           * Params:
 357           * Returns:
 358           * Note:
 359           * ----------------------------------------------------------------------------
 360           */
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 7   

 361          void GCONFIG_SetMacAddress(GCONFIG_MAC_ADDR* pMacAddr)
 362          {
 363   1              memcpy(&gconfig_ConfigData.ConfigPkt.MacAddr, pMacAddr, sizeof(GCONFIG_MAC_ADDR)); 
 364   1      } /* End of GCONFIG_GetMacAddress() */
 365          
 366          /*
 367           * ----------------------------------------------------------------------------
 368           * Function Name: GCONFIG_GetNetwork
 369           * Purpose: 
 370           * Params:
 371           * Returns:
 372           * Note:
 373           * ----------------------------------------------------------------------------
 374           */
 375          void GCONFIG_SetNetwork(U16_T val)
 376          {
 377   1              gconfig_ConfigData.ConfigPkt.Network = val;
 378   1      } /* End of GCONFIG_GetNetwork() */
 379          
 380          /*
 381           * ----------------------------------------------------------------------------
 382           * Function Name: GCONFIG_SetServerDynamicIP
 383           * Purpose: 
 384           * Params:
 385           * Returns:
 386           * Note:
 387           * ----------------------------------------------------------------------------
 388           */
 389          void GCONFIG_SetServerDynamicIP(U32_T ip)
 390          {
 391   1              gconfig_ConfigData.ConfigPkt.ServerDynamicIP = ip;
 392   1      
 393   1      } /* End of GCONFIG_SetServerDynamicIP() */
 394          
 395          /*
 396           * ----------------------------------------------------------------------------
 397           * Function Name: GCONFIG_SetServerStaticIP
 398           * Purpose: 
 399           * Params:
 400           * Returns:
 401           * Note:
 402           * ----------------------------------------------------------------------------
 403           */
 404          void GCONFIG_SetServerStaticIP(U32_T ip)
 405          {
 406   1              gconfig_ConfigData.ConfigPkt.ServerStaticIP = ip;       
 407   1      } /* End of GCONFIG_SetServerStaticIP() */
 408          
 409          /*
 410           * ----------------------------------------------------------------------------
 411           * Function Name: GCONFIG_SetServerUnicastListenPort
 412           * Purpose: 
 413           * Params:
 414           * Returns:
 415           * Note:
 416           * ----------------------------------------------------------------------------
 417           */
 418          void GCONFIG_SetServerUnicastListenPort(U16_T port)
 419          {
 420   1              gconfig_ConfigData.ConfigPkt.ServerUnicastListenPort = port;
 421   1      } /* End of GCONFIG_SetServerUnicastListenPort() */
 422          
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 8   

 423          /*
 424           * ----------------------------------------------------------------------------
 425           * Function Name: GCONFIG_SetServerMulticastListenPort
 426           * Purpose: 
 427           * Params:
 428           * Returns:
 429           * Note:
 430           * ----------------------------------------------------------------------------
 431           */
 432          void GCONFIG_SetServerMulticastListenPort(U16_T port)
 433          {
 434   1              gconfig_ConfigData.ConfigPkt.ServerMulticastListenPort = port;
 435   1      } /* End of GCONFIG_SetServerMulticastListenPort() */
 436          
 437          /*
 438           * ----------------------------------------------------------------------------
 439           * Function Name: GCONFIG_SetServerBroadcastListenPort
 440           * Purpose: 
 441           * Params:
 442           * Returns:
 443           * Note:
 444           * ----------------------------------------------------------------------------
 445           */
 446          void GCONFIG_SetServerBroadcastListenPort(U16_T port)
 447          {
 448   1              gconfig_ConfigData.ConfigPkt.ServerBroadcastListenPort = port;
 449   1      } /* End of GCONFIG_SetServerBroadcastListenPort() */
 450          
 451          /*
 452           * ----------------------------------------------------------------------------
 453           * Function Name: GCONFIG_GetClientDestIP
 454           * Purpose: 
 455           * Params:
 456           * Returns:
 457           * Note:
 458           * ----------------------------------------------------------------------------
 459           */
 460          void GCONFIG_SetClientDestIP(U32_T ip)
 461          {
 462   1              gconfig_ConfigData.ConfigPkt.ClientDestIP = ip;
 463   1      } /* End of GCONFIG_GetClientDestIP() */
 464          
 465          /*
 466           * ----------------------------------------------------------------------------
 467           * Function Name: GCONFIG_GetClientDestPort
 468           * Purpose: 
 469           * Params:
 470           * Returns:
 471           * Note:
 472           * ----------------------------------------------------------------------------
 473           */
 474          void GCONFIG_SetClientDestPort(U16_T port)
 475          {
 476   1              gconfig_ConfigData.ConfigPkt.ClientDestPort = port;
 477   1      } /* End of GCONFIG_GetClientDestPort() */
 478          
 479          /*
 480           * ----------------------------------------------------------------------------
 481           * Function Name: GCONFIG_GetNetmask
 482           * Purpose: 
 483           * Params:
 484           * Returns:
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 9   

 485           * Note:
 486           * ----------------------------------------------------------------------------
 487           */
 488          void GCONFIG_SetNetmask(U32_T netmask)
 489          {
 490   1              gconfig_ConfigData.ConfigPkt.Netmask = netmask;
 491   1      
 492   1      } /* End of GCONFIG_GetNetmask() */
 493          
 494          /*
 495           * ----------------------------------------------------------------------------
 496           * Function Name: GCONFIG_GetGateway
 497           * Purpose: 
 498           * Params:
 499           * Returns:
 500           * Note:
 501           * ----------------------------------------------------------------------------
 502           */
 503          void GCONFIG_SetGateway(U32_T gateway)
 504          {
 505   1              gconfig_ConfigData.ConfigPkt.Gateway = gateway;
 506   1      } /* End of GCONFIG_GetGateway() */
 507          
 508          /*
 509           * ----------------------------------------------------------------------------
 510           * Function Name: GCONFIG_GetDNS
 511           * Purpose: 
 512           * Params:
 513           * Returns:
 514           * Note:
 515           * ----------------------------------------------------------------------------
 516           */
 517          void GCONFIG_SetDNS(U32_T dns)
 518          {
 519   1              gconfig_ConfigData.ConfigPkt.Dns = dns;
 520   1      } /* End of GCONFIG_GetDNS() */
 521          
 522          /*
 523           * ----------------------------------------------------------------------------
 524           * Function Name: GCONFIG_GetSerialPort
 525           * Purpose: 
 526           * Params:
 527           * Returns:
 528           * Note:
 529           * ----------------------------------------------------------------------------
 530           */
 531          void GCONFIG_SetSerialPort(U16_T sPort)
 532          {
 533   1              gconfig_ConfigData.ConfigPkt.SerialPort = sPort;
 534   1      } /* End of GCONFIG_GetSerialPort() */
 535          
 536          /*
 537           * ----------------------------------------------------------------------------
 538           * Function Name: GCONFIG_SetDeviceStatus
 539           * Purpose: 
 540           * Params:
 541           * Returns:
 542           * Note:
 543           * ----------------------------------------------------------------------------
 544           */
 545          void GCONFIG_SetDeviceStatus(U16_T status)
 546          {
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 10  

 547   1              gconfig_ConfigData.ConfigPkt.DeviceStatus = status;
 548   1      } /* End of GCONFIG_SetDeviceStatus() */
 549          
 550          /////////////////////////////////////////////////////////////////////////////////
 551          // Get 
 552          
 553          /*
 554           * ----------------------------------------------------------------------------
 555           * Function Name: GCONFIG_GetFirmwareUpgradeMode
 556           * Purpose: 
 557           * Params:
 558           * Returns: 1: enable firmware ipgrade after reboot ,  0: disable
 559           * Note:
 560           * ----------------------------------------------------------------------------
 561           */
 562          U8_T GCONFIG_GetFirmwareUpgradeMode(void)
 563          {
 564   1              return gconfig_ConfigData.FirmwareUpgradeMode;
 565   1      } /* End of GCONFIG_GetFirmwareUpgradeMode() */
 566          
 567          /*
 568           * ----------------------------------------------------------------------------
 569           * Function Name: GCONFIG_GetDeviceName
 570           * Purpose: 
 571           * Params:
 572           * Returns:
 573           * Note:
 574           * ----------------------------------------------------------------------------
 575           */
 576          GCONFIG_DEV_NAME GCONFIG_GetDeviceName(void)
 577          {
 578   1              return gconfig_ConfigData.ConfigPkt.DevName;
 579   1      } /* End of GCONFIG_GetDeviceName() */
 580          
 581          /*
 582           * ----------------------------------------------------------------------------
 583           * Function Name: GCONFIG_GetMacAddress
 584           * Purpose: 
 585           * Params:
 586           * Returns:
 587           * Note:
 588           * ----------------------------------------------------------------------------
 589           */
 590          GCONFIG_MAC_ADDR GCONFIG_GetMacAddress(void)
 591          {
 592   1              return gconfig_ConfigData.ConfigPkt.MacAddr;
 593   1      } /* End of GCONFIG_GetMacAddress() */
 594          
 595          /*
 596           * ----------------------------------------------------------------------------
 597           * Function Name: GCONFIG_GetNetwork
 598           * Purpose: 
 599           * Params:
 600           * Returns:
 601           * Note:
 602           * ----------------------------------------------------------------------------
 603           */
 604          U16_T GCONFIG_GetNetwork(void)
 605          {
 606   1              return gconfig_ConfigData.ConfigPkt.Network;
 607   1      } /* End of GCONFIG_GetNetwork() */
 608          
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 11  

 609          /*
 610           * ----------------------------------------------------------------------------
 611           * Function Name: GCONFIG_GetServerDynamicIP
 612           * Purpose: 
 613           * Params:
 614           * Returns:
 615           * Note:
 616           * ----------------------------------------------------------------------------
 617           */
 618          U32_T GCONFIG_GetServerDynamicIP(void)
 619          {
 620   1              return gconfig_ConfigData.ConfigPkt.ServerDynamicIP;
 621   1      } /* End of GCONFIG_GetServerDynamicIP() */
 622          
 623          /*
 624           * ----------------------------------------------------------------------------
 625           * Function Name: GCONFIG_GetServerStaticIP
 626           * Purpose: 
 627           * Params:
 628           * Returns:
 629           * Note:
 630           * ----------------------------------------------------------------------------
 631           */
 632          U32_T GCONFIG_GetServerStaticIP(void)
 633          {
 634   1              return gconfig_ConfigData.ConfigPkt.ServerStaticIP;
 635   1      } /* End of GCONFIG_GetServerStaticIP() */
 636          
 637          /*
 638           * ----------------------------------------------------------------------------
 639           * Function Name: GCONFIG_GetServerUnicastListenPort
 640           * Purpose: 
 641           * Params:
 642           * Returns:
 643           * Note:
 644           * ----------------------------------------------------------------------------
 645           */
 646          U16_T GCONFIG_GetServerUnicastListenPort(void)
 647          {
 648   1              return gconfig_ConfigData.ConfigPkt.ServerUnicastListenPort;
 649   1      } /* End of GCONFIG_GetServerUnicastListenPort() */
 650          
 651          /*
 652           * ----------------------------------------------------------------------------
 653           * Function Name: GCONFIG_GetServerMulticastListenPort
 654           * Purpose: 
 655           * Params:
 656           * Returns:
 657           * Note:
 658           * ----------------------------------------------------------------------------
 659           */
 660          U16_T GCONFIG_GetServerMulticastListenPort(void)
 661          {
 662   1              return gconfig_ConfigData.ConfigPkt.ServerMulticastListenPort;
 663   1      } /* End of GCONFIG_GetServerMulticastListenPort() */
 664          
 665          /*
 666           * ----------------------------------------------------------------------------
 667           * Function Name: GCONFIG_GetServerBroadcastListenPort
 668           * Purpose: 
 669           * Params:
 670           * Returns:
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 12  

 671           * Note:
 672           * ----------------------------------------------------------------------------
 673           */
 674          U16_T GCONFIG_GetServerBroadcastListenPort(void)
 675          {
 676   1              return gconfig_ConfigData.ConfigPkt.ServerBroadcastListenPort;
 677   1      } /* End of GCONFIG_GetServerBroadcastListenPort() */
 678          
 679          /*
 680           * ----------------------------------------------------------------------------
 681           * Function Name: GCONFIG_GetClientDestIP
 682           * Purpose: 
 683           * Params:
 684           * Returns:
 685           * Note:
 686           * ----------------------------------------------------------------------------
 687           */
 688          U32_T GCONFIG_GetClientDestIP(void)
 689          {
 690   1              return gconfig_ConfigData.ConfigPkt.ClientDestIP;
 691   1      } /* End of GCONFIG_GetClientDestIP() */
 692          
 693          /*
 694           * ----------------------------------------------------------------------------
 695           * Function Name: GCONFIG_GetClientDestPort
 696           * Purpose: 
 697           * Params:
 698           * Returns:
 699           * Note:
 700           * ----------------------------------------------------------------------------
 701           */
 702          U16_T GCONFIG_GetClientDestPort(void)
 703          {
 704   1              return gconfig_ConfigData.ConfigPkt.ClientDestPort;
 705   1      } /* End of GCONFIG_GetClientDestPort() */
 706          
 707          /*
 708           * ----------------------------------------------------------------------------
 709           * Function Name: GCONFIG_GetNetmask
 710           * Purpose: 
 711           * Params:
 712           * Returns:
 713           * Note:
 714           * ----------------------------------------------------------------------------
 715           */
 716          U32_T GCONFIG_GetNetmask(void)
 717          {
 718   1              return gconfig_ConfigData.ConfigPkt.Netmask;
 719   1      } /* End of GCONFIG_GetNetmask() */
 720          
 721          /*
 722           * ----------------------------------------------------------------------------
 723           * Function Name: GCONFIG_GetGateway
 724           * Purpose: 
 725           * Params:
 726           * Returns:
 727           * Note:
 728           * ----------------------------------------------------------------------------
 729           */
 730          U32_T GCONFIG_GetGateway(void)
 731          {
 732   1              return gconfig_ConfigData.ConfigPkt.Gateway;
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 13  

 733   1      } /* End of GCONFIG_GetGateway() */
 734          
 735          /*
 736           * ----------------------------------------------------------------------------
 737           * Function Name: GCONFIG_GetDNS
 738           * Purpose: 
 739           * Params:
 740           * Returns:
 741           * Note:
 742           * ----------------------------------------------------------------------------
 743           */
 744          U32_T GCONFIG_GetDNS(void)
 745          {
 746   1              return gconfig_ConfigData.ConfigPkt.Dns;
 747   1      } /* End of GCONFIG_GetDNS() */
 748          
 749          /*
 750           * ----------------------------------------------------------------------------
 751           * Function Name: GCONFIG_GetSerialPort
 752           * Purpose: 
 753           * Params:
 754           * Returns:
 755           * Note:
 756           * ----------------------------------------------------------------------------
 757           */
 758          U16_T GCONFIG_GetSerialPort(void)
 759          {
 760   1              return gconfig_ConfigData.ConfigPkt.SerialPort;
 761   1      } /* End of GCONFIG_GetSerialPort() */
 762          
 763          /*
 764           * ----------------------------------------------------------------------------
 765           * Function Name: GCONFIG_GetDeviceStatus
 766           * Purpose: 
 767           * Params:
 768           * Returns:
 769           * Note:
 770           * ----------------------------------------------------------------------------
 771           */
 772          U16_T GCONFIG_GetDeviceStatus(void)
 773          {
 774   1              return gconfig_ConfigData.ConfigPkt.DeviceStatus;
 775   1      } /* End of GCONFIG_GetDeviceStatus() */
 776          
 777          
 778          /*
 779           * ----------------------------------------------------------------------------
 780           * Function Name: GCONFIG_FirmwareUpgradeReg
 781           * Purpose: 
 782           * Params:
 783           * Returns:
 784           * Note:
 785           * ----------------------------------------------------------------------------
 786           */
 787          void GCONFIG_FirmwareUpgradeReg(void)
 788          {
 789   1              GCONFIG_SetFirmwareUpgradeMode(GCONFIG_FW_UPGRADE_ENABLE);
 790   1              GCONFIG_WriteConfigData();              
 791   1              AX11000_SoftReset();            
 792   1      } /* End of GCONFIG_FirmwareUpgradeReg() */
 793          
 794          /////////////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 14  

 795          
 796          /*
 797           * ----------------------------------------------------------------------------
 798           * Function Name: gconfig_ReStoreParameter
 799           * Purpose: 
 800           * Params:
 801           * Returns:
 802           * Note:
 803           * ----------------------------------------------------------------------------
 804           */
 805          static BOOL gconfig_ReStoreParameter(U32_T addr, U8_T *pBase, U16_T len)
 806          {
 807   1                              U16_T   i;
 808   1                              U8_T    *pParaBaseByte;
 809   1                              U16_T   paraDataLen = 0;
 810   1                              U8_T    paraCheckSum = 0;
 811   1                              U8_T    lastWtst = 0;
 812   1                      
 813   1                              pParaBaseByte = pBase;
 814   1                              paraDataLen = len;
 815   1                      
 816   1                              lastWtst = WTST;
 817   1                              WTST = PROG_WTST_7;
 818   1                              if (CSREPR & PMS) // SRAM shadow
 819   1                              {
 820   2                                      CSREPR |= FAES;
 821   2                                      for (i = 0 ; i < len ; i++)
 822   2                                      {
 823   3                                              *(pParaBaseByte + i) = FCVAR(U8_T, GCONFIG_CFG_DATA_FLASH_ADDR + addr + i);
 824   3                                      }
 825   2                                      CSREPR &= ~FAES;
 826   2                              }
 827   1                              else
 828   1                              {
 829   2                                      CSREPR &= ~FAES;
 830   2                                      for (i = 0 ; i < len ; i++)
 831   2                                      {
 832   3                                              *(pParaBaseByte + i) = FCVAR(U8_T, GCONFIG_CFG_DATA_FLASH_ADDR + addr + i);
 833   3                                      }
 834   2                              }
 835   1                              WTST = lastWtst;
 836   1                      
 837   1                              paraCheckSum = gconfig_U8tCheckSum((pParaBaseByte + 1), (len-1));
 838   1                      
 839   1                      #if GCONFIG_DEBUG_FLASH_RW
 840   1      //                      printd("gconfig_ReStoreParameter()...\n\r");
 841   1                              gconfig_DisplayFlashReadWriteDebuggMsg(pBase);
 842   1                      #endif
 843   1                              
 844   1                              if (paraCheckSum != *(pParaBaseByte))
 845   1                              {
 846   2                              //      printd("gconfig_ReStoreParameter() failed! (Wrong checksum)\n\r");
 847   2                                      return FALSE;
 848   2                              }
 849   1              return TRUE;
 850   1      } /* End of gconfig_ReStoreParameter() */
 851          
 852          /*
 853           * ----------------------------------------------------------------------------
 854           * Function Name: gconfig_StoreParameter
 855           * Purpose: 
 856           * Params:
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 15  

 857           * Returns:
 858           * Note:
 859           * ----------------------------------------------------------------------------
 860           */
 861          static BOOL gconfig_StoreParameter(U8_T *pSramBase, U16_T len)
 862          {
 863   1              U8_T                    ret = FALSE;
 864   1              U8_T                    paraCheckSum = 0;
 865   1              pFlashParaData  ptrFlashWrite = (void code*)0x003F00;
 866   1      
 867   1      #if GCONFIG_DEBUG_FLASH_RW
 868   1      //      printd("gconfig_StoreParameter()...\n\r");
 869   1              gconfig_DisplayFlashReadWriteDebuggMsg(pSramBase);
 870   1      #endif
 871   1      
 872   1              paraCheckSum = gconfig_U8tCheckSum((pSramBase + 1), (len-1));
 873   1              *(pSramBase) = paraCheckSum;
 874   1      
 875   1              ret = (*ptrFlashWrite)(pSramBase, len); 
 876   1      
 877   1              if (ret == FALSE)
 878   1                      return FALSE;
 879   1      
 880   1              return TRUE;
 881   1      } /* End of gconfig_StoreParameter() */
 882          
 883          /*
 884           * ----------------------------------------------------------------------------
 885           * Function Name: gconfig_U8tCheckSum
 886           * Purpose: 
 887           * Params:
 888           * Returns:
 889           * Note:
 890           * ----------------------------------------------------------------------------
 891           */
 892          static U8_T gconfig_U8tCheckSum(U8_T *pValue, U16_T len)
 893          {
 894   1              U16_T   i;
 895   1              U8_T    chkSum = 0;
 896   1      
 897   1              for (i=0 ; i<len ; i++)
 898   1              {
 899   2                      chkSum = chkSum + pValue[i] ;
 900   2              }
 901   1      
 902   1              chkSum = ~chkSum;
 903   1      
 904   1              return chkSum;
 905   1      } /* End of gconfig_U8tCheckSum() */
 906          
 907          /*
 908           * ----------------------------------------------------------------------------
 909           * Function Name: gconfig_DisplayFlashReadWriteDebuggMsg
 910           * Purpose: 
 911           * Params:
 912           * Returns:
 913           * Note:
 914           * ----------------------------------------------------------------------------
 915           */
 916          void    gconfig_DisplayFlashReadWriteDebuggMsg(U8_T *pBase)
 917          {
 918   1      //      U8_T i;
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 16  

 919   1      //      U8_T dat;
 920   1      //      U16_T val;
 921   1              GCONFIG_CFG_PKT *ptr = (GCONFIG_CFG_PKT *)(pBase+9);
 922   1      #if 0
              //      if (GS2E_GetTaskState() == GS2E_STATE_IDLE)
                      {
                              printd("   1.Header: ");
                              for (i = 0 ; i < 9; i++)
                                      printd ("%02bx ", *(pBase + i));                
                      
                              printd("\n\r");
                              printd("   2.GID: ");
                              for (i = 9 ; i < 17; i++)
                                      printd ("%02bx ", *(pBase + i));                
                              
                              printd("\n\r");
                              printd("   3.Opcode | Reserved: ");
                              for (i = 17 ; i < 19; i++)
                                      printd ("%02bx ", *(pBase + i));                
                      
                              printd("\n\r");
                              printd("   4.Device Name: ");
                              for (i = 19 ; i < 35; i++)
                                      printd ("%02bx ", *(pBase + i));                
                      
                              printd("\n\r");
                              printd("   5.MAC Addr: ");
                              for (i = 35 ; i < 41; i++)
                                      printd ("%02bx ", *(pBase + i));                
                      
                              printd("\n\r");
                              printd("   6.Network Setting: ");
                              for (i = 41 ; i < 43; i++)
                                      printd ("%02bx ", *(pBase + i));                
                      
                              dat = *(pBase + 41);
                      
                      //      printd ("SW:%02bx DHCP:%02bx, U:%02bx T:%02bx B:%02bx M:%02bx", 
                      //               dat & 0x80, dat & 0x40, dat & 0x08, dat & 0x04, dat & 0x02, dat & 0x01 );      
                      
                              if ((dat & 0x80) == 0x80) printd("SW:Cli ");
                              else                                    printd("SW:Ser ");
                      
                              if ((dat & 0x40) == 0x40) printd("DHCP:On ");
                              else                                    printd("DHCP:Off ");
                      
                              if ((dat & 0x08) == 0x08) printd("UDP:On ");
                              else                                    printd("UDP:Off ");
                      
                              if ((dat & 0x04) == 0x04) printd("TCP:On ");
                              else                                    printd("TCP:Off ");
                      
                              if ((dat & 0x02) == 0x02) printd("MC:On ");
                              else                                    printd("MC:Off ");
                      
                              if ((dat & 0x01) == 0x01) printd("BC:On ");
                              else                                    printd("BC:Off ");
                      
                              printd("\n\r");
                              printd("   7.D-IP | S-IP | U-M-B Port: ");
                              
                              for (i = 43 ; i < 51; i++)
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 17  

                                      printd ("%bu ", *(pBase + i));          
                      
                              for (i = 51 ; i < 57; i+=2)
                              {
                                      val = ((*(pBase + i) << 8) & 0xFF00) + *(pBase + i + 1);        
                                      printd ("%u ", val);            
                              }
                      
                              printd("\n\r");
                              printd("   8.Dest IP | Dest Port: ");
                      
                              for (i = 57 ; i < 61; i++)
                                      printd ("%bu ", *(pBase + i));          
                      
                              for (i = 61 ; i < 53; i+=2)
                              {
                                      val = ((*(pBase + i) << 8) & 0xFF00) + *(pBase + i + 1);        
                                      printd ("%u ", val);            
                              }
                      
                              printd("\n\r");
                              printd("   9.Netmask | Gateway | DNS: ");
                              for (i = 63 ; i < 75; i++)
                                      printd ("%bu ", *(pBase + i));          
                      
                              printd("\n\r");
                              printd("   10.Serial Port Setting: ");
                      //      for (i = 75 ; i < 77; i++)
                      //              printd ("%02bx ", *(pBase + i));                
                      
                              dat = *(pBase + 75);
                              val = (dat >> 3) & 0x1F; 
                              if (val == 0) printd ("BR:115200 ");
                              else if (val == 1) printd ("BR:57600 ");
                              else if (val == 2) printd ("BR:38400 ");
                              else if (val == 3) printd ("BR:19200 ");
                              else if (val == 4) printd ("BR:9600 ");
                              else if (val == 5) printd ("BR:4800 ");
                              else if (val == 6) printd ("BR:2400 ");
                              else if (val == 7) printd ("BR:1200 ");
                      
                              val = dat & 0x07; 
                              if (val == 0) printd ("DB:5 ");
                              else if (val == 1) printd ("DB:6 ");
                              else if (val == 2) printd ("DB:7 ");
                              else if (val == 3) printd ("DB:8 ");
                      
                              dat = *(pBase + 76);
                      
                              val = (dat >> 5) & 0x07; 
                              if (val == 0) printd ("P:Odd ");
                              else if (val == 1) printd ("P:Even ");
                              else if (val == 2) printd ("P:None ");
                      
                              val = (dat >> 2) & 0x07; 
                              if (val == 0) printd ("FC:Xon-Xoff ");
                              else if (val == 1) printd ("FC:Hardware ");
                              else if (val == 2) printd ("FC:None ");
                      
                              val = dat & 0x03; 
                              if (val == 0) printd ("SB:1 ");
                              else if (val == 1) printd ("SB:1.5 ");
C51 COMPILER V9.06   GCONFIG                                                               03/13/2013 09:32:24 PAGE 18  

                      //      else if (val == 2) printd ("SB:2 ");
                      
                              printd("\n\r");
                              printd("   11.Status: ");
                              for (i = 77 ; i < 79; i++)
                                      printd ("%02bx ", *(pBase + i));                
              
              #if 0
                              printd("\n\r");
                              printd("   12.EEPROM DATA: ");
                              for (i=0; i<34; i++)
                              {
                                      printd ("%02bx ", ptr->EEPromData.EEPromData[i]);
                                      if ( (i!=0) && ((i+1)%16 == 0) )
                                              printd("\n\r                   ");
                              }
              #endif
                      //      printd("\n\r");
                      }
              
               
                #endif
1065   1      
1066   1      } /* End of gconfig_DisplayFlashReadWriteDebuggMsg() */
1067          
1068          /* End of gconfig.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1648    ----
   CONSTANT SIZE    =     67    ----
   XDATA SIZE       =    143      76
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

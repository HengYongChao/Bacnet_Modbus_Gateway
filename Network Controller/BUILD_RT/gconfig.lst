C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE GCONFIG
OBJECT MODULE PLACED IN .\gconfig.obj
COMPILER INVOKED BY: E:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\management\gconfig.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X
                    -6020) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\h
                    -sur\;..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..
                    -\SRC\buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX110
                    -00\;..\Src\FreeRTOSSource\include\;..\Src\schedule\;..\src\bacnet;..\src\include;..\src\LCD;..\src\version;..\src\modbus
                    -TCP;..\src\gs2e;..\src\adpter1;..\src\scan;..\src\gsm) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\gconfig.lst) OBJECT
                    -(.\gconfig.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2006       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11           /*============================================================================
  12           * Module Name: gconfig.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: gconfig.c,v $
  18           *
  19           *=============================================================================
  20           */
  21          
  22          /* INCLUDE FILE DECLARATIONS */
  23          #include "adapter.h"
  24          #include "gconfig.h"
  25          
  26          #include "gs2e.h"
  27          #include "tcpip.h"
  28          #include "mstimer.h"
  29          #include "stoe.h"
  30          #include "uart.h"
  31          #include "reg80390.h"
  32          #include "printd.h"
  33          #include "ax11000.h"
  34          #include "hsuart.h"
  35          #include "filesys.h"
  36          
  37          #include <absacc.h>
  38          #include <string.h>
  39          
  40          #include "main.h"
  41          #if (INCLUDE_DNS_CLIENT)
              #include "dnsc.h"
              #endif
  44          /* NAMING CONSTANT DECLARATIONS */
  45          #define DEVICE_STATUS_IDLE                      0
  46          #define DEVICE_STATUS_CONNECTED         1
  47          #define ENABLE_FIRMWARE_UPGRADE         0x5A
  48          
  49          /* MACRO DECLARATIONS */
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 2   

  50          
  51          /* TYPE DECLARATIONS */
  52          typedef U8_T (*pFlashParaData)(U8_T * addr, U16_T len);
  53          
  54          /* GLOBAL VARIABLES DECLARATIONS */
  55          GCONFIG_GID XDATA GCONFIG_Gid = {'A','S','I','X','X','I','S','A'};
  56          
  57          /* LOCAL VARIABLES DECLARATIONS */
  58          U8_T XDATA gconfig_SysClock;
  59          GCONFIG_CFG_DATA XDATA gconfig_ConfigData;
  60          U8_T IDATA FirmwareUpgradeFlag[4] _at_ 0x31;
  61          static GCONFIG_MAC_ADDR macAddr;
  62          
  63          U8_T XDATA gs2e_State;
  64          
  65          
  66          /* LOCAL SUBPROGRAM DECLARATIONS */
  67          static BOOL     gconfig_ReStoreParameter(U32_T addr, GCONFIG_CFG_DATA *pConfig, U16_T len);
  68          static BOOL gconfig_StoreParameter(GCONFIG_CFG_DATA *pSramBase, U16_T len);
  69          static U16_T gconfig_Checksum(U16_T *pBuf, U32_T length);
  70          static void     gconfig_DisplayConfigData(GCONFIG_CFG_DATA *pConfig);
  71          
  72          /*
  73           * ----------------------------------------------------------------------------
  74           * Function Name: GCONFIG_Task
  75           * Purpose: Main function
  76           * Params:
  77           * Returns:
  78           * Note:
  79           * ----------------------------------------------------------------------------
  80           */
  81          void GCONFIG_Task(void)
  82          {
  83   1      
  84   1      } /* End of GCONFIG_Task() */
  85          
  86          /*
  87           * ----------------------------------------------------------------------------
  88           * Function Name: GS2E_GetTaskState
  89           * Purpose: 
  90           * Params:
  91           * Returns:
  92           * Note:
  93           * ----------------------------------------------------------------------------
  94           */
  95          U8_T GS2E_GetTaskState(void)
  96          {
  97   1              return gs2e_State;
  98   1      } /* End of GS2E_GetTaskState() */
  99          /*
 100           * ----------------------------------------------------------------------------
 101           * Function Name: GS2E_SetTaskState
 102           * Purpose: 
 103           * Params:
 104           * Returns:
 105           * Note:
 106           * ----------------------------------------------------------------------------
 107           */
 108          void GS2E_SetTaskState(U8_T state)
 109          {
 110   1              gs2e_State = state;
 111   1      } /* End of GS2E_SetTaskState() */
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 3   

 112          
 113          
 114          
 115          /*
 116           * ----------------------------------------------------------------------------
 117           * Function Name: GCONFIG_Init
 118           * Purpose: Initialization
 119           * Params:
 120           * Returns:
 121           * Note:
 122           * ----------------------------------------------------------------------------
 123           */
 124          //void GCONFIG_Init(void)
 125          //{
 126          //      U16_T portCfg;
 127          //      U16_T baudRateDiv;
 128          //      U8_T  dataStopParityBits = 0;
 129          //      U16_T val;
 130          //      U8_T  flowCtrl, rs485;
 131          //      
 132          //      // Restore last-saved configuration if applicable       
 133          //      GS2E_SetTaskState(GS2E_STATE_IDLE);
 134          //    memcpy((char *)&macAddr, PNetStation->CurrStaAddr, MAC_ADDRESS_LEN);
 135          //      GCONFIG_ReadConfigData();
 136          //
 137          //      // UART 2 parameters setting
 138          //      portCfg = GCONFIG_GetSerialPort();
 139          //      
 140          //      gconfig_SysClock = AX11000_GetSysClk();
 141          //      
 142          //      val = (portCfg >> 11) & 0x001F;
 143          // 
 144          //      baudRateDiv = GCONFIG_GetBaudRate(val);
 145          //
 146          //      val = (portCfg >> 8) & 0x0007; 
 147          //      if (val == 0)           dataStopParityBits |= UR2_CHAR_5;
 148          //      else if (val == 1)      dataStopParityBits |= UR2_CHAR_6;
 149          //      else if (val == 2)      dataStopParityBits |= UR2_CHAR_7;
 150          //      else                            dataStopParityBits |= UR2_CHAR_8;
 151          //
 152          //      val = (portCfg >> 5) & 0x0007; 
 153          //      if (val == 0 || val == 1) dataStopParityBits |= UR2_PARITY_ENB;
 154          //      if (val == 1)                     dataStopParityBits |= UR2_EVEN_PARITY;
 155          //
 156          //      val = portCfg & 0x0003; 
 157          //      if (val == 0)   dataStopParityBits |= UR2_STOP_10;
 158          //      else                    dataStopParityBits |= UR2_STOP_15;
 159          //      
 160          //      val = (portCfg >> 2) & 0x0007; 
 161          //      if (val == 0)           flowCtrl = UR2_FLOW_CTRL_X;
 162          //      else if (val == 1)      flowCtrl = UR2_FLOW_CTRL_HW;
 163          //      else                            flowCtrl = UR2_FLOW_CTRL_NO;
 164          //
 165          //    rs485 = (UR2_DTR | UR2_RTS);
 166          //    val = GCONFIG_GetRs485Mode();
 167          //
 168          //    if (val == 1)
 169          //        rs485 |= UR2_RS485_RECEIVE;
 170          //    else if (val == 2)
 171          //        rs485 |= UR2_RS485_DRIVE;
 172          //    else if (val == 3)
 173          //        rs485 |= (UR2_RS485_DRIVE | UR2_RS485_RECEIVE);
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 4   

 174          //
 175          //      HSUR_Setup( baudRateDiv, 
 176          //                  dataStopParityBits, 
 177          //                              (UR2_RDI_ENB|UR2_RLSI_ENB|UR2_MSI_ENB),
 178          //                              (UR2_FIFO_MODE|UR2_RXFIFO_RST|UR2_TXFIFO_RST|UR2_TRIG_08), 
 179          //                              rs485);
 180          // 
 181          //      HSUR_SetFlowControl(flowCtrl);  
 182          //
 183          //} /* End of GCONFIG_Init() */
 184          
 185          /////////////////////////////////////////////////////////////////////////////////
 186          
 187          
 188          
 189          
 190          void GCONFIG_Init(void)
 191          {
 192   1              U16_T portCfg = 0;
 193   1              U16_T baudRateDiv = 0;
 194   1              U8_T  dataStopParityBits = 0;
 195   1              U16_T val = 0;
 196   1              U8_T  sysClock = 0; 
 197   1              U8_T  flowCtrl = 0;
 198   1      
 199   1      //      GCONFIG_PRINTD("GCONFIG_Init()...\n\r");
 200   1      
 201   1              // Restore last-saved configuration if applicable       
 202   1              GCONFIG_ReadConfigData();
 203   1      
 204   1      //      if (gconfig_ConfigData.FirmwareUpgradeMode == GCONFIG_FW_UPGRADE_ENABLE)
 205   1      //      {
 206   1      //              gconfig_ConfigData.FirmwareUpgradeMode = GCONFIG_FW_UPGRADE_DISABLE;
 207   1      //
 208   1      //              //GCONFIG_WriteConfigData();
 209   1      //      }
 210   1      
 211   1      } /* End of GCONFIG_Init() */
 212          
 213          
 214          /*
 215           * ----------------------------------------------------------------------------
 216           * Function Name: GCONFIG_SetConfigPacket
 217           * Purpose: 
 218           * Params:
 219           * Returns:
 220           * Note:
 221           * ----------------------------------------------------------------------------
 222           */
 223          void GCONFIG_SetConfigPacket(GCONFIG_CFG_PKT* pCfgPkt)
 224          {
 225   1              gconfig_ConfigData.Option = pCfgPkt->Option;
 226   1              gconfig_ConfigData.DevName = pCfgPkt->DevName;
 227   1              gconfig_ConfigData.Network = pCfgPkt->Network;
 228   1              gconfig_ConfigData.ServerStaticIP = pCfgPkt->ServerStaticIP;
 229   1              gconfig_ConfigData.ServerDataPktListenPort = pCfgPkt->ServerDataPktListenPort;
 230   1              gconfig_ConfigData.ServerMulticastListenPort = pCfgPkt->ServerMulticastListenPort;
 231   1              gconfig_ConfigData.ServerBroadcastListenPort = pCfgPkt->ServerBroadcastListenPort;
 232   1              gconfig_ConfigData.ClientDestIP = pCfgPkt->ClientDestIP;
 233   1              gconfig_ConfigData.ClientDestPort = pCfgPkt->ClientDestPort; 
 234   1              gconfig_ConfigData.Netmask = pCfgPkt->Netmask;
 235   1              gconfig_ConfigData.Gateway = pCfgPkt->Gateway;
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 5   

 236   1              gconfig_ConfigData.Dns = pCfgPkt->Dns;
 237   1              gconfig_ConfigData.SerialPort = pCfgPkt->SerialPort;            
 238   1              gconfig_ConfigData.EthernetTxTimer = pCfgPkt->EthernetTxTimer;
 239   1      
 240   1          gconfig_ConfigData.Rs485Mode = pCfgPkt->Rs485Mode;
 241   1          memcpy((char *)&gconfig_ConfigData.AccessibleIP[0], (char *)&pCfgPkt->AccessibleIP[0], (GCONFIG_ACCESS
             -IBLE_IP_NUM*4));
 242   1          memcpy((char *)&gconfig_ConfigData.Smtp, (char *)&pCfgPkt->Smtp, sizeof(GCONFIG_SMTP_CONFIG));
 243   1          memcpy((char *)&gconfig_ConfigData.DestHostName, (char *)&pCfgPkt->DestHostName, 36);
 244   1              
 245   1          gconfig_ConfigData.TftpServerIp = pCfgPkt->TftpServerIp;
 246   1          memcpy((char *)&gconfig_ConfigData.Filename, (char *)&pCfgPkt->Filename, 128);
 247   1      
 248   1              GCONFIG_WriteConfigData();
 249   1      } /* End of GCONFIG_SetConfigPacket() */
 250          
 251          /*
 252           * ----------------------------------------------------------------------------
 253           * Function Name: GCONFIG_GetConfigPacket
 254           * Purpose: 
 255           * Params:
 256           * Returns:
 257           * Note:
 258           * ----------------------------------------------------------------------------
 259           */
 260          void GCONFIG_GetConfigPacket(GCONFIG_CFG_PKT* pCfgPkt)
 261          {
 262   1          memcpy((char *)&pCfgPkt->Gid, (char *)&GCONFIG_Gid, sizeof(GCONFIG_Gid));
 263   1              pCfgPkt->Option = gconfig_ConfigData.Option;
 264   1          pCfgPkt->DevName = gconfig_ConfigData.DevName;
 265   1          pCfgPkt->MacAddr = macAddr;
 266   1              pCfgPkt->Network = gconfig_ConfigData.Network;
 267   1          pCfgPkt->ServerDynamicIP = STOE_GetIPAddr();
 268   1              pCfgPkt->ServerStaticIP = gconfig_ConfigData.ServerStaticIP;
 269   1              pCfgPkt->ServerDataPktListenPort = gconfig_ConfigData.ServerDataPktListenPort;
 270   1              pCfgPkt->ServerMulticastListenPort = gconfig_ConfigData.ServerMulticastListenPort;
 271   1              pCfgPkt->ServerBroadcastListenPort = gconfig_ConfigData.ServerBroadcastListenPort;
 272   1              pCfgPkt->ClientDestIP = gconfig_ConfigData.ClientDestIP;
 273   1              pCfgPkt->ClientDestPort = gconfig_ConfigData.ClientDestPort; 
 274   1              pCfgPkt->Netmask = gconfig_ConfigData.Netmask;
 275   1              pCfgPkt->Gateway = gconfig_ConfigData.Gateway;
 276   1              pCfgPkt->Dns = gconfig_ConfigData.Dns;
 277   1              pCfgPkt->SerialPort = gconfig_ConfigData.SerialPort;            
 278   1              pCfgPkt->EthernetTxTimer = gconfig_ConfigData.EthernetTxTimer;
 279   1      
 280   1          pCfgPkt->Rs485Mode = gconfig_ConfigData.Rs485Mode;
 281   1          memcpy((char *)&pCfgPkt->AccessibleIP[0], (char *)&gconfig_ConfigData.AccessibleIP[0], (GCONFIG_ACCESS
             -IBLE_IP_NUM*4));
 282   1          memcpy((char *)&pCfgPkt->Smtp, (char *)&gconfig_ConfigData.Smtp, sizeof(GCONFIG_SMTP_CONFIG));
 283   1          memcpy((char *)&pCfgPkt->DestHostName, (char *)&gconfig_ConfigData.DestHostName, 36);
 284   1              
 285   1          pCfgPkt->TftpServerIp = gconfig_ConfigData.TftpServerIp;
 286   1          memcpy((char *)&pCfgPkt->Filename[0], (char *)&gconfig_ConfigData.Filename[0], 128);
 287   1      
 288   1              if (GS2E_GetTaskState() == GS2E_STATE_IDLE)
 289   1                      pCfgPkt->DeviceStatus = DEVICE_STATUS_IDLE;
 290   1              else
 291   1                      pCfgPkt->DeviceStatus = DEVICE_STATUS_CONNECTED;
 292   1      
 293   1      } /* End of GCONFIG_GetConfigPacket() */
 294          
 295          /*
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 6   

 296           * ----------------------------------------------------------------------------
 297           * Function Name: GCONFIG_ReadConfigData
 298           * Purpose: 
 299           * Params:
 300           * Returns:
 301           * Note:
 302           * ----------------------------------------------------------------------------
 303           */
 304          void GCONFIG_ReadConfigData(void)
 305          {
 306   1      #ifdef RuntimeCodeAt24KH
                      BOOL bRet;
              
                      printd("Read configuration data");
                      bRet = gconfig_ReStoreParameter(0, &gconfig_ConfigData, sizeof(gconfig_ConfigData));
              
                      if (bRet == FALSE || (gconfig_ConfigData.ServerStaticIP & 0x000000FF) == 0)
                      {
                              GCONFIG_ReadDefaultConfigData();
                              GCONFIG_WriteConfigData();
                              gconfig_DisplayConfigData(&gconfig_ConfigData);
                      }
              
              #else
 320   1                      GCONFIG_ReadDefaultConfigData();
 321   1                      gconfig_DisplayConfigData(&gconfig_ConfigData);
 322   1      #endif
 323   1      
 324   1      } /* End of GCONFIG_ReadConfigData() */
 325          
 326          /*
 327           * ----------------------------------------------------------------------------
 328           * Function Name: GCONFIG_WriteConfigData
 329           * Purpose: 
 330           * Params:
 331           * Returns:
 332           * Note:
 333           * ----------------------------------------------------------------------------
 334           */
 335          void GCONFIG_WriteConfigData(void)
 336          {
 337   1      #ifdef RuntimeCodeAt24KH
                      gconfig_StoreParameter(&gconfig_ConfigData, (U16_T)sizeof(gconfig_ConfigData));
              #endif  
 340   1      } /* End of GCONFIG_WriteConfigData() */
 341          
 342          /*
 343           * ----------------------------------------------------------------------------
 344           * Function Name: GCONFIG_ReadDefaultConfigData
 345           * Purpose: 
 346           * Params:
 347           * Returns:
 348           * Note:
 349           * ----------------------------------------------------------------------------
 350           */
 351          void GCONFIG_ReadDefaultConfigData(void)
 352          {
 353   1          U8_T i;
 354   1      
 355   1              printd("Read default configuration data. \n\r");
 356   1      
 357   1              gconfig_ConfigData.CheckSum = 0x00;
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 7   

 358   1          gconfig_ConfigData.CfgLength = sizeof(gconfig_ConfigData);
 359   1              gconfig_ConfigData.UdpAutoConnectClientIp = 0x00000000;
 360   1              gconfig_ConfigData.UdpAutoConnectClientPort = 0x0000;
 361   1      
 362   1              gconfig_ConfigData.Option = 0;
 363   1              memset(&gconfig_ConfigData.DevName, 0, sizeof(GCONFIG_DEV_NAME));
 364   1      
 365   1              gconfig_ConfigData.Network = (GCONFIG_NETWORK_SERVER | 
 366   1                                                  GCONFIG_NETWORK_DHCP_ENABLE |
 367   1                                                  GCONFIG_NETWORK_PROTO_TCP |
 368   1                                                                                              GCONFIG_NETWORK_PROTO_UDP_BCAST
 369   1                                                                                         );
 370   1      
 371   1              gconfig_ConfigData.ServerStaticIP = 0xc0a80003; // 192.168.0.3
 372   1              gconfig_ConfigData.ServerDataPktListenPort = GCONFIG_DEFAULT_DATA_PORT;
 373   1              gconfig_ConfigData.ServerMulticastListenPort = GCONFIG_UDP_MCAST_SERVER_PORT;
 374   1              gconfig_ConfigData.ServerBroadcastListenPort = GCONFIG_UDP_BCAST_SERVER_PORT;
 375   1              gconfig_ConfigData.ClientDestIP = 0xc0a80002;   // 192.168.0.2
 376   1              gconfig_ConfigData.ClientDestPort = GCONFIG_DEFAULT_DATA_PORT; 
 377   1              gconfig_ConfigData.Netmask = 0xffffff00;                        // 255.255.255.0
 378   1              gconfig_ConfigData.Gateway = 0xc0a80001;                        // 192.168.0.1
 379   1              gconfig_ConfigData.Dns = 0xa85f0101;                            // 168.95.1.1
 380   1      
 381   1              gconfig_ConfigData.SerialPort = (GCONFIG_SPORT_BRATE_115200 |
 382   1                                                         GCONFIG_SPORT_DATABIT_8 |
 383   1                                                                         GCONFIG_SPORT_PARITY_NONE |
 384   1                                                                         GCONFIG_SPORT_FLOWC_NONE |
 385   1                                                                         GCONFIG_SPORT_STOPBIT_1
 386   1                                                                        );
 387   1      
 388   1              gconfig_ConfigData.EthernetTxTimer = 100; // 100 ms
 389   1      
 390   1          strcpy(gconfig_ConfigData.Admin.Username, "admin");
 391   1          strcpy(gconfig_ConfigData.Admin.Passwd, "admin");
 392   1          gconfig_ConfigData.Admin.Level = 5;
 393   1      
 394   1          for (i = 0; i < GCONFIG_ACCESSIBLE_IP_NUM; i++)
 395   1          {
 396   2              gconfig_ConfigData.AccessibleIP[i] = 0;
 397   2          }
 398   1      
 399   1          strcpy(gconfig_ConfigData.Smtp.DomainName, "");
 400   1          strcpy(gconfig_ConfigData.Smtp.FromAddr, "");
 401   1          strcpy(gconfig_ConfigData.Smtp.ToAddr1, "");        
 402   1          strcpy(gconfig_ConfigData.Smtp.ToAddr2, "");        
 403   1          strcpy(gconfig_ConfigData.Smtp.ToAddr3, "");
 404   1              
 405   1          gconfig_ConfigData.Smtp.EventEnableBits = 0x0000;
 406   1      
 407   1          gconfig_ConfigData.Rs485Mode = 0;
 408   1      
 409   1          strcpy(gconfig_ConfigData.DestHostName, "");
 410   1      
 411   1          /* the following 5 items will be used for boot loader */
 412   1          gconfig_ConfigData.DeviceIp = 0xc0a80003;
 413   1          gconfig_ConfigData.DeviceNetmask = 0xFFFFFF00;
 414   1          gconfig_ConfigData.DeviceGateway = 0xc0a80001;
 415   1          strcpy(gconfig_ConfigData.Filename, "ax.bin");
 416   1          gconfig_ConfigData.TftpServerIp = 0xc0a80001;
 417   1         
 418   1      } /* End of GCONFIG_ReadDefaultConfigData */
 419          
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 8   

 420          /////////////////////////////////////////////////////////////////////////////////
 421          
 422          /*
 423           * ----------------------------------------------------------------------------
 424           * Function Name: GCONFIG_EnableUdpAutoConnectAfterReboot
 425           * Purpose: 
 426           * Params:
 427           * Returns:
 428           * Note:
 429           * ----------------------------------------------------------------------------
 430           */
 431          U8_T GCONFIG_EnableUdpAutoConnectAfterReboot(void)
 432          {
 433   1              if ((gconfig_ConfigData.Option & GCONFIG_OPTION_ENABLE_UDP_AUTO_CONNECT) 
 434   1                   == GCONFIG_OPTION_ENABLE_UDP_AUTO_CONNECT)
 435   1                      return TRUE;
 436   1              
 437   1              return FALSE;
 438   1      } /* End of GCONFIG_EnableUdpAutoConnectAfterReboot() */
 439          
 440          /*
 441           * ----------------------------------------------------------------------------
 442           * Function Name: GCONFIG_EnableFirmwareUpgrade
 443           * Purpose: 
 444           * Params:
 445           * Returns:
 446           * Note:
 447           * ----------------------------------------------------------------------------
 448           */
 449          void GCONFIG_EnableFirmwareUpgrade(void)
 450          {
 451   1              FirmwareUpgradeFlag[0] = 'a';
 452   1              FirmwareUpgradeFlag[1] = 's';
 453   1              FirmwareUpgradeFlag[2] = 'i';
 454   1              FirmwareUpgradeFlag[3] = 'x';
 455   1      
 456   1          /* save the network configuration for boot loader */
 457   1          gconfig_ConfigData.DeviceIp = STOE_GetIPAddr();
 458   1          gconfig_ConfigData.DeviceNetmask = STOE_GetSubnetMask();
 459   1          gconfig_ConfigData.DeviceGateway = STOE_GetGateway();
 460   1      
 461   1      } /* End of GCONFIG_EnableFirmwareUpgrade() */
 462          
 463          /*
 464           * ----------------------------------------------------------------------------
 465           * Function Name: GCONFIG_IpAddr2Ulong()
 466           * Purpose:
 467           * Params:
 468           * Returns:
 469           * Note:
 470           * ----------------------------------------------------------------------------
 471           */
 472          U32_T GCONFIG_IpAddr2Ulong(U8_T* pBuf, U8_T len)
 473          {
 474   1              U32_T   ip = 0;
 475   1              U8_T*   point = (U8_T*)&ip;
 476   1              U8_T    count = 0;
 477   1              U8_T    count2 = 0;
 478   1      
 479   1              while (1)
 480   1              {
 481   2                      count2 = 0;
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 9   

 482   2                      while ((*pBuf != '.') && len)
 483   2                      {
 484   3                              count2++;
 485   3                              if (count2 > 3) return 0xffffffff;
 486   3      
 487   3                              *point *= 10;
 488   3        
 489   3                              if ((*pBuf < 0x3a) && (*pBuf > 0x2f))
 490   3                                      *point += (*pBuf - 0x30);
 491   3                              else
 492   3                                      return 0xffffffff;
 493   3      
 494   3                              pBuf++;
 495   3                              len--;
 496   3                      }
 497   2        
 498   2                      if (len == 0) break;
 499   2      
 500   2                      pBuf++;
 501   2                      len--;
 502   2                      count++;
 503   2                      point++;
 504   2      
 505   2                      if (count > 3) return 0xffffffff;
 506   2              }
 507   1      
 508   1              if (count != 3) return 0xffffffff;
 509   1      
 510   1              return ip;
 511   1      } /* End of GCONFIG_IpAddr2Ulong() */
 512          /////////////////////////////////////////////////////////////////////////////////
 513          // Get Functions
 514          
 515          /*
 516           * ----------------------------------------------------------------------------
 517           * Function Name: GCONFIG_GetDeviceName
 518           * Purpose: 
 519           * Params:
 520           * Returns:
 521           * Note:
 522           * ----------------------------------------------------------------------------
 523           */
 524          void GCONFIG_SetDeviceName(GCONFIG_DEV_NAME* pDevName)
 525          {
 526   1              memcpy(&gconfig_ConfigData.DevName, pDevName, sizeof(GCONFIG_DEV_NAME)); 
 527   1      } /* End of GCONFIG_GetDeviceName() */
 528          
 529          /*
 530           * ----------------------------------------------------------------------------
 531           * Function Name: GCONFIG_GetNetwork
 532           * Purpose: 
 533           * Params:
 534           * Returns:
 535           * Note:
 536           * ----------------------------------------------------------------------------
 537           */
 538          void GCONFIG_SetNetwork(U16_T val)
 539          {
 540   1              gconfig_ConfigData.Network = val;       
 541   1      } /* End of GCONFIG_GetNetwork() */
 542          
 543          /*
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 10  

 544           * ----------------------------------------------------------------------------
 545           * Function Name: GCONFIG_SetServerStaticIP
 546           * Purpose: 
 547           * Params:
 548           * Returns:
 549           * Note:
 550           * ----------------------------------------------------------------------------
 551           */
 552          void GCONFIG_SetServerStaticIP(U32_T ip)
 553          {
 554   1              gconfig_ConfigData.ServerStaticIP = ip; 
 555   1      } /* End of GCONFIG_SetServerStaticIP() */
 556          
 557          /*
 558           * ----------------------------------------------------------------------------
 559           * Function Name: GCONFIG_SetServerDataPktListenPort
 560           * Purpose: 
 561           * Params:
 562           * Returns:
 563           * Note:
 564           * ----------------------------------------------------------------------------
 565           */
 566          void GCONFIG_SetServerDataPktListenPort(U16_T port)
 567          {
 568   1              gconfig_ConfigData.ServerDataPktListenPort = port;
 569   1      } /* End of GCONFIG_SetServerDataPktListenPort() */
 570          
 571          /*
 572           * ----------------------------------------------------------------------------
 573           * Function Name: GCONFIG_SetServerMulticastListenPort
 574           * Purpose: 
 575           * Params:
 576           * Returns:
 577           * Note:
 578           * ----------------------------------------------------------------------------
 579           */
 580          void GCONFIG_SetServerMulticastListenPort(U16_T port)
 581          {
 582   1              gconfig_ConfigData.ServerMulticastListenPort = port;
 583   1      } /* End of GCONFIG_SetServerMulticastListenPort() */
 584          
 585          /*
 586           * ----------------------------------------------------------------------------
 587           * Function Name: GCONFIG_SetServerBroadcastListenPort
 588           * Purpose: 
 589           * Params:
 590           * Returns:
 591           * Note:
 592           * ----------------------------------------------------------------------------
 593           */
 594          void GCONFIG_SetServerBroadcastListenPort(U16_T port)
 595          {
 596   1              gconfig_ConfigData.ServerBroadcastListenPort = port;
 597   1      } /* End of GCONFIG_SetServerBroadcastListenPort() */
 598          
 599          /*
 600           * ----------------------------------------------------------------------------
 601           * Function Name: GCONFIG_SetClientDestIP
 602           * Purpose: 
 603           * Params:
 604           * Returns:
 605           * Note:
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 11  

 606           * ----------------------------------------------------------------------------
 607           */
 608          void GCONFIG_SetClientDestIP(U32_T ip)
 609          {
 610   1              gconfig_ConfigData.ClientDestIP = ip;
 611   1      } /* End of GCONFIG_SetClientDestIP() */
 612          
 613          /*
 614           * ----------------------------------------------------------------------------
 615           * Function Name: GCONFIG_SetClientDestPort
 616           * Purpose: 
 617           * Params:
 618           * Returns:
 619           * Note:
 620           * ----------------------------------------------------------------------------
 621           */
 622          void GCONFIG_SetClientDestPort(U16_T port)
 623          {
 624   1              gconfig_ConfigData.ClientDestPort = port;
 625   1      } /* End of GCONFIG_SetClientDestPort() */
 626          
 627          /*
 628           * ----------------------------------------------------------------------------
 629           * Function Name: GCONFIG_SetNetmask
 630           * Purpose: 
 631           * Params:
 632           * Returns:
 633           * Note:
 634           * ----------------------------------------------------------------------------
 635           */
 636          void GCONFIG_SetNetmask(U32_T netmask)
 637          {
 638   1              gconfig_ConfigData.Netmask = netmask;
 639   1      } /* End of GCONFIG_SetNetmask() */
 640          
 641          /*
 642           * ----------------------------------------------------------------------------
 643           * Function Name: GCONFIG_SetGateway
 644           * Purpose: 
 645           * Params:
 646           * Returns:
 647           * Note:
 648           * ----------------------------------------------------------------------------
 649           */
 650          void GCONFIG_SetGateway(U32_T gateway)
 651          {
 652   1              gconfig_ConfigData.Gateway = gateway;
 653   1      } /* End of GCONFIG_SetGateway() */
 654          
 655          /*
 656           * ----------------------------------------------------------------------------
 657           * Function Name: GCONFIG_SetDNS
 658           * Purpose: 
 659           * Params:
 660           * Returns:
 661           * Note:
 662           * ----------------------------------------------------------------------------
 663           */
 664          void GCONFIG_SetDNS(U32_T dns)
 665          {
 666   1              gconfig_ConfigData.Dns = dns;
 667   1      } /* End of GCONFIG_SetDNS() */
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 12  

 668          
 669          /*
 670           * ----------------------------------------------------------------------------
 671           * Function Name: GCONFIG_SetSerialPort
 672           * Purpose: 
 673           * Params:
 674           * Returns:
 675           * Note:
 676           * ----------------------------------------------------------------------------
 677           */
 678          void GCONFIG_SetSerialPort(U16_T sPort)
 679          {
 680   1              gconfig_ConfigData.SerialPort = sPort;
 681   1      } /* End of GCONFIG_SetSerialPort() */
 682          
 683          
 684          /*
 685           * ----------------------------------------------------------------------------
 686           * Function Name: GCONFIG_SetEthernetTxTimer
 687           * Purpose: 
 688           * Params:
 689           * Returns:
 690           * Note:
 691           * ----------------------------------------------------------------------------
 692           */
 693          void GCONFIG_SetEthernetTxTimer(U16_T timer)
 694          {
 695   1              gconfig_ConfigData.EthernetTxTimer = timer;
 696   1      } /* End of GCONFIG_SetEthernetTxTimer() */
 697          
 698          /*
 699           * ----------------------------------------------------------------------------
 700           * Function Name: GCONFIG_SetUdpAutoConnectClientIp
 701           * Purpose: 
 702           * Params:
 703           * Returns:
 704           * Note:
 705           * ----------------------------------------------------------------------------
 706           */
 707          void GCONFIG_SetUdpAutoConnectClientIp(U32_T ip)
 708          {
 709   1              gconfig_ConfigData.UdpAutoConnectClientIp = ip;
 710   1      } /* End of GCONFIG_SetUdpAutoConnectClientIp() */
 711          
 712          /*
 713           * ----------------------------------------------------------------------------
 714           * Function Name: GCONFIG_SetUdpAutoConnectRemotePort
 715           * Purpose: 
 716           * Params:
 717           * Returns:
 718           * Note:
 719           * ----------------------------------------------------------------------------
 720           */
 721          void GCONFIG_SetUdpAutoConnectClientPort(U16_T port)
 722          {
 723   1              gconfig_ConfigData.UdpAutoConnectClientPort = port;
 724   1      } /* End of GCONFIG_SetUdpAutoConnectClientPort() */
 725          
 726          /*
 727           * ----------------------------------------------------------------------------
 728           * Function Name: GCONFIG_SetTftpServerIp
 729           * Purpose: 
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 13  

 730           * Params:
 731           * Returns:
 732           * Note:
 733           * ----------------------------------------------------------------------------
 734           */
 735          void GCONFIG_SetTftpServerIp(U32_T ip)
 736          {
 737   1              gconfig_ConfigData.TftpServerIp = ip;
 738   1      } /* End of GCONFIG_SetTftpServerIp() */
 739          
 740          /*
 741           * ----------------------------------------------------------------------------
 742           * Function Name: GCONFIG_SetFilename
 743           * Purpose: 
 744           * Params:
 745           * Returns:
 746           * Note:
 747           * ----------------------------------------------------------------------------
 748           */
 749          U8_T GCONFIG_SetFilename(U8_T *filename, U8_T len)
 750          {
 751   1              if (len > sizeof(gconfig_ConfigData.Filename) - 1)
 752   1                      len = sizeof(gconfig_ConfigData.Filename) - 1;
 753   1      
 754   1              memcpy(gconfig_ConfigData.Filename, filename, len); 
 755   1              gconfig_ConfigData.Filename[len] = '\0';        
 756   1          return len;
 757   1      } /* End of GCONFIG_SetFilename() */
 758          
 759          /////////////////////////////////////////////////////////////////////////////////
 760          // Get Functions
 761          
 762          /*
 763           * ----------------------------------------------------------------------------
 764           * Function Name: GCONFIG_GetTftpServerIp
 765           * Purpose: 
 766           * Params:
 767           * Returns:
 768           * Note:
 769           * ----------------------------------------------------------------------------
 770           */
 771          U32_T GCONFIG_GetTftpServerIp(void)
 772          {
 773   1              return gconfig_ConfigData.TftpServerIp; 
 774   1      } /* End of GCONFIG_GetTftpServerIp() */
 775          
 776          /*
 777           * ----------------------------------------------------------------------------
 778           * Function Name: GCONFIG_GetFilename
 779           * Purpose: 
 780           * Params:
 781           * Returns:
 782           * Note:
 783           * ----------------------------------------------------------------------------
 784           */
 785          U8_T GCONFIG_GetFilename(U8_T *filename, U8_T len)
 786          {
 787   1          if (!filename || len < sizeof(gconfig_ConfigData.Filename))
 788   1              return 0;
 789   1      
 790   1          memcpy(filename, gconfig_ConfigData.Filename, sizeof(gconfig_ConfigData.Filename)); 
 791   1      
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 14  

 792   1          return sizeof(gconfig_ConfigData.Filename); 
 793   1      } /* End of GCONFIG_GetFilename() */
 794          
 795          /*
 796           * ----------------------------------------------------------------------------
 797           * Function Name: GCONFIG_GetDeviceName
 798           * Purpose: 
 799           * Params:
 800           * Returns:
 801           * Note:
 802           * ----------------------------------------------------------------------------
 803           */
 804          GCONFIG_DEV_NAME* GCONFIG_GetDeviceName(void)
 805          {
 806   1              return &gconfig_ConfigData.DevName;
 807   1      } /* End of GCONFIG_GetDeviceName() */
 808          
 809          /*
 810           * ----------------------------------------------------------------------------
 811           * Function Name: GCONFIG_GetMacAddress
 812           * Purpose: 
 813           * Params:
 814           * Returns:
 815           * Note:
 816           * ----------------------------------------------------------------------------
 817           */
 818          GCONFIG_MAC_ADDR GCONFIG_GetMacAddress(void)
 819          {
 820   1              return macAddr;
 821   1      } /* End of GCONFIG_GetMacAddress() */
 822          
 823          /*
 824           * ----------------------------------------------------------------------------
 825           * Function Name: GCONFIG_GetNetwork
 826           * Purpose: 
 827           * Params:
 828           * Returns:
 829           * Note:
 830           * ----------------------------------------------------------------------------
 831           */
 832          U16_T GCONFIG_GetNetwork(void)
 833          {
 834   1              return gconfig_ConfigData.Network;
 835   1      } /* End of GCONFIG_GetNetwork() */
 836          
 837          /*
 838           * ----------------------------------------------------------------------------
 839           * Function Name: GCONFIG_GetServerStaticIP
 840           * Purpose: 
 841           * Params:
 842           * Returns:
 843           * Note:
 844           * ----------------------------------------------------------------------------
 845           */
 846          U32_T GCONFIG_GetServerStaticIP(void)
 847          {
 848   1              return gconfig_ConfigData.ServerStaticIP;
 849   1      } /* End of GCONFIG_GetServerStaticIP() */
 850          
 851          /*
 852           * ----------------------------------------------------------------------------
 853           * Function Name: GCONFIG_GetServerDataPktListenPort
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 15  

 854           * Purpose: 
 855           * Params:
 856           * Returns:
 857           * Note:
 858           * ----------------------------------------------------------------------------
 859           */
 860          U16_T GCONFIG_GetServerDataPktListenPort(void)
 861          {
 862   1              return gconfig_ConfigData.ServerDataPktListenPort;
 863   1      } /* End of GCONFIG_GetServerDataPktListenPort() */
 864          
 865          /*
 866           * ----------------------------------------------------------------------------
 867           * Function Name: GCONFIG_GetServerMulticastListenPort
 868           * Purpose: 
 869           * Params:
 870           * Returns:
 871           * Note:
 872           * ----------------------------------------------------------------------------
 873           */
 874          U16_T GCONFIG_GetServerMulticastListenPort(void)
 875          {
 876   1              return gconfig_ConfigData.ServerMulticastListenPort;
 877   1      } /* End of GCONFIG_GetServerMulticastListenPort() */
 878          
 879          /*
 880           * ----------------------------------------------------------------------------
 881           * Function Name: GCONFIG_GetServerBroadcastListenPort
 882           * Purpose: 
 883           * Params:
 884           * Returns:
 885           * Note:
 886           * ----------------------------------------------------------------------------
 887           */
 888          U16_T GCONFIG_GetServerBroadcastListenPort(void)
 889          {
 890   1              return gconfig_ConfigData.ServerBroadcastListenPort;
 891   1      } /* End of GCONFIG_GetServerBroadcastListenPort() */
 892          
 893          /*
 894           * ----------------------------------------------------------------------------
 895           * Function Name: GCONFIG_GetClientDestIP
 896           * Purpose: 
 897           * Params:
 898           * Returns:
 899           * Note:
 900           * ----------------------------------------------------------------------------
 901           */
 902          U32_T GCONFIG_GetClientDestIP(void)
 903          {
 904   1      #if (INCLUDE_DNS_CLIENT)
                      U32_T   DestIP, DestNameLen;
                  teDNSC_STATE state;
              
                      DestNameLen = strlen(gconfig_ConfigData.DestHostName);
                      DestIP = GCONFIG_IpAddr2Ulong(gconfig_ConfigData.DestHostName, DestNameLen);
                      if (DestIP == 0xffffffff)
                      {
                              if ((state = DNSC_Query(gconfig_ConfigData.DestHostName, &DestIP)) == DNSC_QUERY_OK)
                                      return DestIP;
                              else if (state == DNSC_QUERY_FREE)
                                      DNSC_Start(gconfig_ConfigData.DestHostName);
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 16  

                              return 0;               
                      }
                      return DestIP;
              #else
 920   1              return gconfig_ConfigData.ClientDestIP;
 921   1      #endif                  
 922   1      } /* End of GCONFIG_GetClientDestIP() */
 923          
 924          /*
 925           * ----------------------------------------------------------------------------
 926           * Function Name: GCONFIG_GetClientDestPort
 927           * Purpose: 
 928           * Params:
 929           * Returns:
 930           * Note:
 931           * ----------------------------------------------------------------------------
 932           */
 933          U16_T GCONFIG_GetClientDestPort(void)
 934          {
 935   1              return gconfig_ConfigData.ClientDestPort;
 936   1      } /* End of GCONFIG_GetClientDestPort() */
 937          
 938          /*
 939           * ----------------------------------------------------------------------------
 940           * Function Name: GCONFIG_GetNetmask
 941           * Purpose: 
 942           * Params:
 943           * Returns:
 944           * Note:
 945           * ----------------------------------------------------------------------------
 946           */
 947          U32_T GCONFIG_GetNetmask(void)
 948          {
 949   1              return gconfig_ConfigData.Netmask;
 950   1      } /* End of GCONFIG_GetNetmask() */
 951          
 952          /*
 953           * ----------------------------------------------------------------------------
 954           * Function Name: GCONFIG_GetGateway
 955           * Purpose: 
 956           * Params:
 957           * Returns:
 958           * Note:
 959           * ----------------------------------------------------------------------------
 960           */
 961          U32_T GCONFIG_GetGateway(void)
 962          {
 963   1              return gconfig_ConfigData.Gateway;
 964   1      } /* End of GCONFIG_GetGateway() */
 965          
 966          /*
 967           * ----------------------------------------------------------------------------
 968           * Function Name: GCONFIG_GetDNS
 969           * Purpose: 
 970           * Params:
 971           * Returns:
 972           * Note:
 973           * ----------------------------------------------------------------------------
 974           */
 975          U32_T GCONFIG_GetDNS(void)
 976          {
 977   1              return gconfig_ConfigData.Dns;
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 17  

 978   1      } /* End of GCONFIG_GetDNS() */
 979          
 980          /*
 981           * ----------------------------------------------------------------------------
 982           * Function Name: GCONFIG_GetSerialPort
 983           * Purpose: 
 984           * Params:
 985           * Returns:
 986           * Note:
 987           * ----------------------------------------------------------------------------
 988           */
 989          U16_T GCONFIG_GetSerialPort(void)
 990          {
 991   1              return gconfig_ConfigData.SerialPort;
 992   1      } /* End of GCONFIG_GetSerialPort() */
 993          
 994          /*
 995           * ----------------------------------------------------------------------------
 996           * Function Name: GCONFIG_GetEthernetTxTimer
 997           * Purpose: 
 998           * Params:
 999           * Returns:
1000           * Note:
1001           * ----------------------------------------------------------------------------
1002           */
1003          U16_T GCONFIG_GetEthernetTxTimer(void)
1004          {
1005   1              return gconfig_ConfigData.EthernetTxTimer;
1006   1      } /* End of GCONFIG_GetEthernetTxTimer() */
1007          
1008          /*
1009           * ----------------------------------------------------------------------------
1010           * Function Name: GCONFIG_GetUdpAutoConnectClientIp
1011           * Purpose: 
1012           * Params:
1013           * Returns:
1014           * Note:
1015           * ----------------------------------------------------------------------------
1016           */
1017          U32_T GCONFIG_GetUdpAutoConnectClientIp(void)
1018          {
1019   1              return gconfig_ConfigData.UdpAutoConnectClientIp;
1020   1      } /* End of GCONFIG_GetUdpAutoConnectClientIp() */
1021          
1022          /*
1023           * ----------------------------------------------------------------------------
1024           * Function Name: GCONFIG_GetUdpAutoConnectClientPort
1025           * Purpose: 
1026           * Params:
1027           * Returns:
1028           * Note:
1029           * ----------------------------------------------------------------------------
1030           */
1031          U16_T GCONFIG_GetUdpAutoConnectClientPort(void)
1032          {
1033   1              return gconfig_ConfigData.UdpAutoConnectClientPort;
1034   1      } /* End of GCONFIG_GetUdpAutoConnectClientPort() */
1035          
1036          /*
1037           * ----------------------------------------------------------------------------
1038           * Function Name: GCONFIG_GetBaudRate
1039           * Purpose: 
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 18  

1040           * Params:
1041           * Returns:
1042           * Note:
1043           * ----------------------------------------------------------------------------
1044           */
1045          U16_T GCONFIG_GetBaudRate(U8_T index)
1046          {
1047   1              U16_T baudRate = 0;
1048   1      
1049   1              switch(gconfig_SysClock)
1050   1              {
1051   2                      case SCS_25M:
1052   2                              if          (index == 0) baudRate = UR2_BR25_921600;
1053   2                              else if (index == 1) baudRate = UR2_BR25_115200;
1054   2                              else if (index == 2) baudRate = UR2_BR25_57600;
1055   2                              else if (index == 3) baudRate = UR2_BR25_38400;
1056   2                              else if (index == 4) baudRate = UR2_BR25_19200;
1057   2                              else if (index == 5) baudRate = UR2_BR25_9600;
1058   2                              else if (index == 6) baudRate = UR2_BR25_4800;
1059   2                              else if (index == 7) baudRate = UR2_BR25_2400;
1060   2                              else if (index == 8) baudRate = UR2_BR25_1200;
1061   2                              break;
1062   2                      case SCS_50M:
1063   2                              if          (index == 0) baudRate = UR2_BR50_921600;
1064   2                              else if (index == 1) baudRate = UR2_BR50_115200;
1065   2                              else if (index == 2) baudRate = UR2_BR50_57600;
1066   2                              else if (index == 3) baudRate = UR2_BR50_38400;
1067   2                              else if (index == 4) baudRate = UR2_BR50_19200;
1068   2                              else if (index == 5) baudRate = UR2_BR50_9600;
1069   2                              else if (index == 6) baudRate = UR2_BR50_4800;
1070   2                              else if (index == 7) baudRate = UR2_BR50_2400;
1071   2                              else if (index == 8) baudRate = UR2_BR50_1200;
1072   2                              break;
1073   2                      case SCS_100M:
1074   2                              if          (index == 0) baudRate = UR2_BR100_921600;
1075   2                              else if (index == 1) baudRate = UR2_BR100_115200;
1076   2                              else if (index == 2) baudRate = UR2_BR100_57600;
1077   2                              else if (index == 3) baudRate = UR2_BR100_38400;
1078   2                              else if (index == 4) baudRate = UR2_BR100_19200;
1079   2                              else if (index == 5) baudRate = UR2_BR100_9600;
1080   2                              else if (index == 6) baudRate = UR2_BR100_4800;
1081   2                              else if (index == 7) baudRate = UR2_BR100_2400;
1082   2                              else if (index == 8) baudRate = UR2_BR100_1200;
1083   2                              break;
1084   2                      default:
1085   2                              printd("Unknown system clock rate!\n\r");
1086   2                              break;
1087   2              }
1088   1              
1089   1              return baudRate;
1090   1      } /* End of GCONFIG_GetBaudRate() */
1091          
1092          /*
1093           * ----------------------------------------------------------------------------
1094           * Function Name: GCONFIG_GetAdmin
1095           * Purpose: 
1096           * Params:
1097           * Returns:
1098           * Note:
1099           * ----------------------------------------------------------------------------
1100           */
1101          S16_T GCONFIG_GetAdmin(U8_T *username, U8_T *passwd, U8_T *level)
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 19  

1102          {
1103   1          if (!username || !passwd)
1104   1              return -1;
1105   1      
1106   1          memcpy(username, gconfig_ConfigData.Admin.Username, 16);
1107   1          memcpy(passwd, gconfig_ConfigData.Admin.Passwd, 16);
1108   1          *level = gconfig_ConfigData.Admin.Level;
1109   1      
1110   1          return 1;
1111   1      } /* End of GCONFIG_GetAdmin() */
1112          
1113          /*
1114           * ----------------------------------------------------------------------------
1115           * Function Name: GCONFIG_SetAdmin
1116           * Purpose: 
1117           * Params:
1118           * Returns:
1119           * Note:
1120           * ----------------------------------------------------------------------------
1121           */
1122          S16_T GCONFIG_SetAdmin(U8_T *username, U8_T *passwd)
1123          {
1124   1          if (!username || !passwd)
1125   1              return -1;
1126   1      
1127   1          memcpy(gconfig_ConfigData.Admin.Username, username, 16);
1128   1          memcpy(gconfig_ConfigData.Admin.Passwd, passwd, 16);
1129   1      
1130   1          return 1;
1131   1      } /* End of GCONFIG_SetAdmin() */
1132          
1133          /*
1134           * ----------------------------------------------------------------------------
1135           * Function Name: GCONFIG_GetAccessibleIP
1136           * Purpose: 
1137           * Params:
1138           * Returns:
1139           * Note:
1140           * ----------------------------------------------------------------------------
1141           */
1142          S16_T GCONFIG_GetAccessibleIP(U8_T idx, U32_T *ip)
1143          {
1144   1          if (!ip || idx >= GCONFIG_ACCESSIBLE_IP_NUM)
1145   1              return -1;
1146   1      
1147   1          *ip = gconfig_ConfigData.AccessibleIP[idx];
1148   1          return 1;
1149   1      
1150   1      } /* End of GCONFIG_GetAccessibleIP() */
1151          
1152          /*
1153           * ----------------------------------------------------------------------------
1154           * Function Name: GCONFIG_SetAccessibleIP
1155           * Purpose: 
1156           * Params:
1157           * Returns:
1158           * Note:
1159           * ----------------------------------------------------------------------------
1160           */
1161          S16_T GCONFIG_SetAccessibleIP(U8_T idx, U32_T ip)
1162          {
1163   1          if (idx >= GCONFIG_ACCESSIBLE_IP_NUM)
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 20  

1164   1              return -1;
1165   1      
1166   1          gconfig_ConfigData.AccessibleIP[idx] = ip;
1167   1          return 1;
1168   1      } /* GCONFIG_SetAccessibleIP() */
1169          
1170          /*
1171           * ----------------------------------------------------------------------------
1172           * Function Name: GCONFIG_SetSMTPDomainName
1173           * Purpose: 
1174           * Params:
1175           * Returns:
1176           * Note:
1177           * ----------------------------------------------------------------------------
1178           */
1179          void GCONFIG_SetSMTPDomainName(U8_T *pIn, U8_T len)
1180          {
1181   1              if (len > sizeof(gconfig_ConfigData.Smtp.DomainName) - 1)
1182   1                      len = sizeof(gconfig_ConfigData.Smtp.DomainName) - 1;
1183   1              
1184   1              memcpy(gconfig_ConfigData.Smtp.DomainName, pIn, len);
1185   1              gconfig_ConfigData.Smtp.DomainName[len] = '\0';
1186   1      } /* GCONFIG_SetSMTPDomainName() */
1187          
1188          /*
1189           * ----------------------------------------------------------------------------
1190           * Function Name: U8_T GCONFIG_GetSMTPDomainName
1191           * Purpose: 
1192           * Params:
1193           * Returns:
1194           * Note:
1195           * ----------------------------------------------------------------------------
1196           */
1197          U8_T GCONFIG_GetSMTPDomainName(U8_T *pOut)
1198          {
1199   1              gconfig_ConfigData.Smtp.DomainName[sizeof(gconfig_ConfigData.Smtp.DomainName) - 1] = '\0';
1200   1          strcpy(pOut, gconfig_ConfigData.Smtp.DomainName);
1201   1      
1202   1              return strlen(gconfig_ConfigData.Smtp.DomainName);
1203   1      } /* GCONFIG_GetSMTPDomainName() */
1204          
1205          /*
1206           * ----------------------------------------------------------------------------
1207           * Function Name: GCONFIG_SetSMTPFrom
1208           * Purpose: 
1209           * Params:
1210           * Returns:
1211           * Note:
1212           * ----------------------------------------------------------------------------
1213           */
1214          void GCONFIG_SetSMTPFrom(U8_T *pIn, U8_T len)
1215          {
1216   1              if (len > sizeof(gconfig_ConfigData.Smtp.FromAddr) - 1)
1217   1                      len = sizeof(gconfig_ConfigData.Smtp.FromAddr) - 1;
1218   1              
1219   1              memcpy(gconfig_ConfigData.Smtp.FromAddr, pIn, len);
1220   1              gconfig_ConfigData.Smtp.FromAddr[len] = '\0';
1221   1      } /* GCONFIG_SetSMTPFrom() */
1222          
1223          /*
1224           * ----------------------------------------------------------------------------
1225           * Function Name: U8_T GCONFIG_GetSMTPFrom()
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 21  

1226           * Purpose: 
1227           * Params:
1228           * Returns:
1229           * Note:
1230           * ----------------------------------------------------------------------------
1231           */
1232          U8_T GCONFIG_GetSMTPFrom(U8_T *pOut)
1233          {
1234   1              gconfig_ConfigData.Smtp.FromAddr[sizeof(gconfig_ConfigData.Smtp.FromAddr) - 1] = '\0';
1235   1          strcpy(pOut, gconfig_ConfigData.Smtp.FromAddr);
1236   1      
1237   1              return strlen(gconfig_ConfigData.Smtp.FromAddr);
1238   1      } /* GCONFIG_GetSMTPFrom() */
1239          /*
1240           * ----------------------------------------------------------------------------
1241           * Function Name: GCONFIG_SetSMTPTo1
1242           * Purpose: 
1243           * Params:
1244           * Returns:
1245           * Note:
1246           * ----------------------------------------------------------------------------
1247           */
1248          void GCONFIG_SetSMTPTo1(U8_T *pIn, U8_T len)
1249          {
1250   1              if (len > sizeof(gconfig_ConfigData.Smtp.ToAddr1) - 1)
1251   1                      len = sizeof(gconfig_ConfigData.Smtp.ToAddr1) - 1;
1252   1              
1253   1              memcpy(gconfig_ConfigData.Smtp.ToAddr1, pIn, len);
1254   1              gconfig_ConfigData.Smtp.ToAddr1[len] = '\0';
1255   1      } /* GCONFIG_SetSMTPTo1() */
1256          
1257          /*
1258           * ----------------------------------------------------------------------------
1259           * Function Name: U8_T GCONFIG_GetSMTPTo1()
1260           * Purpose: 
1261           * Params:
1262           * Returns:
1263           * Note:
1264           * ----------------------------------------------------------------------------
1265           */
1266          U8_T GCONFIG_GetSMTPTo1(U8_T *pOut)
1267          {
1268   1              gconfig_ConfigData.Smtp.ToAddr1[sizeof(gconfig_ConfigData.Smtp.ToAddr1) - 1] = '\0';
1269   1          strcpy(pOut, gconfig_ConfigData.Smtp.ToAddr1);
1270   1      
1271   1              return strlen(gconfig_ConfigData.Smtp.ToAddr1);
1272   1      } /* GCONFIG_GetSMTPTo1() */
1273          /*
1274           * ----------------------------------------------------------------------------
1275           * Function Name: GCONFIG_SetSMTPTo2
1276           * Purpose: 
1277           * Params:
1278           * Returns:
1279           * Note:
1280           * ----------------------------------------------------------------------------
1281           */
1282          void GCONFIG_SetSMTPTo2(U8_T *pIn, U8_T len)
1283          {
1284   1              if (len > sizeof(gconfig_ConfigData.Smtp.ToAddr2) - 1)
1285   1                      len = sizeof(gconfig_ConfigData.Smtp.ToAddr2) - 1;
1286   1              
1287   1              memcpy(gconfig_ConfigData.Smtp.ToAddr2, pIn, len);
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 22  

1288   1              gconfig_ConfigData.Smtp.ToAddr2[len] = '\0';
1289   1      } /* GCONFIG_SetSMTPTo2() */
1290          
1291          /*
1292           * ----------------------------------------------------------------------------
1293           * Function Name: U8_T GCONFIG_GetSMTPTo2()
1294           * Purpose: 
1295           * Params:
1296           * Returns:
1297           * Note:
1298           * ----------------------------------------------------------------------------
1299           */
1300          U8_T GCONFIG_GetSMTPTo2(U8_T *pOut)
1301          {
1302   1              gconfig_ConfigData.Smtp.ToAddr2[sizeof(gconfig_ConfigData.Smtp.ToAddr2) - 1] = '\0';
1303   1          strcpy(pOut, gconfig_ConfigData.Smtp.ToAddr2);
1304   1      
1305   1              return strlen(gconfig_ConfigData.Smtp.ToAddr2);
1306   1      } /* GCONFIG_GetSMTPTo2() */
1307          /*
1308           * ----------------------------------------------------------------------------
1309           * Function Name: GCONFIG_SetSMTPTo3
1310           * Purpose: 
1311           * Params:
1312           * Returns:
1313           * Note:
1314           * ----------------------------------------------------------------------------
1315           */
1316          void GCONFIG_SetSMTPTo3(U8_T *pIn, U8_T len)
1317          {
1318   1              if (len > sizeof(gconfig_ConfigData.Smtp.ToAddr3) - 1)
1319   1                      len = sizeof(gconfig_ConfigData.Smtp.ToAddr3) - 1;
1320   1              
1321   1              memcpy(gconfig_ConfigData.Smtp.ToAddr3, pIn, len);
1322   1              gconfig_ConfigData.Smtp.ToAddr3[len] = '\0';
1323   1      } /* GCONFIG_SetSMTPTo3() */
1324          
1325          /*
1326           * ----------------------------------------------------------------------------
1327           * Function Name: U8_T GCONFIG_GetSMTPTo3()
1328           * Purpose: 
1329           * Params:
1330           * Returns:
1331           * Note:
1332           * ----------------------------------------------------------------------------
1333           */
1334          U8_T GCONFIG_GetSMTPTo3(U8_T *pOut)
1335          {
1336   1              gconfig_ConfigData.Smtp.ToAddr3[sizeof(gconfig_ConfigData.Smtp.ToAddr3) - 1] = '\0';
1337   1          strcpy(pOut, gconfig_ConfigData.Smtp.ToAddr3);
1338   1      
1339   1              return strlen(gconfig_ConfigData.Smtp.ToAddr3); 
1340   1      } /* GCONFIG_GetSMTPTo3() */
1341          /*
1342           * ----------------------------------------------------------------------------
1343           * Function Name: GCONFIG_SetAutoWarning
1344           * Purpose: 
1345           * Params:
1346           * Returns:
1347           * Note:
1348           * ----------------------------------------------------------------------------
1349           */
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 23  

1350          void GCONFIG_SetAutoWarning(U16_T ValueIn)
1351          {
1352   1              gconfig_ConfigData.Smtp.EventEnableBits = ValueIn;
1353   1      } /* GCONFIG_SetAutoWarning() */
1354          /*
1355           * ----------------------------------------------------------------------------
1356           * Function Name: GCONFIG_GetAutoWarning
1357           * Purpose: 
1358           * Params:
1359           * Returns:
1360           * Note:
1361           * ----------------------------------------------------------------------------
1362           */
1363          U16_T GCONFIG_GetAutoWarning(void)
1364          {
1365   1              return gconfig_ConfigData.Smtp.EventEnableBits;
1366   1      } /* GCONFIG_GetAutoWarning() */
1367          
1368          /*
1369           * ----------------------------------------------------------------------------
1370           * Function Name: GCONFIG_SetRs485Mode
1371           * Purpose: 
1372           * Params:
1373           * Returns:
1374           * Note:
1375           * ----------------------------------------------------------------------------
1376           */
1377          void GCONFIG_SetRs485Mode(U8_T mode)
1378          {
1379   1              gconfig_ConfigData.Rs485Mode = mode;
1380   1      } /* GCONFIG_SetAutoWarning() */
1381          /*
1382           * ----------------------------------------------------------------------------
1383           * Function Name: GCONFIG_GetRs485Mode
1384           * Purpose: 
1385           * Params:
1386           * Returns:
1387           * Note:
1388           * ----------------------------------------------------------------------------
1389           */
1390          U8_T GCONFIG_GetRs485Mode(void)
1391          {
1392   1              return gconfig_ConfigData.Rs485Mode;
1393   1      } /* GCONFIG_GetRs485Mode() */
1394          
1395          /*
1396           * ----------------------------------------------------------------------------
1397           * Function Name: GCONFIG_SetDestHostName
1398           * Purpose: 
1399           * Params:
1400           * Returns:
1401           * Note:
1402           * ----------------------------------------------------------------------------
1403           */
1404          void GCONFIG_SetDestHostName(U8_T *pIn, U8_T len)
1405          {
1406   1          if (len > (sizeof(gconfig_ConfigData.DestHostName)-1))
1407   1              len = sizeof(gconfig_ConfigData.DestHostName) - 1;
1408   1      
1409   1          memcpy(gconfig_ConfigData.DestHostName, pIn, len);
1410   1          gconfig_ConfigData.DestHostName[len] = '\0';
1411   1      
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 24  

1412   1      } /* End of GCONFIG_SetDestHostName() */
1413          
1414          /*
1415           * ----------------------------------------------------------------------------
1416           * Function Name: GCONFIG_GetDestHostName
1417           * Purpose: 
1418           * Params:
1419           * Returns:
1420           * Note:
1421           * ----------------------------------------------------------------------------
1422           */
1423          U8_T GCONFIG_GetDestHostName(U8_T *pOut)
1424          {
1425   1          gconfig_ConfigData.DestHostName[sizeof(gconfig_ConfigData.DestHostName) - 1] = '\0';
1426   1          strcpy(pOut, gconfig_ConfigData.DestHostName);
1427   1      
1428   1              return strlen(gconfig_ConfigData.DestHostName);
1429   1      } /* End of GCONFIG_GetDestHostName() */
1430          /////////////////////////////////////////////////////////////////////////////////
1431          
1432          /*
1433           * ----------------------------------------------------------------------------
1434           * Function Name: gconfig_ReStoreParameter
1435           * Purpose: 
1436           * Params:
1437           * Returns:
1438           * Note:
1439           * ----------------------------------------------------------------------------
1440           */
1441          static BOOL gconfig_ReStoreParameter(U32_T addr, GCONFIG_CFG_DATA *pConfig, U16_T len)
1442          {
1443   1              U16_T   i;
1444   1              U8_T    *pParaBaseByte;
1445   1              U8_T    paraCheckSum = 0;
1446   1              U8_T    lastWtst = 0;
1447   1      
1448   1              pParaBaseByte = (U8_T *)pConfig;
1449   1      
1450   1              lastWtst = WTST;
1451   1              WTST = PROG_WTST_7;
1452   1              if (CSREPR & PMS) // SRAM shadow
1453   1              {
1454   2                      CSREPR |= FAES;
1455   2                      for (i = 0 ; i < len ; i++)
1456   2                      {
1457   3                              *(pParaBaseByte + i) = FCVAR(U8_T, GCONFIG_CFG_DATA_FLASH_ADDR + addr + i);
1458   3                      }
1459   2                      CSREPR &= ~FAES;
1460   2              }
1461   1              else
1462   1              {
1463   2                      CSREPR &= ~FAES;
1464   2                      for (i = 0 ; i < len ; i++)
1465   2                      {
1466   3                              *(pParaBaseByte + i) = FCVAR(U8_T, GCONFIG_CFG_DATA_FLASH_ADDR + addr + i);
1467   3                      }
1468   2              }
1469   1              WTST = lastWtst;
1470   1      
1471   1          if (0xffff != gconfig_Checksum((U16_T *)pConfig, len))
1472   1          {
1473   2              printd(" failed! (wrong checksum)\n\r");
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 25  

1474   2                      return FALSE;
1475   2          }
1476   1          else if (pConfig->CfgLength != len)
1477   1          {
1478   2              printd(" Invalid configuration data!\n\r");
1479   2                      return FALSE;
1480   2          }
1481   1              printd(" ok.\n\r");
1482   1              gconfig_DisplayConfigData(pConfig);
1483   1              return TRUE;
1484   1      
1485   1      } /* End of gconfig_ReStoreParameter() */
1486          
1487          /*
1488           * ----------------------------------------------------------------------------
1489           * Function Name: gconfig_StoreParameter
1490           * Purpose: 
1491           * Params:
1492           * Returns:
1493           * Note:
1494           * ----------------------------------------------------------------------------
1495           */
1496          static BOOL gconfig_StoreParameter(GCONFIG_CFG_DATA *pConfigData, U16_T len)
1497          {
1498   1              U8_T                    ret = FALSE;
1499   1              pFlashParaData  ptrFlashWrite = (void code*)0x003F00;
1500   1      
1501   1          pConfigData->CheckSum = 0;
1502   1          pConfigData->CfgLength = len;
1503   1          pConfigData->CheckSum = ~gconfig_Checksum((U16_T *)pConfigData, len);
1504   1          
1505   1              ret = (*ptrFlashWrite)((U8_T *)pConfigData, len);       
1506   1      
1507   1              if (ret == FALSE)
1508   1                      printd("Failed to program Configration Data!!\r\n");
1509   1      
1510   1              return ret;
1511   1      } /* End of gconfig_StoreParameter() */
1512          
1513          /*
1514          * -----------------------------------------------------------------------------
1515           * Function Name: gconfig_Checksum
1516           * Purpose:
1517           * Params:
1518           * Returns:
1519           * Note:
1520           * ----------------------------------------------------------------------------
1521           */
1522          static U16_T gconfig_Checksum(U16_T *pBuf, U32_T length)
1523          {
1524   1              U32_T   cksum = 0;
1525   1              U32_T   i, count;
1526   1              U8_T*   inChar = &pBuf;
1527   1              U16_T*  point;
1528   1      
1529   1              count = length/2;
1530   1      
1531   1              for (i = 0; i < count; i++)
1532   1              {
1533   2                      point = pBuf;
1534   2                      cksum += *pBuf++;
1535   2                      if (point > pBuf)
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 26  

1536   2                              (*inChar) = *inChar + 1;
1537   2      
1538   2                      if (!(i % 0x8000))
1539   2                      {
1540   3                              cksum = (cksum >> 16) + (cksum & 0xffff);
1541   3                              cksum += (cksum >> 16);
1542   3                              cksum &= 0xffff;
1543   3                      }
1544   2              }
1545   1                      
1546   1              if (length % 2)
1547   1                      cksum += (*pBuf & 0xff00);
1548   1      
1549   1              cksum = (cksum >> 16) + (cksum & 0xffff);
1550   1              cksum += (cksum >> 16);
1551   1              cksum &= 0xffff;
1552   1      
1553   1              return ((U16_T)cksum);
1554   1      } /* End of gconfig_Checksum() */
1555          
1556          /*
1557           * ----------------------------------------------------------------------------
1558           * Function Name: gconfig_DisplayConfigData
1559           * Purpose: 
1560           * Params:
1561           * Returns:
1562           * Note:
1563           * ----------------------------------------------------------------------------
1564           */
1565          static void     gconfig_DisplayConfigData(GCONFIG_CFG_DATA *pConfigData)
1566          {
1567   1              U8_T i, *pData;
1568   1              U8_T dat;
1569   1              U16_T val;
1570   1      
1571   1              if (GS2E_GetTaskState() == GS2E_STATE_IDLE)
1572   1              {
1573   2                      printd("  Device Name: ");
1574   2                      for (i = 0; i < 16; i++)
1575   2                              printd ("%02bx ", pConfigData->DevName.DevName[i]);             
1576   2      
1577   2                      printd("\n\r");
1578   2                      printd("  MAC Addr: ");
1579   2                      for (i = 0; i < 6; i++)
1580   2                              printd ("%02bx ", macAddr.MacAddr[i]);          
1581   2              
1582   2                      printd("\n\r");
1583   2                      printd("  Network Setting: ");
1584   2                      printd ("%04x\r\n", pConfigData->Network);              
1585   2              
1586   2                      val = pConfigData->Network;
1587   2                      
1588   2                      if (val & GCONFIG_NETWORK_CLIENT) printd("  SC:Cli ");
1589   2                      else                                    printd("  SC:Ser ");
1590   2              
1591   2                      if (val & GCONFIG_NETWORK_DHCP_ENABLE) printd("DHCP:On ");
1592   2                      else                                    printd("DHCP:Off ");
1593   2              
1594   2                      if (val & GCONFIG_NETWORK_PROTO_UDP) printd("UDP:On ");
1595   2                      else                                    printd("UDP:Off ");
1596   2              
1597   2                      if (val & GCONFIG_NETWORK_PROTO_TCP) printd("TCP:On ");
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 27  

1598   2                      else                                    printd("TCP:Off ");
1599   2              
1600   2                      if (val & GCONFIG_NETWORK_PROTO_UDP_MCAST) printd("MC:On ");
1601   2                      else                                    printd("MC:Off ");
1602   2              
1603   2                      if (val & GCONFIG_NETWORK_PROTO_UDP_BCAST) printd("BC:On ");
1604   2                      else                                    printd("BC:Off ");
1605   2              
1606   2                      printd("\n\r");
1607   2              
1608   2                      printd("  SIP:");               
1609   2              pData = (U8_T *)&pConfigData->ServerStaticIP;
1610   2                      for (i = 0; i < 4; i++)
1611   2                              printd ("%bu ", *(pData + i));          
1612   2      
1613   2                      printd(" Port: DA: %u", pConfigData->ServerDataPktListenPort);
1614   2                      printd(" MC: %u", pConfigData->ServerMulticastListenPort);
1615   2                      printd(" BC: %u", pConfigData->ServerBroadcastListenPort);
1616   2                      printd("\n\r");
1617   2      
1618   2                      printd("  Dest Host: %s",pConfigData->DestHostName);
1619   2                      printd(" Dest Port: %u", pConfigData->ClientDestPort);
1620   2                      printd("\n\r");
1621   2                      printd("  Netmask:");
1622   2              pData = (U8_T *)&pConfigData->Netmask;
1623   2                      for (i = 0; i < 4; i++)
1624   2                              printd ("%bu ", *(pData + i));          
1625   2      
1626   2                      printd(" Gateway:");
1627   2              pData = (U8_T *)&pConfigData->Gateway;
1628   2                      for (i = 0; i < 4; i++)
1629   2                              printd ("%bu ", *(pData + i));          
1630   2      
1631   2                      printd(" DNS:");
1632   2              pData = (U8_T *)&pConfigData->Dns;
1633   2                      for (i = 0; i < 4; i++)
1634   2                              printd ("%bu ", *(pData + i));          
1635   2      
1636   2                      printd("\n\r");
1637   2                      printd("  Serial Port Setting: ");
1638   2              
1639   2                      dat = (pConfigData->SerialPort>>8) & 0xFF;
1640   2                      val = (dat >> 3) & 0x1F; 
1641   2                      if      (val == 0) printd ("BR:921600 ");
1642   2                      else if (val == 1) printd ("BR:115200 ");
1643   2                      else if (val == 2) printd ("BR:57600 ");
1644   2                      else if (val == 3) printd ("BR:38400 ");
1645   2                      else if (val == 4) printd ("BR:19200 ");
1646   2                      else if (val == 5) printd ("BR:9600 ");
1647   2                      else if (val == 6) printd ("BR:4800 ");
1648   2                      else if (val == 7) printd ("BR:2400 ");
1649   2                      else if (val == 8) printd ("BR:1200 ");
1650   2              
1651   2                      val = dat & 0x07; 
1652   2                      if (val == 0) printd ("DB:5 ");
1653   2                      else if (val == 1) printd ("DB:6 ");
1654   2                      else if (val == 2) printd ("DB:7 ");
1655   2                      else if (val == 3) printd ("DB:8 ");
1656   2              
1657   2                      dat = (pConfigData->SerialPort & 0x00FF);
1658   2              
1659   2                      val = (dat >> 5) & 0x07; 
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 28  

1660   2                      if (val == 0) printd ("P:Odd ");
1661   2                      else if (val == 1) printd ("P:Even ");
1662   2                      else if (val == 2) printd ("P:None ");
1663   2              
1664   2                      val = (dat >> 2) & 0x07; 
1665   2                      if (val == 0) printd ("FC:Xon-Xoff ");
1666   2                      else if (val == 1) printd ("FC:Hardware ");
1667   2                      else if (val == 2) printd ("FC:None ");
1668   2              
1669   2                      val = dat & 0x03; 
1670   2                      if (val == 0) printd ("SB:1 ");
1671   2                      else if (val == 1) printd ("SB:1.5 ");
1672   2      
1673   2                      printd("\n\r");
1674   2                      printd("  Tx Time Interval:%u", pConfigData->EthernetTxTimer);
1675   2                      printd(" Username:%s Password:%s",pConfigData->Admin.Username, pConfigData->Admin.Passwd);
1676   2                      printd("\n\r");
1677   2                      
1678   2                      printd("  E-Mail Server:%s",pConfigData->Smtp.DomainName);              
1679   2                      printd("\n\r");
1680   2                                      
1681   2                      printd("  From:%s",pConfigData->Smtp.FromAddr);
1682   2                      printd("  To1:%s",pConfigData->Smtp.ToAddr1);
1683   2                      printd("\n\r");
1684   2                      
1685   2                      printd("  To2:%s",pConfigData->Smtp.ToAddr2);
1686   2                      printd("  To3:%s",pConfigData->Smtp.ToAddr3);
1687   2                      printd("\n\r");
1688   2                      
1689   2                      val = pConfigData->Smtp.EventEnableBits;
1690   2                      printd("  AutoWarning:%x ", val);
1691   2                      printd("CS:");
1692   2                      if (val & GCONFIG_SMTP_EVENT_COLDSTART) printd("On ");
1693   2                      else printd("Off ");
1694   2                      
1695   2                      printd("AF:");
1696   2                      if (val & GCONFIG_SMTP_EVENT_AUTH_FAIL) printd("On ");
1697   2                      else printd("Off");
1698   2                      
1699   2                      printd("IPC:");
1700   2                      if (val & GCONFIG_SMTP_EVENT_IP_CHANGED) printd("On ");
1701   2                      else printd("Off ");
1702   2      
1703   2                      printd("PC:");
1704   2                      if (val & GCONFIG_SMTP_EVENT_PSW_CHANGED) printd("On ");
1705   2                      else printd("Off ");
1706   2                      printd("\n\r\n\r");
1707   2              }
1708   1      
1709   1      } /* End of gconfig_DisplayConfigData() */
1710          
1711          /* End of gconfig.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7938    ----
   CONSTANT SIZE    =    818    ----
   XDATA SIZE       =    490     138
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.06   GCONFIG                                                               05/24/2013 13:18:43 PAGE 29  

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

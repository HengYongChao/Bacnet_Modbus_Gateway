AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE     1


MACRO ASSEMBLER AX51 V3.07c
OBJECT MODULE PLACED IN .\port.OBJ
ASSEMBLER INVOKED BY: E:\Keil_4_9.06\C51\BIN\AX51.EXE .\port.src PR(.\port.ls1) EP DEBUG MOD_CONT

LOC    OBJ             LINE     SOURCE

                          1     ; .\port.SRC generated from: ..\src\FreeRtossource\portable\Keil\AX11000\port.c
                          2     ; COMPILER INVOKED BY:
                          3     ;        E:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\FreeRtossource\portable\Keil\AX11000\port
                               .c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\S
                               RC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;..\SRC\deb
                               ug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;
                               ..\SRC\flash\;..\SRC\buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP
                               _v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..\Src\FreeRTOSSource\include\;..\Src\
                               schedule\;..\src\bacnet;..\src\include;..\src\LCD;..\src\version;..\src\modbusTCP;..\src\
                               gs2e;..\src\adpter1;..\src\scan;..\src\gsm;..\src\dyndns) DEFINE(KEIL_AX11000) VARBANKING
                                DEBUG PRINT(.\port.lst) SRC(.\port.SRC)
                          4     
                          5     $mod_cont 
                          6     $nomod51 
                          7     
                          8     NAME    PORT
                          9     
 0098.3                  10     TB08    BIT     098H.3
 00C0.3                  11     TB18    BIT     0C0H.3
 0080                    12     P0      DATA    080H
 0098.7                  13     SM00    BIT     098H.7
 0090                    14     P1      DATA    090H
 00C0.7                  15     SM10    BIT     0C0H.7
 0098.6                  16     SM01    BIT     098H.6
 00A0                    17     P2      DATA    0A0H
 00C0.6                  18     SM11    BIT     0C0H.6
 0098.5                  19     SM02    BIT     098H.5
 00B0                    20     P3      DATA    0B0H
 00D0.6                  21     AC      BIT     0D0H.6
 00C0.5                  22     SM12    BIT     0C0H.5
 00B0.4                  23     T0      BIT     0B0H.4
 00CF                    24     SPIDR   DATA    0CFH
 00B0.5                  25     T1      BIT     0B0H.5
 00A8.7                  26     EA      BIT     0A8H.7
 00D6                    27     OWCIR   DATA    0D6H
 00C5                    28     CH      DATA    0C5H
 0083                    29     DPH0    DATA    083H
 00A8                    30     IE      DATA    0A8H
 0085                    31     DPH1    DATA    085H
 00C4                    32     CL      DATA    0C4H
 0080.0                  33     P0_0    BIT     080H.0
 0090.0                  34     P1_0    BIT     090H.0
 0080.1                  35     P0_1    BIT     080H.1
 00B9                    36     CCAPH0  DATA    0B9H
 0082                    37     DPL0    DATA    082H
 00A0.0                  38     P2_0    BIT     0A0H.0
 0090.1                  39     P1_1    BIT     090H.1
 0080.2                  40     P0_2    BIT     080H.2
 00BA                    41     CCAPH1  DATA    0BAH
 0084                    42     DPL1    DATA    084H
 00B0.0                  43     P3_0    BIT     0B0H.0
 00A0.1                  44     P2_1    BIT     0A0H.1
 0090.2                  45     P1_2    BIT     090H.2
 0080.3                  46     P0_3    BIT     080H.3
 00E2                    47     UR2_DLH DATA    0E2H
 00BB                    48     CCAPH2  DATA    0BBH
 00A7                    49     XMRHR   DATA    0A7H
 00B0.1                  50     P3_1    BIT     0B0H.1
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE     2

 00A0.2                  51     P2_2    BIT     0A0H.2
 0090.3                  52     P1_3    BIT     090H.3
 0080.4                  53     P0_4    BIT     080H.4
 00BC                    54     CCAPH3  DATA    0BCH
 00B0.2                  55     P3_2    BIT     0B0H.2
 00A0.3                  56     P2_3    BIT     0A0H.3
 0090.4                  57     P1_4    BIT     090H.4
 0080.5                  58     P0_5    BIT     080H.5
 00EB                    59     TA      DATA    0EBH
 00BD                    60     CCAPH4  DATA    0BDH
 00B1                    61     CCAPL0  DATA    0B1H
 00C8.6                  62     EXF2    BIT     0C8H.6
 00B0.7                  63     RD      BIT     0B0H.7
 00B0.3                  64     P3_3    BIT     0B0H.3
 00A0.4                  65     P2_4    BIT     0A0H.4
 0098.4                  66     REN0    BIT     098H.4
 0090.5                  67     P1_5    BIT     090H.5
 0080.6                  68     P0_6    BIT     080H.6
 00E3                    69     UR2_FCR DATA    0E3H
 00D1                    70     CCAPM0  DATA    0D1H
 00C9                    71     T2IF    DATA    0C9H
 00B2                    72     CCAPL1  DATA    0B2H
 00C0.4                  73     REN1    BIT     0C0H.4
 00B0.4                  74     P3_4    BIT     0B0H.4
 00A0.5                  75     P2_5    BIT     0A0H.5
 0090.6                  76     P1_6    BIT     090H.6
 0080.7                  77     P0_7    BIT     080H.7
 00E1                    78     UR2_DLL DATA    0E1H
 00D2                    79     CCAPM1  DATA    0D2H
 00B3                    80     CCAPL2  DATA    0B3H
 00A6                    81     XMRLR   DATA    0A6H
 00B0.5                  82     P3_5    BIT     0B0H.5
 00A0.6                  83     P2_6    BIT     0A0H.6
 0090.7                  84     P1_7    BIT     090H.7
 00D3                    85     CCAPM2  DATA    0D3H
 00B4                    86     CCAPL3  DATA    0B4H
 00A5                    87     XMWHR   DATA    0A5H
 00B0.6                  88     P3_6    BIT     0B0H.6
 00A0.7                  89     P2_7    BIT     0A0H.7
 00D4                    90     CCAPM3  DATA    0D4H
 00B8                    91     IP      DATA    0B8H
 00B5                    92     CCAPL4  DATA    0B5H
 00B0.7                  93     P3_7    BIT     0B0H.7
 00D5                    94     CCAPM4  DATA    0D5H
 009A                    95     DBAR    DATA    09AH
 00E2                    96     UR2_IER DATA    0E2H
 00D0.7                  97     CY      BIT     0D0H.7
 00B0.2                  98     INT0    BIT     0B0H.2
 00E4                    99     UR2_LCR DATA    0E4H
 00A4                   100     XMWLR   DATA    0A4H
 00B0.3                 101     INT1    BIT     0B0H.3
 00E5                   102     UR2_MCR DATA    0E5H
 0093                   103     DPX0    DATA    093H
 0096                   104     I2CCIR  DATA    096H
 0095                   105     DPX1    DATA    095H
 00E3                   106     UR2_IIR DATA    0E3H
 00E1                   107     UR2_RBR DATA    0E1H
 009D                   108     ACON    DATA    09DH
 009B                   109     DCIR    DATA    09BH
 0081                   110     SP      DATA    081H
 00C3                   111     CCON    DATA    0C3H
 00C2                   112     CMOD    DATA    0C2H
 00D0.2                 113     OV      BIT     0D0H.2
 00B0.6                 114     WR      BIT     0B0H.6
 00E1                   115     UR2_THR DATA    0E1H
 00E8.5                 116     EWDI    BIT     0E8H.5
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE     3

 00D8.3                 117     WDIF    BIT     0D8H.3
 00CB                   118     RLDH    DATA    0CBH
 00BE                   119     EPCR    DATA    0BEH
 00AA                   120     LDHR    DATA    0AAH
 00E6                   121     UR2_LSR DATA    0E6H
 00BF                   122     EPDR    DATA    0BFH
 00B6                   123     MCIR    DATA    0B6H
 00C8.5                 124     RCLK    BIT     0C8H.5
 00E7                   125     UR2_MSR DATA    0E7H
 00C8.4                 126     TCLK    BIT     0C8H.4
 00CA                   127     RLDL    DATA    0CAH
 00A9                   128     LDLR    DATA    0A9H
 0087                   129     PCON    DATA    087H
 00DE                   130     CANCIR  DATA    0DEH
 00AE                   131     TCIR    DATA    0AEH
 00F8.5                 132     PWDI    BIT     0F8H.5
 00A2                   133     LSCR    DATA    0A2H
 0089                   134     TMOD    DATA    089H
 0088                   135     TCON    DATA    088H
 00D7                   136     OWDR    DATA    0D7H
 0088.1                 137     IE0     BIT     088H.1
 0088.3                 138     IE1     BIT     088H.3
 00EA                   139     MXAX    DATA    0EAH
 00A1                   140     LMSR    DATA    0A1H
 00F9                   141     MD0     DATA    0F9H
 00F0                   142     B       DATA    0F0H
 00FA                   143     MD1     DATA    0FAH
 00A1                   144     LSAIER  DATA    0A1H
 00FB                   145     MD2     DATA    0FBH
 00D8.2                 146     WTRF    BIT     0D8H.2
 00FC                   147     MD3     DATA    0FCH
 009E                   148     PISSR1  DATA    09EH
 00FD                   149     MD4     DATA    0FDH
 00A3                   150     LSSR    DATA    0A3H
 009F                   151     PISSR2  DATA    09FH
 00FE                   152     MD5     DATA    0FEH
 00E0                   153     ACC     DATA    0E0H
 00A8.4                 154     ES0     BIT     0A8H.4
 00C8.1                 155     CT2     BIT     0C8H.1
 00A8.6                 156     ES1     BIT     0A8H.6
 00A8.1                 157     ET0     BIT     0A8H.1
 00A8.3                 158     ET1     BIT     0A8H.3
 0088.5                 159     TF0     BIT     088H.5
 00A8.5                 160     ET2     BIT     0A8H.5
 0098.0                 161     RI0     BIT     098H.0
 0088.7                 162     TF1     BIT     088H.7
 00C8.7                 163     TF2     BIT     0C8H.7
 00C0.0                 164     RI1     BIT     0C0H.0
 00CE                   165     SPICIR  DATA    0CEH
 008C                   166     TH0     DATA    08CH
 00A8.0                 167     EX0     BIT     0A8H.0
 0098.1                 168     TI0     BIT     098H.1
 0088.0                 169     IT0     BIT     088H.0
 008D                   170     TH1     DATA    08DH
 00C0.1                 171     TI1     BIT     0C0H.1
 00A8.2                 172     EX1     BIT     0A8H.2
 0088.2                 173     IT1     BIT     088H.2
 00CD                   174     TH2     DATA    0CDH
 00D0.0                 175     P       BIT     0D0H.0
 008A                   176     TL0     DATA    08AH
 008F                   177     CSREPR  DATA    08FH
 008B                   178     TL1     DATA    08BH
 00CC                   179     TL2     DATA    0CCH
 00B8.4                 180     PS0     BIT     0B8H.4
 00E8                   181     EIE     DATA    0E8H
 0092                   182     WTST    DATA    092H
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE     4

 00B8.6                 183     PS1     BIT     0B8H.6
 00B8.1                 184     PT0     BIT     0B8H.1
 0091                   185     EIF     DATA    091H
 00D0.3                 186     RS0     BIT     0D0H.3
 00B8.3                 187     PT1     BIT     0B8H.3
 0097                   188     I2CDR   DATA    097H
 00D0.4                 189     RS1     BIT     0D0H.4
 00B8.5                 190     PT2     BIT     0B8H.5
 0088.4                 191     TR0     BIT     088H.4
 0088.6                 192     TR1     BIT     088H.6
 00C8.2                 193     TR2     BIT     0C8H.2
 00B8.0                 194     PX0     BIT     0B8H.0
 00B8.2                 195     PX1     BIT     0B8H.2
 009C                   196     DDR     DATA    09CH
 0083                   197     DPH     DATA    083H
 00F8                   198     EIP     DATA    0F8H
 0082                   199     DPL     DATA    082H
 00A2                   200     LCR     DATA    0A2H
 0099                   201     SBUF0   DATA    099H
 00C1                   202     SBUF1   DATA    0C1H
 00E8.0                 203     EINT2   BIT     0E8H.0
 00C8.3                 204     EXEN2   BIT     0C8H.3
 00B7                   205     MDR     DATA    0B7H
 00E8.1                 206     EINT3   BIT     0E8H.1
 00C8.0                 207     CPRL2   BIT     0C8H.0
 0098                   208     SCON0   DATA    098H
 00E8.2                 209     EINT4   BIT     0E8H.2
 00C0                   210     SCON1   DATA    0C0H
 0094                   211     SDSTSR  DATA    094H
 00E8.3                 212     EINT5   BIT     0E8H.3
 00E9                   213     STATUS  DATA    0E9H
 00E8.4                 214     EINT6   BIT     0E8H.4
 00C8                   215     T2CON   DATA    0C8H
 0086                   216     DPS     DATA    086H
 00DF                   217     CANDR   DATA    0DFH
 00AF                   218     TDR     DATA    0AFH
 00A5                   219     LDAHR   DATA    0A5H
 0093                   220     DPX     DATA    093H
 00B0.4                 221     Rs485_2_EN      BIT     0B0H.4
 00AD                   222     DMAHR   DATA    0ADH
 00F8.0                 223     PINT2   BIT     0F8H.0
 00B0.0                 224     RXD     BIT     0B0H.0
 00F8.1                 225     PINT3   BIT     0F8H.1
 008E                   226     CKCON   DATA    08EH
 00F8.2                 227     PINT4   BIT     0F8H.2
 00D8.1                 228     EWT     BIT     0D8H.1
 00B0.1                 229     TXD     BIT     0B0H.1
 00A4                   230     LDALR   DATA    0A4H
 00F8.3                 231     PINT5   BIT     0F8H.3
 00AB                   232     DMALR   DATA    0ABH
 00A3                   233     LSR     DATA    0A3H
 00F8.4                 234     PINT6   BIT     0F8H.4
 00AC                   235     DMAMR   DATA    0ACH
 00FF                   236     ARCON   DATA    0FFH
 00D0.5                 237     F0      BIT     0D0H.5
 00D0.1                 238     F1      BIT     0D0H.1
 00A6                   239     LDCSR   DATA    0A6H
 00D0                   240     PSW     DATA    0D0H
 0098.2                 241     RB08    BIT     098H.2
 00D8                   242     WDCON   DATA    0D8H
 00D8.0                 243     RWT     BIT     0D8H.0
 00C0.2                 244     RB18    BIT     0C0H.2
------                  245     ?PR?_?pxPortInitialiseStack?PORT         SEGMENT ECODE INSEG 
------                  246     ?PR?_?sPortStartScheduler?PORT           SEGMENT ECODE INSEG 
------                  247     ?PR?_?vPortEndScheduler?PORT             SEGMENT ECODE INSEG 
------                  248     ?PR?_?vPortContextSwitch?PORT            SEGMENT ECODE INSEG 
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE     5

------                  249     ?PR?_?OSIntCtxSw?PORT                    SEGMENT ECODE INSEG 
------                  250     ?PR?_?vIntPortContextSwitch?PORT         SEGMENT ECODE INSEG 
------                  251     ?PR?vTimer2ISR?PORT  SEGMENT ECODE INSEG 
------                  252     ?XD?vTimer2ISR?PORT  SEGMENT XDATA OVERLAYABLE
------                  253     ?PR?prvSetupTimerInterrupt?PORT          SEGMENT ECODE INSEG 
------                  254     ?XD?prvSetupTimerInterrupt?PORT          SEGMENT XDATA OVERLAYABLE
------                  255     ?DT?PORT             SEGMENT DATA 
                        256             EXTRN   CODE (_?prvGetCurrentTCB_XBP)
                        257             EXTRN   CODE (_?prvSetCurrentTCB_XBP)
                        258             EXTRN   CODE (_?LoadCtx)
                        259             EXTRN   CODE (_?vTaskIncrementTick)
                        260             EXTRN   HDATA (USB_timeout)
                        261             EXTRN   HDATA (uart1_timeout)
                        262             EXTRN   HDATA (uart2_timeout)
                        263             EXTRN   CODE (_DMA_WriteReg)
                        264             EXTRN   IDATA (STACK_START)
                        265             EXTRN   CODE (_?vTaskSwitchContext)
                        266             EXTRN   DATA (TICK_INT)
                        267             EXTRN   CODE (?C?ADDXBP)
                        268             EXTRN   CODE (?C?XBPOFF)
                        269             EXTRN   DATA (?C_XBP)
                        270             EXTRN   NUMBER (?C?XDATASEG)
                        271             EXTRN   CODE (?C?IILDX)
                        272             EXTRN   CODE (?C?PSTPTR)
                        273             EXTRN   CODE (?C?ISTPTR)
                        274             EXTRN   CODE (?C?ULSHR)
                        275             EXTRN   CODE (?C?CSTPTR)
                        276             PUBLIC  SaveSP
                        277             PUBLIC  vTimer2ISR
                        278             PUBLIC  _?vIntPortContextSwitch
                        279             PUBLIC  _?OSIntCtxSw
                        280             PUBLIC  _?vPortContextSwitch
                        281             PUBLIC  _?vPortEndScheduler
                        282             PUBLIC  _?sPortStartScheduler
                        283             PUBLIC  _?pxPortInitialiseStack
                        284     
------                  285             RSEG  ?XD?vTimer2ISR?PORT
000000                  286     ?vTimer2ISR?BYTE:
000000                  287             isr?640:   DS   1
                        288     
------                  289             RSEG  ?XD?prvSetupTimerInterrupt?PORT
000000                  290     ?prvSetupTimerInterrupt?BYTE:
000000                  291            temp?741:   DS   2
                        292     
------                  293             RSEG  ?DT?PORT
000000                  294              SaveSP:   DS   1
                        295     ; /*
                        296     ;       FreeRTOS V2.6.0 - Copyright (C) 2003 - 2005 Richard Barry.
                        297     ; 
                        298     ;       This file is part of the FreeRTOS distribution.
                        299     ; 
                        300     ;       FreeRTOS is free software; you can redistribute it and/or modify
                        301     ;       it under the terms of the GNU General Public License as published by
                        302     ;       the Free Software Foundation; either version 2 of the License, or
                        303     ;       (at your option) any later version.
                        304     ; 
                        305     ;       FreeRTOS is distributed in the hope that it will be useful,
                        306     ;       but WITHOUT ANY WARRANTY; without even the implied warranty of
                        307     ;       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        308     ;       GNU General Public License for more details.
                        309     ; 
                        310     ;       You should have received a copy of the GNU General Public License
                        311     ;       along with FreeRTOS; if not, write to the Free Software
                        312     ;       Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
                        313     ; 
                        314     ;       A special exception to the GPL can be applied should you wish to distribute
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE     6

                        315     ;       a combined work that includes FreeRTOS, without being obliged to provide
                        316     ;       the source code for any proprietary components.  See the licensing section 
                        317     ;       of http://www.FreeRTOS.org for full details of how and when the exception
                        318     ;       can be applied.
                        319     ; 
                        320     ;       ***************************************************************************
                        321     ;       See http://www.FreeRTOS.org for documentation, latest information, license 
                        322     ;       and contact details.  Please ensure to read the configuration and relevant 
                        323     ;       port sections of the online documentation.
                        324     ;       ***************************************************************************
                        325     ; */
                        326     ; 
                        327     ; /*-----------------------------------------------------------
                        328     ;  * Implementation of functions defined in portable.h for the Cygnal port.
                        329     ;  *----------------------------------------------------------*/
                        330     ; //#pragma SRC 
                        331     ; /* Standard includes. */
                        332     ; #include <string.h>
                        333     ; 
                        334     ; /* Scheduler includes. */
                        335     ; #include "projdefs.h"
                        336     ; #include "portable.h"
                        337     ; #include "task.h"
                        338     ; #include "queue.h"
                        339     ; #include "mstimer.h"
                        340     ; #include "interrupt.h"
                        341     ; #include "dma.h"
                        342     ; 
                        343     ; #include "hsuart.h"
                        344     ; #include "uart.h"
                        345     ; #include "../../../../USB/ch375_com.h"
                        346     ; 
                        347     ; /* Constants required to setup timer 2 to produce the RTOS tick. */
                        348     ; //#define portCLOCK_DIVISOR                           ( ( unsigned portLONG ) 12 )
                        349     ; //#define portMAX_TIMER_VALUE                         ( ( unsigned portLONG ) 0xffff )
                        350     ; //#define portENABLE_TIMER                            ( ( unsigned portCHAR ) 0x04 )
                        351     ; //#define portTIMER_2_INTERRUPT_ENABLE        ( ( unsigned portCHAR ) 0x20 )
                        352     ; 
                        353     ; /* The value used in the IE register when a task first starts. */
                        354     ; #define portGLOBAL_INTERRUPT_BIT      ( ( portSTACK_TYPE ) 0x80 )
                        355     ; 
                        356     ; /* The value used in the PSW register when a task first starts. */
                        357     ; #define portINITIAL_PSW                               ( ( portSTACK_TYPE ) 0x00 )
                        358     ; 
                        359     ; /* Macro to clear the timer 2 interrupt flag. */
                        360     ; #define portCLEAR_INTERRUPT_FLAG()    {                                       \
                        361     ;                                                                               EINT5 = 
                               0;              \
                        362     ;                                                                               EIF &= ~
                               INT5F;  \
                        363     ;                                                                               EINT5 = 
                               1;              \
                        364     ;                                                                       }
                        365     ;                                                                                       
                        366     ; /* Used during a context switch to store the size of the stack being copied
                        367     ; to or from XRAM. */
                        368     ; //data static unsigned portCHAR ucStackBytes;
                        369     ; //data  unsigned portCHAR ucStackBytes;
                        370     ; 
                        371     ; /* Used during a context switch to point to the next byte in XRAM from/to which
                        372     ; a RAM byte is to be copied. */
                        373     ; //xdata static portSTACK_TYPE * data pxXRAMStack;
                        374     ; //static portSTACK_TYPE xdata * data pxXRAMStack;
                        375     ; 
                        376     ; /* Used during a context switch to point to the next byte in RAM from/to which
                        377     ; an XRAM byte is to be copied. */
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE     7

                        378     ; //data static portSTACK_TYPE * data pxRAMStack;
                        379     ; //static  portSTACK_TYPE data * data pxRAMStack;
                        380     ; 
                        381     ; /* We require the address of the pxCurrentTCB variable, but don't want to know
                        382     ; any details of its type. */
                        383     ; //typedef void tskTCB;
                        384     ; //extern volatile tskTCB * volatile pxCurrentTCB;
                        385     ; 
                        386     ; void LoadCtx() reentrant;   /* Save the current working registers to stack, defined in
                                OS_CPU_A.ASM */
                        387     ; extern INT8U xdata * data C_XBP, TICK_INT;
                        388     ; 
                        389     ; 
                        390     ; /*
                        391     ;  * Setup the hardware to generate an interrupt off timer 2 at the required 
                        392     ;  * frequency.
                        393     ;  */
                        394     ; static void prvSetupTimerInterrupt( void );
                        395     ; 
                        396     ; 
                        397     ; /* 
                        398     ;  * See header file for description. 
                        399     ;  */
                        400     ; portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCod
                               e, void *pvParameters ) reentrant
                        401     
------                  402             RSEG  ?PR?_?pxPortInitialiseStack?PORT
000000                  403     _?pxPortInitialiseStack:
                        404             USING   0
                        405                             ; SOURCE LINE # 106
000000 9000FFFD         406             MOV     DPTR,#0FFFDH
000004 12000000   E     407             LCALL   ?C?ADDXBP
000008 EB               408             MOV     A,R3
000009 F0               409             MOVX    @DPTR,A
00000A A3               410             INC     DPTR
00000B EA               411             MOV     A,R2
00000C F0               412             MOVX    @DPTR,A
00000D A3               413             INC     DPTR
00000E E9               414             MOV     A,R1
00000F F0               415             MOVX    @DPTR,A
000010 9000FFFD         416             MOV     DPTR,#0FFFDH
000014 12000000   E     417             LCALL   ?C?ADDXBP
                        418     ; {
                        419     ;     portSTACK_TYPE * stk;
                        420     ; 
                        421     ;     stk    = (portSTACK_TYPE *) pxTopOfStack;        /* Load stack pointer            
                                                         */
                        422                             ; SOURCE LINE # 110
000018 90000003         423             MOV     DPTR,#03H
00001C 12000000   E     424             LCALL   ?C?XBPOFF
000020 E0               425             MOVX    A,@DPTR
000021 F9               426             MOV     R1,A
000022 A3               427             INC     DPTR
000023 E0               428             MOVX    A,@DPTR
000024 FA               429             MOV     R2,A
000025 A3               430             INC     DPTR
000026 E0               431             MOVX    A,@DPTR
000027 850083     E     432             MOV     DPH,?C_XBP
00002A 850082     E     433             MOV     DPL,?C_XBP+01H
00002D 759300     E     434             MOV     DPX,#?C?XDATASEG
000030 C9               435             XCH     A,R1
000031 F0               436             MOVX    @DPTR,A
000032 A3               437             INC     DPTR
000033 EA               438             MOV     A,R2
000034 F0               439             MOVX    @DPTR,A
000035 A3               440             INC     DPTR
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE     8

000036 E9               441             MOV     A,R1
000037 F0               442             MOVX    @DPTR,A
                        443     ; 
                        444     ;       stk                             -= sizeof(void *);              /* Save the pvPa
                               rameters to external stack */
                        445                             ; SOURCE LINE # 112
000038 850083     E     446             MOV     DPH,?C_XBP
00003B 850082     E     447             MOV     DPL,?C_XBP+01H
00003E 759300     E     448             MOV     DPX,#?C?XDATASEG
000041 A3               449             INC     DPTR
000042 74FF             450             MOV     A,#0FFH
000044 75F0FD           451             MOV     B,#0FDH
000047 12000000   E     452             LCALL   ?C?IILDX
                        453     ;       *(void**)stk     = pvParameters;        /*                               */
                        454                             ; SOURCE LINE # 113
00004B 90000009         455             MOV     DPTR,#09H
00004F 12000000   E     456             LCALL   ?C?XBPOFF
000053 E0               457             MOVX    A,@DPTR
000054 FB               458             MOV     R3,A
000055 A3               459             INC     DPTR
000056 E0               460             MOVX    A,@DPTR
000057 FA               461             MOV     R2,A
000058 A3               462             INC     DPTR
000059 E0               463             MOVX    A,@DPTR
00005A F9               464             MOV     R1,A
00005B C003             465             PUSH    AR3
00005D C002             466             PUSH    AR2
00005F C001             467             PUSH    AR1
000061 850083     E     468             MOV     DPH,?C_XBP
000064 850082     E     469             MOV     DPL,?C_XBP+01H
000067 759300     E     470             MOV     DPX,#?C?XDATASEG
00006A E0               471             MOVX    A,@DPTR
00006B FB               472             MOV     R3,A
00006C A3               473             INC     DPTR
00006D E0               474             MOVX    A,@DPTR
00006E FA               475             MOV     R2,A
00006F A3               476             INC     DPTR
000070 E0               477             MOVX    A,@DPTR
000071 F9               478             MOV     R1,A
000072 12000000   E     479             LCALL   ?C?PSTPTR
                        480     ; 
                        481     ;       stk                             -= sizeof(INT16U);                              
                                               /* The value should be loaded to PC    */
                        482                             ; SOURCE LINE # 115
000076 850083     E     483             MOV     DPH,?C_XBP
000079 850082     E     484             MOV     DPL,?C_XBP+01H
00007C 759300     E     485             MOV     DPX,#?C?XDATASEG
00007F A3               486             INC     DPTR
000080 74FF             487             MOV     A,#0FFH
000082 75F0FE           488             MOV     B,#0FEH
000085 12000000   E     489             LCALL   ?C?IILDX
                        490     ;       *(INT16U*)stk    = (INT16U) pxCode;                                             
                               /* next time when this task is running */
                        491                             ; SOURCE LINE # 116
000089 90000006         492             MOV     DPTR,#06H
00008D 12000000   E     493             LCALL   ?C?XBPOFF
000091 A3               494             INC     DPTR
000092 E0               495             MOVX    A,@DPTR
000093 FA               496             MOV     R2,A
000094 A3               497             INC     DPTR
000095 E0               498             MOVX    A,@DPTR
000096 AE02             499             MOV     R6,AR2
000098 FF               500             MOV     R7,A
000099 850083     E     501             MOV     DPH,?C_XBP
00009C 850082     E     502             MOV     DPL,?C_XBP+01H
00009F 759300     E     503             MOV     DPX,#?C?XDATASEG
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE     9

0000A2 E0               504             MOVX    A,@DPTR
0000A3 FB               505             MOV     R3,A
0000A4 A3               506             INC     DPTR
0000A5 E0               507             MOVX    A,@DPTR
0000A6 FA               508             MOV     R2,A
0000A7 A3               509             INC     DPTR
0000A8 E0               510             MOVX    A,@DPTR
0000A9 F9               511             MOV     R1,A
0000AA EE               512             MOV     A,R6
0000AB 8FF0             513             MOV     B,R7
0000AD 12000000   E     514             LCALL   ?C?ISTPTR
                        515     ; 
                        516     ;       *--stk                   = (portSTACK_TYPE )(((INT32U) pxCode>>16)+0x7F);      /
                               * Third byte of PC for dallas 390 */
                        517                             ; SOURCE LINE # 118
0000B1 90000006         518             MOV     DPTR,#06H
0000B5 12000000   E     519             LCALL   ?C?XBPOFF
0000B9 E0               520             MOVX    A,@DPTR
0000BA FB               521             MOV     R3,A
0000BB A3               522             INC     DPTR
0000BC E0               523             MOVX    A,@DPTR
0000BD FA               524             MOV     R2,A
0000BE A3               525             INC     DPTR
0000BF E0               526             MOVX    A,@DPTR
0000C0 F9               527             MOV     R1,A
0000C1 FF               528             MOV     R7,A
0000C2 AE02             529             MOV     R6,AR2
0000C4 AD03             530             MOV     R5,AR3
0000C6 7C00             531             MOV     R4,#00H
0000C8 7810             532             MOV     R0,#010H
0000CA 12000000   E     533             LCALL   ?C?ULSHR
0000CE EF               534             MOV     A,R7
0000CF 247F             535             ADD     A,#07FH
0000D1 FF               536             MOV     R7,A
0000D2 850083     E     537             MOV     DPH,?C_XBP
0000D5 850082     E     538             MOV     DPL,?C_XBP+01H
0000D8 759300     E     539             MOV     DPX,#?C?XDATASEG
0000DB E0               540             MOVX    A,@DPTR
0000DC FB               541             MOV     R3,A
0000DD A3               542             INC     DPTR
0000DE 74FF             543             MOV     A,#0FFH
0000E0 F5F0             544             MOV     B,A
0000E2 12000000   E     545             LCALL   ?C?IILDX
0000E6 A9F0             546             MOV     R1,B
0000E8 FA               547             MOV     R2,A
0000E9 EF               548             MOV     A,R7
0000EA 12000000   E     549             LCALL   ?C?CSTPTR
                        550     ; 
                        551     ; /* Following is the registers pushed into hardware stack */
                        552     ;       *--stk                   = 'A';                 /* ACC */
                        553                             ; SOURCE LINE # 121
0000EE 850083     E     554             MOV     DPH,?C_XBP
0000F1 850082     E     555             MOV     DPL,?C_XBP+01H
0000F4 759300     E     556             MOV     DPX,#?C?XDATASEG
0000F7 E0               557             MOVX    A,@DPTR
0000F8 FB               558             MOV     R3,A
0000F9 A3               559             INC     DPTR
0000FA 74FF             560             MOV     A,#0FFH
0000FC F5F0             561             MOV     B,A
0000FE 12000000   E     562             LCALL   ?C?IILDX
000102 A9F0             563             MOV     R1,B
000104 FA               564             MOV     R2,A
000105 7441             565             MOV     A,#041H
000107 12000000   E     566             LCALL   ?C?CSTPTR
                        567     ;       *--stk                   = 'B';                 /* B   */
                        568                             ; SOURCE LINE # 122
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    10

00010B 850083     E     569             MOV     DPH,?C_XBP
00010E 850082     E     570             MOV     DPL,?C_XBP+01H
000111 759300     E     571             MOV     DPX,#?C?XDATASEG
000114 E0               572             MOVX    A,@DPTR
000115 FB               573             MOV     R3,A
000116 A3               574             INC     DPTR
000117 74FF             575             MOV     A,#0FFH
000119 F5F0             576             MOV     B,A
00011B 12000000   E     577             LCALL   ?C?IILDX
00011F A9F0             578             MOV     R1,B
000121 FA               579             MOV     R2,A
000122 7442             580             MOV     A,#042H
000124 12000000   E     581             LCALL   ?C?CSTPTR
                        582     ;       *--stk                   = 'X';                 /* DPX */
                        583                             ; SOURCE LINE # 123
000128 850083     E     584             MOV     DPH,?C_XBP
00012B 850082     E     585             MOV     DPL,?C_XBP+01H
00012E 759300     E     586             MOV     DPX,#?C?XDATASEG
000131 E0               587             MOVX    A,@DPTR
000132 FB               588             MOV     R3,A
000133 A3               589             INC     DPTR
000134 74FF             590             MOV     A,#0FFH
000136 F5F0             591             MOV     B,A
000138 12000000   E     592             LCALL   ?C?IILDX
00013C A9F0             593             MOV     R1,B
00013E FA               594             MOV     R2,A
00013F 7458             595             MOV     A,#058H
000141 12000000   E     596             LCALL   ?C?CSTPTR
                        597     ;       *--stk                   = 'H';                 /* DPH */
                        598                             ; SOURCE LINE # 124
000145 850083     E     599             MOV     DPH,?C_XBP
000148 850082     E     600             MOV     DPL,?C_XBP+01H
00014B 759300     E     601             MOV     DPX,#?C?XDATASEG
00014E E0               602             MOVX    A,@DPTR
00014F FB               603             MOV     R3,A
000150 A3               604             INC     DPTR
000151 74FF             605             MOV     A,#0FFH
000153 F5F0             606             MOV     B,A
000155 12000000   E     607             LCALL   ?C?IILDX
000159 A9F0             608             MOV     R1,B
00015B FA               609             MOV     R2,A
00015C 7448             610             MOV     A,#048H
00015E 12000000   E     611             LCALL   ?C?CSTPTR
                        612     ;       *--stk                   = 'L';                 /* DPL */
                        613                             ; SOURCE LINE # 125
000162 850083     E     614             MOV     DPH,?C_XBP
000165 850082     E     615             MOV     DPL,?C_XBP+01H
000168 759300     E     616             MOV     DPX,#?C?XDATASEG
00016B E0               617             MOVX    A,@DPTR
00016C FB               618             MOV     R3,A
00016D A3               619             INC     DPTR
00016E 74FF             620             MOV     A,#0FFH
000170 F5F0             621             MOV     B,A
000172 12000000   E     622             LCALL   ?C?IILDX
000176 A9F0             623             MOV     R1,B
000178 FA               624             MOV     R2,A
000179 744C             625             MOV     A,#04CH
00017B 12000000   E     626             LCALL   ?C?CSTPTR
                        627     ; //    *--stk                   = 'X';                 /* DPX1 for second DPTR */
                        628     ; //    *--stk                   = 'H';                 /* DPH1 for second DPTR */
                        629     ; //    *--stk                   = 'L';                 /* DPL1 for second DPTR */
                        630     ; //    *--stk                   = DPS;                 /* DPS for second DPTR */
                        631     ;       *--stk                   = PSW;                                 /* PSW */
                        632                             ; SOURCE LINE # 130
00017F 850083     E     633             MOV     DPH,?C_XBP
000182 850082     E     634             MOV     DPL,?C_XBP+01H
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    11

000185 759300     E     635             MOV     DPX,#?C?XDATASEG
000188 E0               636             MOVX    A,@DPTR
000189 FB               637             MOV     R3,A
00018A A3               638             INC     DPTR
00018B 74FF             639             MOV     A,#0FFH
00018D F5F0             640             MOV     B,A
00018F 12000000   E     641             LCALL   ?C?IILDX
000193 A9F0             642             MOV     R1,B
000195 FA               643             MOV     R2,A
000196 E5D0             644             MOV     A,PSW
000198 12000000   E     645             LCALL   ?C?CSTPTR
                        646     ;       *--stk                   = 0;                   /* R0  */
                        647                             ; SOURCE LINE # 131
00019C 850083     E     648             MOV     DPH,?C_XBP
00019F 850082     E     649             MOV     DPL,?C_XBP+01H
0001A2 759300     E     650             MOV     DPX,#?C?XDATASEG
0001A5 E0               651             MOVX    A,@DPTR
0001A6 FB               652             MOV     R3,A
0001A7 A3               653             INC     DPTR
0001A8 74FF             654             MOV     A,#0FFH
0001AA F5F0             655             MOV     B,A
0001AC 12000000   E     656             LCALL   ?C?IILDX
0001B0 A9F0             657             MOV     R1,B
0001B2 FA               658             MOV     R2,A
0001B3 E4               659             CLR     A
0001B4 12000000   E     660             LCALL   ?C?CSTPTR
                        661     ; /*
                        662     ;       *--stk                   = 1;                   // should be R1
                        663     ;       *--stk                   = 2;                   // should be R2
                        664     ;       *--stk                   = 3;                   // should be R3
                        665     ; */
                        666     ;       stk                             -= sizeof(void *);      /* Keil C uses R1,R2,R3 
                               to pass the */
                        667                             ; SOURCE LINE # 137
0001B8 850083     E     668             MOV     DPH,?C_XBP
0001BB 850082     E     669             MOV     DPL,?C_XBP+01H
0001BE 759300     E     670             MOV     DPX,#?C?XDATASEG
0001C1 A3               671             INC     DPTR
0001C2 74FF             672             MOV     A,#0FFH
0001C4 75F0FD           673             MOV     B,#0FDH
0001C7 12000000   E     674             LCALL   ?C?IILDX
                        675     ;       *(void**)stk     = pvParameters;                  /* arguments of functions.    
                                     */
                        676                             ; SOURCE LINE # 138
0001CB 90000009         677             MOV     DPTR,#09H
0001CF 12000000   E     678             LCALL   ?C?XBPOFF
0001D3 E0               679             MOVX    A,@DPTR
0001D4 FB               680             MOV     R3,A
0001D5 A3               681             INC     DPTR
0001D6 E0               682             MOVX    A,@DPTR
0001D7 FA               683             MOV     R2,A
0001D8 A3               684             INC     DPTR
0001D9 E0               685             MOVX    A,@DPTR
0001DA F9               686             MOV     R1,A
0001DB C003             687             PUSH    AR3
0001DD C002             688             PUSH    AR2
0001DF C001             689             PUSH    AR1
0001E1 850083     E     690             MOV     DPH,?C_XBP
0001E4 850082     E     691             MOV     DPL,?C_XBP+01H
0001E7 759300     E     692             MOV     DPX,#?C?XDATASEG
0001EA E0               693             MOVX    A,@DPTR
0001EB FB               694             MOV     R3,A
0001EC A3               695             INC     DPTR
0001ED E0               696             MOVX    A,@DPTR
0001EE FA               697             MOV     R2,A
0001EF A3               698             INC     DPTR
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    12

0001F0 E0               699             MOVX    A,@DPTR
0001F1 F9               700             MOV     R1,A
0001F2 12000000   E     701             LCALL   ?C?PSTPTR
                        702     ; 
                        703     ;       *--stk                   = 4;                   /* R4  */
                        704                             ; SOURCE LINE # 140
0001F6 850083     E     705             MOV     DPH,?C_XBP
0001F9 850082     E     706             MOV     DPL,?C_XBP+01H
0001FC 759300     E     707             MOV     DPX,#?C?XDATASEG
0001FF E0               708             MOVX    A,@DPTR
000200 FB               709             MOV     R3,A
000201 A3               710             INC     DPTR
000202 74FF             711             MOV     A,#0FFH
000204 F5F0             712             MOV     B,A
000206 12000000   E     713             LCALL   ?C?IILDX
00020A A9F0             714             MOV     R1,B
00020C FA               715             MOV     R2,A
00020D 7404             716             MOV     A,#04H
00020F 12000000   E     717             LCALL   ?C?CSTPTR
                        718     ;       *--stk                   = 5;                   /* R5  */
                        719                             ; SOURCE LINE # 141
000213 850083     E     720             MOV     DPH,?C_XBP
000216 850082     E     721             MOV     DPL,?C_XBP+01H
000219 759300     E     722             MOV     DPX,#?C?XDATASEG
00021C E0               723             MOVX    A,@DPTR
00021D FB               724             MOV     R3,A
00021E A3               725             INC     DPTR
00021F 74FF             726             MOV     A,#0FFH
000221 F5F0             727             MOV     B,A
000223 12000000   E     728             LCALL   ?C?IILDX
000227 A9F0             729             MOV     R1,B
000229 FA               730             MOV     R2,A
00022A 7405             731             MOV     A,#05H
00022C 12000000   E     732             LCALL   ?C?CSTPTR
                        733     ;       *--stk                   = 6;                   /* R6  */
                        734                             ; SOURCE LINE # 142
000230 850083     E     735             MOV     DPH,?C_XBP
000233 850082     E     736             MOV     DPL,?C_XBP+01H
000236 759300     E     737             MOV     DPX,#?C?XDATASEG
000239 E0               738             MOVX    A,@DPTR
00023A FB               739             MOV     R3,A
00023B A3               740             INC     DPTR
00023C 74FF             741             MOV     A,#0FFH
00023E F5F0             742             MOV     B,A
000240 12000000   E     743             LCALL   ?C?IILDX
000244 A9F0             744             MOV     R1,B
000246 FA               745             MOV     R2,A
000247 7406             746             MOV     A,#06H
000249 12000000   E     747             LCALL   ?C?CSTPTR
                        748     ;       *--stk                   = 7;                   /* R7  */
                        749                             ; SOURCE LINE # 143
00024D 850083     E     750             MOV     DPH,?C_XBP
000250 850082     E     751             MOV     DPL,?C_XBP+01H
000253 759300     E     752             MOV     DPX,#?C?XDATASEG
000256 E0               753             MOVX    A,@DPTR
000257 FB               754             MOV     R3,A
000258 A3               755             INC     DPTR
000259 74FF             756             MOV     A,#0FFH
00025B F5F0             757             MOV     B,A
00025D 12000000   E     758             LCALL   ?C?IILDX
000261 A9F0             759             MOV     R1,B
000263 FA               760             MOV     R2,A
000264 7407             761             MOV     A,#07H
000266 12000000   E     762             LCALL   ?C?CSTPTR
                        763     ; /* Following is the registers pushed into hardware stack manually to support the dalla
                               s 390 */
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    13

                        764     ;     *--stk           = 0x80;                /* IE, EA is enabled  */
                        765                             ; SOURCE LINE # 145
00026A 850083     E     766             MOV     DPH,?C_XBP
00026D 850082     E     767             MOV     DPL,?C_XBP+01H
000270 759300     E     768             MOV     DPX,#?C?XDATASEG
000273 E0               769             MOVX    A,@DPTR
000274 FB               770             MOV     R3,A
000275 A3               771             INC     DPTR
000276 74FF             772             MOV     A,#0FFH
000278 F5F0             773             MOV     B,A
00027A 12000000   E     774             LCALL   ?C?IILDX
00027E A9F0             775             MOV     R1,B
000280 FA               776             MOV     R2,A
000281 7480             777             MOV     A,#080H
000283 12000000   E     778             LCALL   ?C?CSTPTR
                        779     ; 
                        780     ; /*
                        781     ;     Next is calculating the hardware stack pointer.
                        782     ; */
                        783     ;     *--stk                     = (INT8U) portSTACK_START-1      /* Initial value when 
                               main was called    */
                        784                             ; SOURCE LINE # 150
000287 7400       E     785             MOV     A,#LOW (STACK_START)
000289 2408             786             ADD     A,#08H
00028B 2405             787             ADD     A,#05H
00028D 04               788             INC     A
00028E 2402             789             ADD     A,#02H
000290 04               790             INC     A
000291 FF               791             MOV     R7,A
000292 850083     E     792             MOV     DPH,?C_XBP
000295 850082     E     793             MOV     DPL,?C_XBP+01H
000298 759300     E     794             MOV     DPX,#?C?XDATASEG
00029B E0               795             MOVX    A,@DPTR
00029C FB               796             MOV     R3,A
00029D A3               797             INC     DPTR
00029E 74FF             798             MOV     A,#0FFH
0002A0 F5F0             799             MOV     B,A
0002A2 12000000   E     800             LCALL   ?C?IILDX
0002A6 A9F0             801             MOV     R1,B
0002A8 FA               802             MOV     R2,A
0002A9 EF               803             MOV     A,R7
0002AA 12000000   E     804             LCALL   ?C?CSTPTR
                        805     ;                          +1                   /* IE */
                        806     ;                          +8                   /* R0-R7, eight registers was saved     
                                */
                        807     ;                        +5                   /* ACC, B, DPH, DPL, PSW, five registers *
                               /
                        808     ;                        +1                   /* Dallas 390 extra registers DPX1 */
                        809     ; //                       +4                   /* Dallas 390 extra registers for second
                                DPTR - DPL1 DPH1 DPX1 DPS */
                        810     ;                        +sizeof(INT16U)      /* The PC value to be loaded             *
                               /
                        811     ;                        +sizeof(INT8U)       /* The third byte of PC value to be loaded
                                for dallas 390  */
                        812     ;                                          ;
                        813     ;     return ((void *)stk);
                        814                             ; SOURCE LINE # 159
0002AE 850083     E     815             MOV     DPH,?C_XBP
0002B1 850082     E     816             MOV     DPL,?C_XBP+01H
0002B4 759300     E     817             MOV     DPX,#?C?XDATASEG
0002B7 E0               818             MOVX    A,@DPTR
0002B8 FB               819             MOV     R3,A
0002B9 A3               820             INC     DPTR
0002BA E0               821             MOVX    A,@DPTR
0002BB FA               822             MOV     R2,A
0002BC A3               823             INC     DPTR
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    14

0002BD E0               824             MOVX    A,@DPTR
0002BE F9               825             MOV     R1,A
                        826     ; 
                        827     ; }
                        828                             ; SOURCE LINE # 161
0002BF                  829     ?C0001:
0002BF 9000000C         830             MOV     DPTR,#0CH
0002C3 02000000   E     831             LJMP    ?C?ADDXBP
                        832     ; END OF _?pxPortInitialiseStack
                        833     
                        834     ; 
                        835     ; /* 
                        836     ;  * See header file for description. 
                        837     ;  */
                        838     ; portSHORT sPortStartScheduler( portSHORT sUsePreemption ) reentrant
                        839     
------                  840             RSEG  ?PR?_?sPortStartScheduler?PORT
000000                  841     _?sPortStartScheduler:
                        842             USING   0
                        843                             ; SOURCE LINE # 166
000000 9000FFFE         844             MOV     DPTR,#0FFFEH
000004 12000000   E     845             LCALL   ?C?ADDXBP
000008 EE               846             MOV     A,R6
000009 F0               847             MOVX    @DPTR,A
00000A A3               848             INC     DPTR
00000B EF               849             MOV     A,R7
00000C F0               850             MOVX    @DPTR,A
                        851     ; {
                        852     ;       /* Stop compiler warnings.  This port uses a constant defined in
                        853     ;       portmacro.h to specify whether or not preemption is used. */
                        854     ;       sUsePreemption = sUsePreemption;
                        855                             ; SOURCE LINE # 170
00000D 850083     E     856             MOV     DPH,?C_XBP
000010 850082     E     857             MOV     DPL,?C_XBP+01H
000013 759300     E     858             MOV     DPX,#?C?XDATASEG
000016 E0               859             MOVX    A,@DPTR
000017 FF               860             MOV     R7,A
000018 A3               861             INC     DPTR
000019 E0               862             MOVX    A,@DPTR
00001A 850083     E     863             MOV     DPH,?C_XBP
00001D 850082     E     864             MOV     DPL,?C_XBP+01H
000020 759300     E     865             MOV     DPX,#?C?XDATASEG
000023 CF               866             XCH     A,R7
000024 F0               867             MOVX    @DPTR,A
000025 A3               868             INC     DPTR
000026 EF               869             MOV     A,R7
000027 F0               870             MOVX    @DPTR,A
                        871     ; 
                        872     ;       /* Setup timer 2 to generate the RTOS tick. */
                        873     ;       prvSetupTimerInterrupt();       
                        874                             ; SOURCE LINE # 173
000028 12000000   F     875             LCALL   prvSetupTimerInterrupt
                        876     ; 
                        877     ;     prvSetCurrentTCB_XBP();
                        878                             ; SOURCE LINE # 175
00002C 12000000   E     879             LCALL   _?prvSetCurrentTCB_XBP
                        880     ;       LoadCtx();
                        881                             ; SOURCE LINE # 176
000030 12000000   E     882             LCALL   _?LoadCtx
                        883     ;                                                                               /* Shoul
                               d never get here! */
                        884     ;       return pdTRUE;
                        885                             ; SOURCE LINE # 178
000034 7E00             886             MOV     R6,#00H
000036 7F01             887             MOV     R7,#01H
                        888     ; }
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    15

                        889                             ; SOURCE LINE # 179
000038                  890     ?C0002:
000038 90000002         891             MOV     DPTR,#02H
00003C 02000000   E     892             LJMP    ?C?ADDXBP
                        893     ; END OF _?sPortStartScheduler
                        894     
                        895     ; 
                        896     ; /*-----------------------------------------------------------*/
                        897     ; 
                        898     ; void vPortEndScheduler(void) reentrant
                        899     
------                  900             RSEG  ?PR?_?vPortEndScheduler?PORT
000000                  901     _?vPortEndScheduler:
                        902             USING   0
                        903                             ; SOURCE LINE # 183
                        904     ; {
                        905     ; 
                        906     ;       /* Not implemented for this port. */
                        907     ; }
                        908                             ; SOURCE LINE # 187
000000 22               909             RET     
                        910     ; END OF _?vPortEndScheduler
                        911     
                        912     ; /*-----------------------------------------------------------*/
                        913     ; 
                        914     ; 
                        915     ; /*************************************************************************************
                               *********************
                        916     ; * C_OSCtxSw is the c part of OSCtxSw.
                        917     ; * When control passes to this function, the processor registers have been saved in ext
                               ernal stack
                        918     ; **************************************************************************************
                               *********************/
                        919     ; void vPortContextSwitch(void) reentrant
                        920     
------                  921             RSEG  ?PR?_?vPortContextSwitch?PORT
000000                  922     _?vPortContextSwitch:
                        923             USING   0
                        924                             ; SOURCE LINE # 195
                        925     ; {
                        926     ; 
                        927     ; /*    Save processor registers; DONE in the OSCtxSw part in OS_CPU_ASM.ASM            
                                                     */
                        928     ; 
                        929     ; /*    Save the current task's stack pointer into the current task's OS_TCB:  
                        930     ;               prvGetCurrentTCB_XBP();
                        931     ;       Call vTaskSwitchContext();                                    
                        932     ;       Get the stack pointer of the task to resume:                           
                        933     ;               prvSetCurrentTCB_XBP;
                        934     ;       Restore all processor registers from the new task's stack;             
                        935     ;       Execute a return from interrupt instruction;                           */
                        936     ;     prvGetCurrentTCB_XBP();
                        937                             ; SOURCE LINE # 207
000000 12000000   E     938             LCALL   _?prvGetCurrentTCB_XBP
                        939     ;     
                        940     ;       vTaskSwitchContext();
                        941                             ; SOURCE LINE # 209
000004 12000000   E     942             LCALL   _?vTaskSwitchContext
                        943     ; 
                        944     ;     prvSetCurrentTCB_XBP();
                        945                             ; SOURCE LINE # 211
000008 12000000   E     946             LCALL   _?prvSetCurrentTCB_XBP
                        947     ;     LoadCtx();
                        948                             ; SOURCE LINE # 212
00000C 02000000   E     949             LJMP    _?LoadCtx
                        950     ; END OF _?vPortContextSwitch
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    16

                        951     
                        952     ; 
                        953     ; }
                        954     ; 
                        955     ; 
                        956     ; INT8U data SaveSP;
                        957     ; 
                        958     ; void OSIntCtxSw(void) reentrant
                        959     
------                  960             RSEG  ?PR?_?OSIntCtxSw?PORT
000000                  961     _?OSIntCtxSw:
                        962             USING   0
                        963                             ; SOURCE LINE # 219
                        964     ; {
                        965     ; 
                        966     ;       EA=0;
                        967                             ; SOURCE LINE # 222
000000 C2AF             968             CLR     EA
                        969     ;     SP=SaveSP;
                        970                             ; SOURCE LINE # 223
000002 850081     F     971             MOV     SP,SaveSP
                        972     ; 
                        973     ;     prvSetCurrentTCB_XBP();
                        974                             ; SOURCE LINE # 225
000005 12000000   E     975             LCALL   _?prvSetCurrentTCB_XBP
                        976     ; 
                        977     ; #pragma ASM
                        978     ;       EXTRN   CODE(_?KCOSCtxSw)
                        979               EXTRN   code(_?KCOSCtxSw)
                        980     ;       MOV             A, #BYTE0( _?KCOSCtxSw)
000009 7400       E     981               MOV           A, #BYTE0( _?KCOSCtxSw)
                        982     ;       PUSH    ACC
00000B C0E0             983               PUSH  ACC
                        984     ;       MOV             A, #BYTE1(_?KCOSCtxSw)
00000D 7400       E     985               MOV           A, #BYTE1(_?KCOSCtxSw)
                        986     ;       PUSH    ACC
00000F C0E0             987               PUSH  ACC
                        988     ;       MOV             A, #BYTE2(_?KCOSCtxSw)
000011 7400       E     989               MOV           A, #BYTE2(_?KCOSCtxSw)
                        990     ;       PUSH    ACC
000013 C0E0             991               PUSH  ACC
                        992     ;       RETI
000015 32               993               RETI
                        994     ; #pragma ENDASM
                        995     ; 
                        996     ; }
                        997                             ; SOURCE LINE # 238
000016 22               998             RET     
                        999     ; END OF _?OSIntCtxSw
                       1000     
                       1001     ; 
                       1002     ; 
                       1003     ; void vIntPortContextSwitch(void) reentrant
                       1004     
------                 1005             RSEG  ?PR?_?vIntPortContextSwitch?PORT
000000                 1006     _?vIntPortContextSwitch:
                       1007             USING   0
                       1008                             ; SOURCE LINE # 241
                       1009     ; {
                       1010     ; 
                       1011     ; /*    Save processor registers; DONE in the OSCtxSw part in OS_CPU_ASM.ASM            
                                                     */
                       1012     ; 
                       1013     ; /*    Save the current task's stack pointer into the current task's OS_TCB:  
                       1014     ;               prvGetCurrentTCB_XBP();
                       1015     ;       Call vTaskSwitchContext();                                    
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    17

                       1016     ;       Get the stack pointer of the task to resume:                           
                       1017     ;               prvSetCurrentTCB_XBP;
                       1018     ;       Restore all processor registers from the new task's stack;             
                       1019     ;       Execute a return from interrupt instruction;                           */
                       1020     ;     prvGetCurrentTCB_XBP();
                       1021                             ; SOURCE LINE # 253
000000 12000000   E    1022             LCALL   _?prvGetCurrentTCB_XBP
                       1023     ; 
                       1024     ;       if ( TICK_INT == 1 )
                       1025                             ; SOURCE LINE # 255
000004 E500       E    1026             MOV     A,TICK_INT
000006 B40107          1027             CJNE    A,#01H,?C0006
                       1028     ;       {
                       1029                             ; SOURCE LINE # 256
                       1030     ;               vTaskIncrementTick();
                       1031                             ; SOURCE LINE # 257
000009 12000000   E    1032             LCALL   _?vTaskIncrementTick
                       1033     ;               TICK_INT = 0;
                       1034                             ; SOURCE LINE # 258
00000D E4              1035             CLR     A
00000E F500       E    1036             MOV     TICK_INT,A
                       1037     ;       }
                       1038                             ; SOURCE LINE # 259
000010                 1039     ?C0006:
                       1040     ;       vTaskSwitchContext();
                       1041                             ; SOURCE LINE # 260
000010 12000000   E    1042             LCALL   _?vTaskSwitchContext
                       1043     ;               
                       1044     ;       portCLEAR_INTERRUPT_FLAG();
                       1045                             ; SOURCE LINE # 262
000014 C2EB            1046             CLR     EINT5
000016 5391F7          1047             ANL     EIF,#0F7H
000019 D2EB            1048             SETB    EINT5
                       1049     ; 
                       1050     ;     prvSetCurrentTCB_XBP();
                       1051                             ; SOURCE LINE # 264
00001B 12000000   E    1052             LCALL   _?prvSetCurrentTCB_XBP
                       1053     ;     LoadCtx();
                       1054                             ; SOURCE LINE # 265
00001F 12000000   E    1055             LCALL   _?LoadCtx
                       1056     ;       return;
                       1057     ; 
                       1058     ; }
                       1059                             ; SOURCE LINE # 268
000023                 1060     ?C0007:
000023 22              1061             RET     
                       1062     ; END OF _?vIntPortContextSwitch
                       1063     
006073                 1064     CSEG    AT      06073H
006073 02000000   F    1065             LJMP    vTimer2ISR
                       1066     
                       1067     ; 
                       1068     ; /*-----------------------------------------------------------*/
                       1069     ; 
                       1070     ; #if portUSE_PREEMPTION == 1
                       1071     ; 
                       1072     ; /*-----------------------------------------------------------*/
                       1073     ; 
                       1074     ; void vTimer2ISR( void ) interrupt 10
                       1075     
------                 1076             RSEG  ?PR?vTimer2ISR?PORT
                       1077             USING   0
000000                 1078     vTimer2ISR:
000000 C0E0            1079             PUSH    ACC
000002 C0F0            1080             PUSH    B
000004 C093            1081             PUSH    DPX
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    18

000006 C083            1082             PUSH    DPH
000008 C082            1083             PUSH    DPL
00000A C0D0            1084             PUSH    PSW
00000C 75D000          1085             MOV     PSW,#00H
00000F C000            1086             PUSH    AR0
000011 C001            1087             PUSH    AR1
000013 C002            1088             PUSH    AR2
000015 C003            1089             PUSH    AR3
000017 C004            1090             PUSH    AR4
000019 C005            1091             PUSH    AR5
00001B C006            1092             PUSH    AR6
00001D C007            1093             PUSH    AR7
                       1094             USING   0
                       1095                             ; SOURCE LINE # 276
                       1096     ; {
                       1097     ;       unsigned portCHAR       isr;
                       1098     ; #pragma ASM
                       1099     ;               PUSH IE
00001F C0A8            1100               PUSH IE
                       1101     ; #pragma ENDASM
                       1102     ;               isr = EA;
                       1103                             ; SOURCE LINE # 282
000021 A2AF            1104             MOV     C,EA
000023 E4              1105             CLR     A
000024 33              1106             RLC     A
000025 90000000   F    1107             MOV     DPTR,#isr?640
000029 F0              1108             MOVX    @DPTR,A
                       1109     ;               EA = 0;
                       1110                             ; SOURCE LINE # 283
00002A C2AF            1111             CLR     EA
                       1112     ;               if(uart2_timeout)
                       1113                             ; SOURCE LINE # 284
00002C 90000000   E    1114             MOV     DPTR,#uart2_timeout
000030 E0              1115             MOVX    A,@DPTR
000031 6002            1116             JZ      ?C0008
                       1117     ;                       uart2_timeout--;
                       1118                             ; SOURCE LINE # 285
000033 14              1119             DEC     A
000034 F0              1120             MOVX    @DPTR,A
000035                 1121     ?C0008:
                       1122     ;               if(uart1_timeout)
                       1123                             ; SOURCE LINE # 286
000035 90000000   E    1124             MOV     DPTR,#uart1_timeout
000039 E0              1125             MOVX    A,@DPTR
00003A 6002            1126             JZ      ?C0009
                       1127     ;               { uart1_timeout--;  }
                       1128                             ; SOURCE LINE # 287
00003C 14              1129             DEC     A
00003D F0              1130             MOVX    @DPTR,A
00003E                 1131     ?C0009:
                       1132     ;               if(USB_timeout)
                       1133                             ; SOURCE LINE # 288
00003E 90000000   E    1134             MOV     DPTR,#USB_timeout
000042 E0              1135             MOVX    A,@DPTR
000043 6002            1136             JZ      ?C0010
                       1137     ;                       USB_timeout--;
                       1138                             ; SOURCE LINE # 289
000045 14              1139             DEC     A
000046 F0              1140             MOVX    @DPTR,A
000047                 1141     ?C0010:
                       1142     ;               TICK_INT = 1;
                       1143                             ; SOURCE LINE # 290
000047 750001     E    1144             MOV     TICK_INT,#01H
                       1145     ;               SaveSP=SP;
                       1146                             ; SOURCE LINE # 291
00004A 858100     F    1147             MOV     SaveSP,SP
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    19

                       1148     ;         prvGetCurrentTCB_XBP();
                       1149                             ; SOURCE LINE # 292
00004D 12000000   E    1150             LCALL   _?prvGetCurrentTCB_XBP
                       1151     ;               EA=isr;
                       1152                             ; SOURCE LINE # 293
000051 90000000   F    1153             MOV     DPTR,#isr?640
000055 E0              1154             MOVX    A,@DPTR
000056 24FF            1155             ADD     A,#0FFH
000058 92AF            1156             MOV     EA,C
                       1157     ; 
                       1158     ;               OSIntCtxSw();
                       1159                             ; SOURCE LINE # 295
00005A 12000000   F    1160             LCALL   _?OSIntCtxSw
                       1161     ; }
                       1162                             ; SOURCE LINE # 296
00005E D007            1163             POP     AR7
000060 D006            1164             POP     AR6
000062 D005            1165             POP     AR5
000064 D004            1166             POP     AR4
000066 D003            1167             POP     AR3
000068 D002            1168             POP     AR2
00006A D001            1169             POP     AR1
00006C D000            1170             POP     AR0
00006E D0D0            1171             POP     PSW
000070 D082            1172             POP     DPL
000072 D083            1173             POP     DPH
000074 D093            1174             POP     DPX
000076 D0F0            1175             POP     B
000078 D0E0            1176             POP     ACC
00007A 32              1177             RETI    
                       1178     ; END OF vTimer2ISR
                       1179     
                       1180     ; 
                       1181     ; #endif
                       1182     ; 
                       1183     ; /*-----------------------------------------------------------*/
                       1184     ; static void prvSetupTimerInterrupt( void )
                       1185     
------                 1186             RSEG  ?PR?prvSetupTimerInterrupt?PORT
000000                 1187     prvSetupTimerInterrupt:
                       1188             USING   0
                       1189                             ; SOURCE LINE # 301
                       1190     ; {
                       1191                             ; SOURCE LINE # 302
                       1192     ;       /* using MS_TIMER */
                       1193     ;       U8_T XDATA      temp[2];
                       1194     ; 
                       1195     ;       /* set software timer */
                       1196     ;       temp[1] = (U8_T)SWTIMER_INTERVAL;
                       1197                             ; SOURCE LINE # 307
000000 90000000   F    1198             MOV     DPTR,#temp?741+01H
000004 740A            1199             MOV     A,#0AH
000006 F0              1200             MOVX    @DPTR,A
                       1201     ;       temp[0] = (U8_T)(SWTIMER_INTERVAL >> 8) + SWTIMER_START + SWTIMER_INT_ENABLE;
                       1202                             ; SOURCE LINE # 308
000007 90000000   F    1203             MOV     DPTR,#temp?741
00000B 7490            1204             MOV     A,#090H
00000D F0              1205             MOVX    @DPTR,A
                       1206     ;       DMA_WriteReg(SWTIMER_REG, temp, 2);
                       1207                             ; SOURCE LINE # 309
00000E 7C00       F    1208             MOV     R4,#HIGH (temp?741)
000010 7D00       F    1209             MOV     R5,#LOW (temp?741)
000012 7B02            1210             MOV     R3,#02H
000014 7F0C            1211             MOV     R7,#0CH
000016 12000000   E    1212             LCALL   _DMA_WriteReg
                       1213     ; 
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    20

                       1214     ;       EXTINT5(ON);    /* Enable INT5 interrupt for software timer. */
                       1215                             ; SOURCE LINE # 311
00001A D2EB            1216             SETB    EINT5
                       1217     ; 
                       1218     ; }
                       1219                             ; SOURCE LINE # 313
00001C 22              1220             RET     
                       1221     ; END OF prvSetupTimerInterrupt
                       1222     
                       1223             END
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    21

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E     ATTRIBUTES

?C0001. . . . . . . . . . . . . . . . .    EC ADDR  02BFH     R   SEG=?PR?_?PXPORTINITIALISESTACK?PORT
?C0002. . . . . . . . . . . . . . . . .    EC ADDR  0038H     R   SEG=?PR?_?SPORTSTARTSCHEDULER?PORT
?C0006. . . . . . . . . . . . . . . . .    EC ADDR  0010H     R   SEG=?PR?_?VINTPORTCONTEXTSWITCH?PORT
?C0007. . . . . . . . . . . . . . . . .    EC ADDR  0023H     R   SEG=?PR?_?VINTPORTCONTEXTSWITCH?PORT
?C0008. . . . . . . . . . . . . . . . .    EC ADDR  0035H     R   SEG=?PR?VTIMER2ISR?PORT
?C0009. . . . . . . . . . . . . . . . .    EC ADDR  003EH     R   SEG=?PR?VTIMER2ISR?PORT
?C0010. . . . . . . . . . . . . . . . .    EC ADDR  0047H     R   SEG=?PR?VTIMER2ISR?PORT
?C?ADDXBP . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?CSTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?IILDX. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ISTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?PSTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ULSHR. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XBPOFF . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XDATASEG . . . . . . . . . . . . . .    N  NUMB  -------       EXT
?C_XBP. . . . . . . . . . . . . . . . .    D  ADDR  -------       EXT
?DT?PORT. . . . . . . . . . . . . . . .    D  SEG   000001H       REL=UNIT, ALN=BYTE
?PR?_?OSINTCTXSW?PORT . . . . . . . . .    EC SEG   000017H       REL=INSEG, ALN=BYTE
?PR?_?PXPORTINITIALISESTACK?PORT. . . .    EC SEG   0002C7H       REL=INSEG, ALN=BYTE
?PR?_?SPORTSTARTSCHEDULER?PORT. . . . .    EC SEG   000040H       REL=INSEG, ALN=BYTE
?PR?_?VINTPORTCONTEXTSWITCH?PORT. . . .    EC SEG   000024H       REL=INSEG, ALN=BYTE
?PR?_?VPORTCONTEXTSWITCH?PORT . . . . .    EC SEG   000010H       REL=INSEG, ALN=BYTE
?PR?_?VPORTENDSCHEDULER?PORT. . . . . .    EC SEG   000001H       REL=INSEG, ALN=BYTE
?PR?PRVSETUPTIMERINTERRUPT?PORT . . . .    EC SEG   00001DH       REL=INSEG, ALN=BYTE
?PR?VTIMER2ISR?PORT . . . . . . . . . .    EC SEG   00007BH       REL=INSEG, ALN=BYTE
?PRVSETUPTIMERINTERRUPT?BYTE. . . . . .    X  ADDR  0000H     R   SEG=?XD?PRVSETUPTIMERINTERRUPT?PORT
?VTIMER2ISR?BYTE. . . . . . . . . . . .    X  ADDR  0000H     R   SEG=?XD?VTIMER2ISR?PORT
?XD?PRVSETUPTIMERINTERRUPT?PORT . . . .    X  SEG   000002H       REL=UNIT, ALN=BYTE
?XD?VTIMER2ISR?PORT . . . . . . . . . .    X  SEG   000001H       REL=UNIT, ALN=BYTE
_?KCOSCTXSW . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?LOADCTX . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?OSINTCTXSW. . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?OSINTCTXSW?PORT
_?PRVGETCURRENTTCB_XBP. . . . . . . . .    C  ADDR  -------       EXT
_?PRVSETCURRENTTCB_XBP. . . . . . . . .    C  ADDR  -------       EXT
_?PXPORTINITIALISESTACK . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PXPORTINITIALISESTACK?PORT
_?SPORTSTARTSCHEDULER . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?SPORTSTARTSCHEDULER?PORT
_?VINTPORTCONTEXTSWITCH . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VINTPORTCONTEXTSWITCH?PORT
_?VPORTCONTEXTSWITCH. . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VPORTCONTEXTSWITCH?PORT
_?VPORTENDSCHEDULER . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VPORTENDSCHEDULER?PORT
_?VTASKINCREMENTTICK. . . . . . . . . .    C  ADDR  -------       EXT
_?VTASKSWITCHCONTEXT. . . . . . . . . .    C  ADDR  -------       EXT
_DMA_WRITEREG . . . . . . . . . . . . .    C  ADDR  -------       EXT
AC. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.6   A   
ACC . . . . . . . . . . . . . . . . . .    D  ADDR  00E0H     A   
ACON. . . . . . . . . . . . . . . . . .    D  ADDR  009DH     A   
AR0 . . . . . . . . . . . . . . . . . .    D  ADDR  0000H     A   
AR1 . . . . . . . . . . . . . . . . . .    D  ADDR  0001H     A   
AR2 . . . . . . . . . . . . . . . . . .    D  ADDR  0002H     A   
AR3 . . . . . . . . . . . . . . . . . .    D  ADDR  0003H     A   
AR4 . . . . . . . . . . . . . . . . . .    D  ADDR  0004H     A   
AR5 . . . . . . . . . . . . . . . . . .    D  ADDR  0005H     A   
AR6 . . . . . . . . . . . . . . . . . .    D  ADDR  0006H     A   
AR7 . . . . . . . . . . . . . . . . . .    D  ADDR  0007H     A   
ARCON . . . . . . . . . . . . . . . . .    D  ADDR  00FFH     A   
B . . . . . . . . . . . . . . . . . . .    D  ADDR  00F0H     A   
CANCIR. . . . . . . . . . . . . . . . .    D  ADDR  00DEH     A   
CANDR . . . . . . . . . . . . . . . . .    D  ADDR  00DFH     A   
CCAPH0. . . . . . . . . . . . . . . . .    D  ADDR  00B9H     A   
CCAPH1. . . . . . . . . . . . . . . . .    D  ADDR  00BAH     A   
CCAPH2. . . . . . . . . . . . . . . . .    D  ADDR  00BBH     A   
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    22

CCAPH3. . . . . . . . . . . . . . . . .    D  ADDR  00BCH     A   
CCAPH4. . . . . . . . . . . . . . . . .    D  ADDR  00BDH     A   
CCAPL0. . . . . . . . . . . . . . . . .    D  ADDR  00B1H     A   
CCAPL1. . . . . . . . . . . . . . . . .    D  ADDR  00B2H     A   
CCAPL2. . . . . . . . . . . . . . . . .    D  ADDR  00B3H     A   
CCAPL3. . . . . . . . . . . . . . . . .    D  ADDR  00B4H     A   
CCAPL4. . . . . . . . . . . . . . . . .    D  ADDR  00B5H     A   
CCAPM0. . . . . . . . . . . . . . . . .    D  ADDR  00D1H     A   
CCAPM1. . . . . . . . . . . . . . . . .    D  ADDR  00D2H     A   
CCAPM2. . . . . . . . . . . . . . . . .    D  ADDR  00D3H     A   
CCAPM3. . . . . . . . . . . . . . . . .    D  ADDR  00D4H     A   
CCAPM4. . . . . . . . . . . . . . . . .    D  ADDR  00D5H     A   
CCON. . . . . . . . . . . . . . . . . .    D  ADDR  00C3H     A   
CH. . . . . . . . . . . . . . . . . . .    D  ADDR  00C5H     A   
CKCON . . . . . . . . . . . . . . . . .    D  ADDR  008EH     A   
CL. . . . . . . . . . . . . . . . . . .    D  ADDR  00C4H     A   
CMOD. . . . . . . . . . . . . . . . . .    D  ADDR  00C2H     A   
CPRL2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CSREPR. . . . . . . . . . . . . . . . .    D  ADDR  008FH     A   
CT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CY. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.7   A   
DBAR. . . . . . . . . . . . . . . . . .    D  ADDR  009AH     A   
DCIR. . . . . . . . . . . . . . . . . .    D  ADDR  009BH     A   
DDR . . . . . . . . . . . . . . . . . .    D  ADDR  009CH     A   
DMAHR . . . . . . . . . . . . . . . . .    D  ADDR  00ADH     A   
DMALR . . . . . . . . . . . . . . . . .    D  ADDR  00ABH     A   
DMAMR . . . . . . . . . . . . . . . . .    D  ADDR  00ACH     A   
DPH . . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH0. . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH1. . . . . . . . . . . . . . . . . .    D  ADDR  0085H     A   
DPL . . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL0. . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL1. . . . . . . . . . . . . . . . . .    D  ADDR  0084H     A   
DPS . . . . . . . . . . . . . . . . . .    D  ADDR  0086H     A   
DPX . . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX0. . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX1. . . . . . . . . . . . . . . . . .    D  ADDR  0095H     A   
EA. . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.7   A   
EIE . . . . . . . . . . . . . . . . . .    D  ADDR  00E8H     A   
EIF . . . . . . . . . . . . . . . . . .    D  ADDR  0091H     A   
EINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.0   A   
EINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.1   A   
EINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.2   A   
EINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.3   A   
EINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.4   A   
EIP . . . . . . . . . . . . . . . . . .    D  ADDR  00F8H     A   
EPCR. . . . . . . . . . . . . . . . . .    D  ADDR  00BEH     A   
EPDR. . . . . . . . . . . . . . . . . .    D  ADDR  00BFH     A   
ES0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.4   A   
ES1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.6   A   
ET0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.1   A   
ET1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.3   A   
ET2 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.5   A   
EWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.5   A   
EWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.1   A   
EX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.0   A   
EX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.2   A   
EXEN2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.3   A   
EXF2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.6   A   
F0. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.5   A   
F1. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.1   A   
I2CCIR. . . . . . . . . . . . . . . . .    D  ADDR  0096H     A   
I2CDR . . . . . . . . . . . . . . . . .    D  ADDR  0097H     A   
IE. . . . . . . . . . . . . . . . . . .    D  ADDR  00A8H     A   
IE0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.1   A   
IE1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.3   A   
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    23

INT0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
INT1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
IP. . . . . . . . . . . . . . . . . . .    D  ADDR  00B8H     A   
ISR?640 . . . . . . . . . . . . . . . .    X  ADDR  0000H     R   SEG=?XD?VTIMER2ISR?PORT
IT0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.0   A   
IT1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.2   A   
LCR . . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LDAHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
LDALR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
LDCSR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
LDHR. . . . . . . . . . . . . . . . . .    D  ADDR  00AAH     A   
LDLR. . . . . . . . . . . . . . . . . .    D  ADDR  00A9H     A   
LMSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSAIER. . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSCR. . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LSR . . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
LSSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
MCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00B6H     A   
MD0 . . . . . . . . . . . . . . . . . .    D  ADDR  00F9H     A   
MD1 . . . . . . . . . . . . . . . . . .    D  ADDR  00FAH     A   
MD2 . . . . . . . . . . . . . . . . . .    D  ADDR  00FBH     A   
MD3 . . . . . . . . . . . . . . . . . .    D  ADDR  00FCH     A   
MD4 . . . . . . . . . . . . . . . . . .    D  ADDR  00FDH     A   
MD5 . . . . . . . . . . . . . . . . . .    D  ADDR  00FEH     A   
MDR . . . . . . . . . . . . . . . . . .    D  ADDR  00B7H     A   
MXAX. . . . . . . . . . . . . . . . . .    D  ADDR  00EAH     A   
OV. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.2   A   
OWCIR . . . . . . . . . . . . . . . . .    D  ADDR  00D6H     A   
OWDR. . . . . . . . . . . . . . . . . .    D  ADDR  00D7H     A   
P . . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.0   A   
P0. . . . . . . . . . . . . . . . . . .    D  ADDR  0080H     A   
P0_0. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
P0_1. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
P0_2. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
P0_3. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
P0_4. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
P0_5. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
P0_6. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
P0_7. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
P1. . . . . . . . . . . . . . . . . . .    D  ADDR  0090H     A   
P1_0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
P1_1. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
P1_2. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
P1_3. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.3   A   
P1_4. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.4   A   
P1_5. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.5   A   
P1_6. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.6   A   
P1_7. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.7   A   
P2. . . . . . . . . . . . . . . . . . .    D  ADDR  00A0H     A   
P2_0. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.0   A   
P2_1. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.1   A   
P2_2. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.2   A   
P2_3. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.3   A   
P2_4. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.4   A   
P2_5. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.5   A   
P2_6. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
P2_7. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.7   A   
P3. . . . . . . . . . . . . . . . . . .    D  ADDR  00B0H     A   
P3_0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
P3_1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
P3_2. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
P3_3. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
P3_4. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
P3_5. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
P3_6. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
P3_7. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    24

PCON. . . . . . . . . . . . . . . . . .    D  ADDR  0087H     A   
PINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.0   A   
PINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.1   A   
PINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.2   A   
PINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.3   A   
PINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.4   A   
PISSR1. . . . . . . . . . . . . . . . .    D  ADDR  009EH     A   
PISSR2. . . . . . . . . . . . . . . . .    D  ADDR  009FH     A   
PORT. . . . . . . . . . . . . . . . . .    -- ----  -------       
PRVSETUPTIMERINTERRUPT. . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?PRVSETUPTIMERINTERRUPT?PORT
PS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.4   A   
PS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.6   A   
PSW . . . . . . . . . . . . . . . . . .    D  ADDR  00D0H     A   
PT0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.1   A   
PT1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.3   A   
PT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.5   A   
PWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.5   A   
PX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.0   A   
PX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.2   A   
RB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.2   A   
RB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.2   A   
RCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.5   A   
RD. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
REN0. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.4   A   
REN1. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.4   A   
RI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.0   A   
RI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.0   A   
RLDH. . . . . . . . . . . . . . . . . .    D  ADDR  00CBH     A   
RLDL. . . . . . . . . . . . . . . . . .    D  ADDR  00CAH     A   
RS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.3   A   
RS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.4   A   
RS485_2_EN. . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
RWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.0   A   
RXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
SAVESP. . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?PORT
SBUF0 . . . . . . . . . . . . . . . . .    D  ADDR  0099H     A   
SBUF1 . . . . . . . . . . . . . . . . .    D  ADDR  00C1H     A   
SCON0 . . . . . . . . . . . . . . . . .    D  ADDR  0098H     A   
SCON1 . . . . . . . . . . . . . . . . .    D  ADDR  00C0H     A   
SDSTSR. . . . . . . . . . . . . . . . .    D  ADDR  0094H     A   
SM00. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.7   A   
SM01. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.6   A   
SM02. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.5   A   
SM10. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.7   A   
SM11. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.6   A   
SM12. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.5   A   
SP. . . . . . . . . . . . . . . . . . .    D  ADDR  0081H     A   
SPICIR. . . . . . . . . . . . . . . . .    D  ADDR  00CEH     A   
SPIDR . . . . . . . . . . . . . . . . .    D  ADDR  00CFH     A   
STACK_START . . . . . . . . . . . . . .    I  ADDR  -------       EXT
STATUS. . . . . . . . . . . . . . . . .    D  ADDR  00E9H     A   
T0. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
T1. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
T2CON . . . . . . . . . . . . . . . . .    D  ADDR  00C8H     A   
T2IF. . . . . . . . . . . . . . . . . .    D  ADDR  00C9H     A   
TA. . . . . . . . . . . . . . . . . . .    D  ADDR  00EBH     A   
TB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.3   A   
TB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.3   A   
TCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00AEH     A   
TCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.4   A   
TCON. . . . . . . . . . . . . . . . . .    D  ADDR  0088H     A   
TDR . . . . . . . . . . . . . . . . . .    D  ADDR  00AFH     A   
TEMP?741. . . . . . . . . . . . . . . .    X  ADDR  0000H     R   SEG=?XD?PRVSETUPTIMERINTERRUPT?PORT
TF0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.5   A   
TF1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.7   A   
TF2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.7   A   
AX51 MACRO ASSEMBLER  PORT                                                                  05/28/13 16:07:30 PAGE    25

TH0 . . . . . . . . . . . . . . . . . .    D  ADDR  008CH     A   
TH1 . . . . . . . . . . . . . . . . . .    D  ADDR  008DH     A   
TH2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CDH     A   
TI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.1   A   
TI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.1   A   
TICK_INT. . . . . . . . . . . . . . . .    D  ADDR  -------       EXT
TL0 . . . . . . . . . . . . . . . . . .    D  ADDR  008AH     A   
TL1 . . . . . . . . . . . . . . . . . .    D  ADDR  008BH     A   
TL2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CCH     A   
TMOD. . . . . . . . . . . . . . . . . .    D  ADDR  0089H     A   
TR0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.4   A   
TR1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.6   A   
TR2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.2   A   
TXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
UART1_TIMEOUT . . . . . . . . . . . . .    HD ADDR  -------       EXT
UART2_TIMEOUT . . . . . . . . . . . . .    HD ADDR  -------       EXT
UR2_DLH . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_DLL . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
UR2_FCR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_IER . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_IIR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_LCR . . . . . . . . . . . . . . . .    D  ADDR  00E4H     A   
UR2_LSR . . . . . . . . . . . . . . . .    D  ADDR  00E6H     A   
UR2_MCR . . . . . . . . . . . . . . . .    D  ADDR  00E5H     A   
UR2_MSR . . . . . . . . . . . . . . . .    D  ADDR  00E7H     A   
UR2_RBR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
UR2_THR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
USB_TIMEOUT . . . . . . . . . . . . . .    HD ADDR  -------       EXT
VTIMER2ISR. . . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?VTIMER2ISR?PORT
WDCON . . . . . . . . . . . . . . . . .    D  ADDR  00D8H     A   
WDIF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.3   A   
WR. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
WTRF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.2   A   
WTST. . . . . . . . . . . . . . . . . .    D  ADDR  0092H     A   
XMRHR . . . . . . . . . . . . . . . . .    D  ADDR  00A7H     A   
XMRLR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
XMWHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
XMWLR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).

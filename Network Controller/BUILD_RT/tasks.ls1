AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE     1


MACRO ASSEMBLER AX51 V3.07c
OBJECT MODULE PLACED IN .\tasks.OBJ
ASSEMBLER INVOKED BY: E:\Keil_4_9.06\C51\BIN\AX51.EXE .\tasks.src PR(.\tasks.ls1) EP DEBUG MOD_CONT

LOC    OBJ             LINE     SOURCE

                          1     ; .\tasks.SRC generated from: ..\src\FreeRtossource\tasks.c
                          2     ; COMPILER INVOKED BY:
                          3     ;        E:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\FreeRtossource\tasks.c LARGE OMF2 ROM(D16
                               M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\msti
                               mer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;..\SRC\debug\;..\SRC\dhcp\;..\S
                               RC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\
                               buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOS
                               Source\portable\Keil\AX11000\;..\Src\FreeRTOSSource\include\;..\Src\schedule\;..\src\bacn
                               et;..\src\include;..\src\LCD;..\src\version;..\src\modbusTCP;..\src\gs2e;..\src\adpter1;.
                               .\src\scan;..\src\gsm;..\src\dyndns) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\tasks.lst) SRC(.\tasks.SRC)
                          4     
                          5     $mod_cont 
                          6     $nomod51 
                          7     
                          8     NAME    TASKS
                          9     
 0098.3                  10     TB08    BIT     098H.3
 00C0.3                  11     TB18    BIT     0C0H.3
 0080                    12     P0      DATA    080H
 0098.7                  13     SM00    BIT     098H.7
 0090                    14     P1      DATA    090H
 00C0.7                  15     SM10    BIT     0C0H.7
 0098.6                  16     SM01    BIT     098H.6
 00A0                    17     P2      DATA    0A0H
 00C0.6                  18     SM11    BIT     0C0H.6
 0098.5                  19     SM02    BIT     098H.5
 00B0                    20     P3      DATA    0B0H
 00D0.6                  21     AC      BIT     0D0H.6
 00C0.5                  22     SM12    BIT     0C0H.5
 00B0.4                  23     T0      BIT     0B0H.4
 00CF                    24     SPIDR   DATA    0CFH
 00B0.5                  25     T1      BIT     0B0H.5
 00A8.7                  26     EA      BIT     0A8H.7
 00D6                    27     OWCIR   DATA    0D6H
 00C5                    28     CH      DATA    0C5H
 0083                    29     DPH0    DATA    083H
 00A8                    30     IE      DATA    0A8H
 0085                    31     DPH1    DATA    085H
 00C4                    32     CL      DATA    0C4H
 0080.0                  33     P0_0    BIT     080H.0
 0090.0                  34     P1_0    BIT     090H.0
 0080.1                  35     P0_1    BIT     080H.1
 00B9                    36     CCAPH0  DATA    0B9H
 0082                    37     DPL0    DATA    082H
 00A0.0                  38     P2_0    BIT     0A0H.0
 0090.1                  39     P1_1    BIT     090H.1
 0080.2                  40     P0_2    BIT     080H.2
 00BA                    41     CCAPH1  DATA    0BAH
 0084                    42     DPL1    DATA    084H
 00B0.0                  43     P3_0    BIT     0B0H.0
 00A0.1                  44     P2_1    BIT     0A0H.1
 0090.2                  45     P1_2    BIT     090H.2
 0080.3                  46     P0_3    BIT     080H.3
 00E2                    47     UR2_DLH DATA    0E2H
 00BB                    48     CCAPH2  DATA    0BBH
 00A7                    49     XMRHR   DATA    0A7H
 00B0.1                  50     P3_1    BIT     0B0H.1
 00A0.2                  51     P2_2    BIT     0A0H.2
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE     2

 0090.3                  52     P1_3    BIT     090H.3
 0080.4                  53     P0_4    BIT     080H.4
 00BC                    54     CCAPH3  DATA    0BCH
 00B0.2                  55     P3_2    BIT     0B0H.2
 00A0.3                  56     P2_3    BIT     0A0H.3
 0090.4                  57     P1_4    BIT     090H.4
 0080.5                  58     P0_5    BIT     080H.5
 00EB                    59     TA      DATA    0EBH
 00BD                    60     CCAPH4  DATA    0BDH
 00B1                    61     CCAPL0  DATA    0B1H
 00C8.6                  62     EXF2    BIT     0C8H.6
 00B0.7                  63     RD      BIT     0B0H.7
 00B0.3                  64     P3_3    BIT     0B0H.3
 00A0.4                  65     P2_4    BIT     0A0H.4
 0098.4                  66     REN0    BIT     098H.4
 0090.5                  67     P1_5    BIT     090H.5
 0080.6                  68     P0_6    BIT     080H.6
 00E3                    69     UR2_FCR DATA    0E3H
 00D1                    70     CCAPM0  DATA    0D1H
 00C9                    71     T2IF    DATA    0C9H
 00B2                    72     CCAPL1  DATA    0B2H
 00C0.4                  73     REN1    BIT     0C0H.4
 00B0.4                  74     P3_4    BIT     0B0H.4
 00A0.5                  75     P2_5    BIT     0A0H.5
 0090.6                  76     P1_6    BIT     090H.6
 0080.7                  77     P0_7    BIT     080H.7
 00E1                    78     UR2_DLL DATA    0E1H
 00D2                    79     CCAPM1  DATA    0D2H
 00B3                    80     CCAPL2  DATA    0B3H
 00A6                    81     XMRLR   DATA    0A6H
 00B0.5                  82     P3_5    BIT     0B0H.5
 00A0.6                  83     P2_6    BIT     0A0H.6
 0090.7                  84     P1_7    BIT     090H.7
 00D3                    85     CCAPM2  DATA    0D3H
 00B4                    86     CCAPL3  DATA    0B4H
 00A5                    87     XMWHR   DATA    0A5H
 00B0.6                  88     P3_6    BIT     0B0H.6
 00A0.7                  89     P2_7    BIT     0A0H.7
 00D4                    90     CCAPM3  DATA    0D4H
 00B8                    91     IP      DATA    0B8H
 00B5                    92     CCAPL4  DATA    0B5H
 00B0.7                  93     P3_7    BIT     0B0H.7
 00D5                    94     CCAPM4  DATA    0D5H
 009A                    95     DBAR    DATA    09AH
 00E2                    96     UR2_IER DATA    0E2H
 00D0.7                  97     CY      BIT     0D0H.7
 00B0.2                  98     INT0    BIT     0B0H.2
 00E4                    99     UR2_LCR DATA    0E4H
 00A4                   100     XMWLR   DATA    0A4H
 00B0.3                 101     INT1    BIT     0B0H.3
 00E5                   102     UR2_MCR DATA    0E5H
 0093                   103     DPX0    DATA    093H
 0096                   104     I2CCIR  DATA    096H
 0095                   105     DPX1    DATA    095H
 00E3                   106     UR2_IIR DATA    0E3H
 00E1                   107     UR2_RBR DATA    0E1H
 009D                   108     ACON    DATA    09DH
 009B                   109     DCIR    DATA    09BH
 0081                   110     SP      DATA    081H
 00C3                   111     CCON    DATA    0C3H
 00C2                   112     CMOD    DATA    0C2H
 00D0.2                 113     OV      BIT     0D0H.2
 00B0.6                 114     WR      BIT     0B0H.6
 00E1                   115     UR2_THR DATA    0E1H
 00E8.5                 116     EWDI    BIT     0E8H.5
 00D8.3                 117     WDIF    BIT     0D8H.3
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE     3

 00CB                   118     RLDH    DATA    0CBH
 00BE                   119     EPCR    DATA    0BEH
 00AA                   120     LDHR    DATA    0AAH
 00E6                   121     UR2_LSR DATA    0E6H
 00BF                   122     EPDR    DATA    0BFH
 00B6                   123     MCIR    DATA    0B6H
 00C8.5                 124     RCLK    BIT     0C8H.5
 00E7                   125     UR2_MSR DATA    0E7H
 00C8.4                 126     TCLK    BIT     0C8H.4
 00CA                   127     RLDL    DATA    0CAH
 00A9                   128     LDLR    DATA    0A9H
 0087                   129     PCON    DATA    087H
 00DE                   130     CANCIR  DATA    0DEH
 00AE                   131     TCIR    DATA    0AEH
 00F8.5                 132     PWDI    BIT     0F8H.5
 00A2                   133     LSCR    DATA    0A2H
 0089                   134     TMOD    DATA    089H
 0088                   135     TCON    DATA    088H
 00D7                   136     OWDR    DATA    0D7H
 0088.1                 137     IE0     BIT     088H.1
 0088.3                 138     IE1     BIT     088H.3
 00EA                   139     MXAX    DATA    0EAH
 00A1                   140     LMSR    DATA    0A1H
 00F9                   141     MD0     DATA    0F9H
 00F0                   142     B       DATA    0F0H
 00FA                   143     MD1     DATA    0FAH
 00A1                   144     LSAIER  DATA    0A1H
 00FB                   145     MD2     DATA    0FBH
 00D8.2                 146     WTRF    BIT     0D8H.2
 00FC                   147     MD3     DATA    0FCH
 009E                   148     PISSR1  DATA    09EH
 00FD                   149     MD4     DATA    0FDH
 00A3                   150     LSSR    DATA    0A3H
 009F                   151     PISSR2  DATA    09FH
 00FE                   152     MD5     DATA    0FEH
 00E0                   153     ACC     DATA    0E0H
 00A8.4                 154     ES0     BIT     0A8H.4
 00C8.1                 155     CT2     BIT     0C8H.1
 00A8.6                 156     ES1     BIT     0A8H.6
 00A8.1                 157     ET0     BIT     0A8H.1
 00A8.3                 158     ET1     BIT     0A8H.3
 0088.5                 159     TF0     BIT     088H.5
 00A8.5                 160     ET2     BIT     0A8H.5
 0098.0                 161     RI0     BIT     098H.0
 0088.7                 162     TF1     BIT     088H.7
 00C8.7                 163     TF2     BIT     0C8H.7
 00C0.0                 164     RI1     BIT     0C0H.0
 00CE                   165     SPICIR  DATA    0CEH
 008C                   166     TH0     DATA    08CH
 00A8.0                 167     EX0     BIT     0A8H.0
 0098.1                 168     TI0     BIT     098H.1
 0088.0                 169     IT0     BIT     088H.0
 008D                   170     TH1     DATA    08DH
 00C0.1                 171     TI1     BIT     0C0H.1
 00A8.2                 172     EX1     BIT     0A8H.2
 0088.2                 173     IT1     BIT     088H.2
 00CD                   174     TH2     DATA    0CDH
 00D0.0                 175     P       BIT     0D0H.0
 008A                   176     TL0     DATA    08AH
 008F                   177     CSREPR  DATA    08FH
 008B                   178     TL1     DATA    08BH
 00CC                   179     TL2     DATA    0CCH
 00B8.4                 180     PS0     BIT     0B8H.4
 00E8                   181     EIE     DATA    0E8H
 0092                   182     WTST    DATA    092H
 00B8.6                 183     PS1     BIT     0B8H.6
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE     4

 00B8.1                 184     PT0     BIT     0B8H.1
 0091                   185     EIF     DATA    091H
 00D0.3                 186     RS0     BIT     0D0H.3
 00B8.3                 187     PT1     BIT     0B8H.3
 0097                   188     I2CDR   DATA    097H
 00D0.4                 189     RS1     BIT     0D0H.4
 00B8.5                 190     PT2     BIT     0B8H.5
 0088.4                 191     TR0     BIT     088H.4
 0088.6                 192     TR1     BIT     088H.6
 00C8.2                 193     TR2     BIT     0C8H.2
 00B8.0                 194     PX0     BIT     0B8H.0
 00B8.2                 195     PX1     BIT     0B8H.2
 009C                   196     DDR     DATA    09CH
 0083                   197     DPH     DATA    083H
 00F8                   198     EIP     DATA    0F8H
 0082                   199     DPL     DATA    082H
 00A2                   200     LCR     DATA    0A2H
 0099                   201     SBUF0   DATA    099H
 00C1                   202     SBUF1   DATA    0C1H
 00E8.0                 203     EINT2   BIT     0E8H.0
 00C8.3                 204     EXEN2   BIT     0C8H.3
 00B7                   205     MDR     DATA    0B7H
 00E8.1                 206     EINT3   BIT     0E8H.1
 00C8.0                 207     CPRL2   BIT     0C8H.0
 0098                   208     SCON0   DATA    098H
 00E8.2                 209     EINT4   BIT     0E8H.2
 00C0                   210     SCON1   DATA    0C0H
 0094                   211     SDSTSR  DATA    094H
 00E8.3                 212     EINT5   BIT     0E8H.3
 00E9                   213     STATUS  DATA    0E9H
 00E8.4                 214     EINT6   BIT     0E8H.4
 00C8                   215     T2CON   DATA    0C8H
 0086                   216     DPS     DATA    086H
 00DF                   217     CANDR   DATA    0DFH
 00AF                   218     TDR     DATA    0AFH
 00A5                   219     LDAHR   DATA    0A5H
 0093                   220     DPX     DATA    093H
 00AD                   221     DMAHR   DATA    0ADH
 00F8.0                 222     PINT2   BIT     0F8H.0
 00B0.0                 223     RXD     BIT     0B0H.0
 00F8.1                 224     PINT3   BIT     0F8H.1
 008E                   225     CKCON   DATA    08EH
 00F8.2                 226     PINT4   BIT     0F8H.2
 00D8.1                 227     EWT     BIT     0D8H.1
 00B0.1                 228     TXD     BIT     0B0H.1
 00A4                   229     LDALR   DATA    0A4H
 00F8.3                 230     PINT5   BIT     0F8H.3
 00AB                   231     DMALR   DATA    0ABH
 00A3                   232     LSR     DATA    0A3H
 00F8.4                 233     PINT6   BIT     0F8H.4
 00AC                   234     DMAMR   DATA    0ACH
 00FF                   235     ARCON   DATA    0FFH
 00D0.5                 236     F0      BIT     0D0H.5
 00D0.1                 237     F1      BIT     0D0H.1
 00A6                   238     LDCSR   DATA    0A6H
 00D0                   239     PSW     DATA    0D0H
 0098.2                 240     RB08    BIT     098H.2
 00D8                   241     WDCON   DATA    0D8H
 00D8.0                 242     RWT     BIT     0D8H.0
 00C0.2                 243     RB18    BIT     0C0H.2
------                  244     ?PR?_?sTaskCreate?TASKS                  SEGMENT ECODE INSEG 
------                  245     ?XD?TASKS            SEGMENT XDATA 
------                  246     ?PR?_?vTaskDelayUntil?TASKS              SEGMENT ECODE INSEG 
------                  247     ?PR?_?vTaskDelay?TASKS                   SEGMENT ECODE INSEG 
------                  248     ?PR?_?vTaskSuspend?TASKS                 SEGMENT ECODE INSEG 
------                  249     ?PR?_?vTaskResume?TASKS                  SEGMENT ECODE INSEG 
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE     5

------                  250     ?PR?_?vTaskStartScheduler?TASKS          SEGMENT ECODE INSEG 
------                  251     ?PR?_?vTaskEndScheduler?TASKS            SEGMENT ECODE INSEG 
------                  252     ?PR?_?vTaskSuspendAll?TASKS              SEGMENT ECODE INSEG 
------                  253     ?PR?_?cTaskResumeAll?TASKS               SEGMENT ECODE INSEG 
------                  254     ?PR?_?xTaskGetTickCount?TASKS            SEGMENT ECODE INSEG 
------                  255     ?PR?_?usTaskGetNumberOfTasks?TASKS       SEGMENT ECODE INSEG 
------                  256     ?PR?_?vTaskIncrementTick?TASKS           SEGMENT ECODE INSEG 
------                  257     ?PR?_?vTaskSwitchContext?TASKS           SEGMENT ECODE INSEG 
------                  258     ?PR?_?vTaskPlaceOnEventList?TASKS        SEGMENT ECODE INSEG 
------                  259     ?PR?_?cTaskRemoveFromEventList?TASKS     SEGMENT ECODE INSEG 
------                  260     ?PR?_?prvIdleTask?TASKS                  SEGMENT ECODE INSEG 
------                  261     ?PR?_?prvInitialiseTCBVariables?TASKS    SEGMENT ECODE INSEG 
------                  262     ?PR?_?prvInitialiseTaskLists?TASKS       SEGMENT ECODE INSEG 
------                  263     ?PR?_?prvCheckTasksWaitingTermination?TASKS SEGMENT ECODE INSEG 
------                  264     ?PR?_?prvAllocateTCBAndStack?TASKS       SEGMENT ECODE INSEG 
------                  265     ?PR?_?prvGetCurrentTCB_XBP?TASKS         SEGMENT ECODE INSEG 
------                  266     ?PR?_?prvSetCurrentTCB_XBP?TASKS         SEGMENT ECODE INSEG 
------                  267     ?CO?TASKS            SEGMENT CODE 
------                  268     ?C_INITSEG           SEGMENT CODE 
                        269             EXTRN   CODE (_?vListRemove)
                        270             EXTRN   DATA (C_XBP)
                        271             EXTRN   CODE (_?vListInsert)
                        272             EXTRN   CODE (_strncpy)
                        273             EXTRN   XDATA (?_strncpy?BYTE)
                        274             EXTRN   CODE (_?vPortYield)
                        275             EXTRN   CODE (_strlen)
                        276             EXTRN   CODE (_?pxPortInitialiseStack)
                        277             EXTRN   CODE (_?vPortFree)
                        278             EXTRN   CODE (_?vListInsertEnd)
                        279             EXTRN   CODE (_?vListInitialise)
                        280             EXTRN   CODE (_?vListInitialiseItem)
                        281             EXTRN   CODE (_?sPortStartScheduler)
                        282             EXTRN   CODE (_?vPortEndScheduler)
                        283             EXTRN   IDATA (STACK_START)
                        284             EXTRN   CODE (_?pvPortMalloc)
                        285             EXTRN   CODE (?C?ADDXBP)
                        286             EXTRN   CODE (?C?XBPOFF)
                        287             EXTRN   DATA (?C_XBP)
                        288             EXTRN   NUMBER (?C?XDATASEG)
                        289             EXTRN   CODE (?C?ILDPTR)
                        290             EXTRN   CODE (?C?LSTXDATA)
                        291             EXTRN   CODE (?C?PLDPTR)
                        292             EXTRN   CODE (?C?PSTPTR)
                        293             EXTRN   CODE (?C?CLDPTR)
                        294             EXTRN   CODE (?C?CSTPTR)
                        295             EXTRN   CODE (?C?LSTPTR)
                        296             EXTRN   CODE (?C?LLDPTR)
                        297             EXTRN   CODE (?C?ULCMP)
                        298             EXTRN   CODE (?C?ISTPTR)
                        299             EXTRN   CODE (?C?STRCPY)
                        300             EXTRN   CODE (?C?MEMSET)
                        301             EXTRN   NUMBER (?C?XDATAMTYPE)
                        302             PUBLIC  pxCurrentTCB
                        303             PUBLIC  xTickCount
                        304             PUBLIC  pxReadyTasksLists
                        305             PUBLIC  _?prvSetCurrentTCB_XBP
                        306             PUBLIC  _?prvGetCurrentTCB_XBP
                        307             PUBLIC  _?cTaskRemoveFromEventList
                        308             PUBLIC  _?vTaskPlaceOnEventList
                        309             PUBLIC  _?vTaskSwitchContext
                        310             PUBLIC  _?vTaskIncrementTick
                        311             PUBLIC  _?usTaskGetNumberOfTasks
                        312             PUBLIC  _?xTaskGetTickCount
                        313             PUBLIC  _?cTaskResumeAll
                        314             PUBLIC  _?vTaskSuspendAll
                        315             PUBLIC  _?vTaskEndScheduler
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE     6

                        316             PUBLIC  _?vTaskStartScheduler
                        317             PUBLIC  _?vTaskResume
                        318             PUBLIC  _?vTaskSuspend
                        319             PUBLIC  _?vTaskDelay
                        320             PUBLIC  _?vTaskDelayUntil
                        321             PUBLIC  _?sTaskCreate
                        322     
------                  323             RSEG  ?XD?TASKS
000000                  324        ucTaskNumber:   DS   1
000001                  325     pxReadyTasksLists:   DS   360
000169                  326     usCurrentNumberOfTasks:   DS   2
00016B                  327     ucTopUsedPriority:   DS   1
00016C                  328          xTickCount:   DS   4
000170                  329     xDelayedTaskList1:   DS   24
000188                  330     xDelayedTaskList2:   DS   24
0001A0                  331     sUsingPreemption:   DS   2
0001A2                  332        pxCurrentTCB:   DS   3
0001A5                  333     ucSchedulerSuspended:   DS   1
0001A6                  334     pxOverflowDelayedTaskList:   DS   3
0001A9                  335       ucMissedTicks:   DS   1
0001AA                  336     xPendingReadyList:   DS   24
0001C2                  337     pxDelayedTaskList:   DS   3
0001C5                  338     xSuspendedTaskList:   DS   24
0001DD                  339     cSchedulerRunning:   DS   1
0001DE                  340     ucTopReadyPriority:   DS   1
                        341     
------                  342             RSEG  ?CO?TASKS
000000                  343     ?SC_0:
000000 49444C45         344             DB  'I' ,'D' ,'L' ,'E' ,000H
000004 00                       
                        345     
                        346     
------                  347             RSEG ?C_INITSEG
                        348     
------                  349             RSEG  ?C_INITSEG
000000 43               350             DB      043H
000001 0000       F     351             DW      pxCurrentTCB
000003 000000           352             DB      000H,000H,000H  ; ptr3
                        353     
000006 42               354             DB      042H
000007 0000       F     355             DW      sUsingPreemption
000009 0000             356             DW      00000H
                        357     
00000B 42               358             DB      042H
00000C 0000       F     359             DW      usCurrentNumberOfTasks
00000E 0000             360             DW      00000H
                        361     
000010 44               362             DB      044H
000011 0000       F     363             DW      xTickCount
000013 00000000         364             DB      000H,000H,000H,000H     ; long
                        365     
000017 41               366             DB      041H
000018 0000       F     367             DW      ucTopUsedPriority
00001A 00               368             DB      000H
                        369     
00001B 41               370             DB      041H
00001C 0000       F     371             DW      ucTopReadyPriority
00001E 00               372             DB      000H
                        373     
00001F 41               374             DB      041H
000020 0000       F     375             DW      cSchedulerRunning
000022 00               376             DB      000H
                        377     
000023 41               378             DB      041H
000024 0000       F     379             DW      ucSchedulerSuspended
000026 00               380             DB      000H
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE     7

                        381     
000027 41               382             DB      041H
000028 0000       F     383             DW      ucMissedTicks
00002A 00               384             DB      000H
                        385     
00002B 41               386             DB      041H
00002C 0000       F     387             DW      ucTaskNumber
00002E 00               388             DB      000H
                        389     
                        390     ; /*
                        391     ;       FreeRTOS V2.6.0 - Copyright (C) 2003 - 2005 Richard Barry.
                        392     ; 
                        393     ;       This file is part of the FreeRTOS distribution.
                        394     ; 
                        395     ;       FreeRTOS is free software; you can redistribute it and/or modify
                        396     ;       it under the terms of the GNU General Public License as published by
                        397     ;       the Free Software Foundation; either version 2 of the License, or
                        398     ;       (at your option) any later version.
                        399     ; 
                        400     ;       FreeRTOS is distributed in the hope that it will be useful,
                        401     ;       but WITHOUT ANY WARRANTY; without even the implied warranty of
                        402     ;       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        403     ;       GNU General Public License for more details.
                        404     ; 
                        405     ;       You should have received a copy of the GNU General Public License
                        406     ;       along with FreeRTOS; if not, write to the Free Software
                        407     ;       Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
                        408     ; 
                        409     ;       A special exception to the GPL can be applied should you wish to distribute
                        410     ;       a combined work that includes FreeRTOS, without being obliged to provide
                        411     ;       the source code for any proprietary components.  See the licensing section 
                        412     ;       of http://www.FreeRTOS.org for full details of how and when the exception
                        413     ;       can be applied.
                        414     ; 
                        415     ;       ***************************************************************************
                        416     ;       See http://www.FreeRTOS.org for documentation, latest information, license 
                        417     ;       and contact details.  Please ensure to read the configuration and relevant 
                        418     ;       port sections of the online documentation.
                        419     ;       ***************************************************************************
                        420     ; */
                        421     ; 
                        422     ; /*
                        423     ; Changes from V1.00:
                        424     ;       
                        425     ;       + Call to portRESTORE_CONTEXT has been removed.  The first context
                        426     ;         switch is now performed within sPortStartScheduler().
                        427     ; 
                        428     ; Changes from V1.01:
                        429     ; 
                        430     ;       + More use of 8bit data types.
                        431     ;       + Function name prefixes changed where the data type returned has changed.
                        432     ;       + USE_TRACE_FACILITY is no longer defined by default.
                        433     ; 
                        434     ; Changes from V1.2.0
                        435     ; 
                        436     ;       + Introduced ucTopReadyPriority.  This tracks the highest priority ready
                        437     ;         queue that contains a valid TCB and thus makes the context switch 
                        438     ;         slightly faster.
                        439     ; 
                        440     ;       + prvAddTaskToReadyQueue() has been made a macro.
                        441     ; 
                        442     ; Changes from V1.2.6
                        443     ; 
                        444     ;       + Added conditional compilation directives.
                        445     ;       + Extended API.
                        446     ;       + Rearranged function order.
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE     8

                        447     ;       + Creating a task now causes a context switch if the task being created
                        448     ;         has a higher priority than the calling task - assuming the kernel is
                        449     ;         running.
                        450     ;       + vTaskDelete() now only causes a context switch if the calling task is
                        451     ;         the task being deleted.
                        452     ; 
                        453     ; Changes from V2.0.0
                        454     ; 
                        455     ;       + Allow the type of the tick count to be 16 or 32 bits.
                        456     ;       + Introduce xPendingReadyList feature to allow the time interrupts have to
                        457     ;         be disabled to be minimised.
                        458     ;       + Remove the #if( INCLUDE_vTaskSuspendAll ) statements.  vTaskSuspendAll()
                        459     ;         is now always included as it is used by the scheduler itself.
                        460     ; 
                        461     ; Changes from V2.1.0
                        462     ; 
                        463     ;       + Bug fix - pxCurrentTCB is now initialised before the call to 
                        464     ;         prvInitialiseTaskLists().  Previously pxCurrentTCB could be accessed 
                        465     ;         while null.
                        466     ; 
                        467     ; Changed from V2.1.1
                        468     ; 
                        469     ;       + Change to where lStackSize is declared within sTaskCreate() to prevent
                        470     ;         compiler warnings with 8051 port.
                        471     ; 
                        472     ; Changes from V2.2.0
                        473     ; 
                        474     ;       + Explicit use of 'signed' qualifier on portCHAR types added.
                        475     ;       + Changed odd calculation of initial pxTopOfStack value when 
                        476     ;         portSTACK_GROWTH < 0.
                        477     ;       + Removed pcVersionNumber definition.
                        478     ; 
                        479     ; Changes from V2.5.3
                        480     ; 
                        481     ;       + cTaskResumeAll() modified to ensure it can be called prior to the task
                        482     ;         lists being initialised.
                        483     ; 
                        484     ; Changes from V2.5.5
                        485     ; 
                        486     ;       + Added API function vTaskDelayUntil().
                        487     ;       + Added INCLUDE_vTaskDelay conditional compilation.
                        488     ; */
                        489     ; 
                        490     ; #include <stdio.h>
                        491     ; #include <stdlib.h>
                        492     ; #include <string.h>
                        493     ; 
                        494     ; #include "projdefs.h"
                        495     ; #include "portable.h"
                        496     ; #include "task.h"
                        497     ; #include "errors.h"
                        498     ; extern INT8U xdata * data C_XBP;
                        499     ; /*
                        500     ;  * Macro to define the amount of stack available to the idle task.
                        501     ;  */
                        502     ; #define tskIDLE_STACK_SIZE    portMINIMAL_STACK_SIZE
                        503     ; 
                        504     ; /*
                        505     ;  * Task control block.  A task control block (TCB) is allocated to each task,
                        506     ;  * and stores the context of the task.
                        507     ;  */
                        508     ; typedef struct tskTaskControlBlock
                        509     ; {
                        510     ;       portSTACK_TYPE          *pxTopOfStack;                                          
                               /*< Points to the location of the last item placed on the tasks stack.  THIS MUST BE THE FIRST MEMBER OF THE STRUCT. */
                        511     ;       portSTACK_TYPE          *pxStack;                                               
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE     9

                                       /*< Points to the start of the stack. */
                        512     ;       unsigned portSHORT      usStackDepth;                                           
                               /*< Total depth of the stack (when empty).  This is defined as the number of variables th
                               e stack can hold, not the number of bytes. */
                        513     ;       signed portCHAR         pcTaskName[ tskMAX_TASK_NAME_LEN ];     /*< Descriptive 
                               name given to the task when created.  Facilitates debugging only. */
                        514     ;       unsigned portCHAR       ucPriority;                                             
                                       /*< The priority of the task where 0 is the lowest priority. */
                        515     ; 
                        516     ;       xListItem                       xGenericListItem;                               
                                       /*< List item used to place the TCB in ready and blocked queues. */
                        517     ;       xListItem                       xEventListItem;                                 
                                       /*< List item used to place the TCB in event lists. */
                        518     ; 
                        519     ;       unsigned portCHAR       ucTCBNumber;                                            
                               /*< This is used for tracing the scheduler only. */
                        520     ; } tskTCB;
                        521     ; 
                        522     ; /*lint -e956 */
                        523     ; 
                        524     ; volatile tskTCB * volatile pxCurrentTCB = NULL;                                       
                        525     ; 
                        526     ; /* Lists for ready and blocked tasks. --------------------*/
                        527     ; 
                        528     ;  volatile xList pxReadyTasksLists[ portMAX_PRIORITIES ];      /*< Prioratised ready ta
                               sks. */
                        529     ; static volatile xList xDelayedTaskList1;                                              
                               /*< Delayed tasks. */
                        530     ; static volatile xList xDelayedTaskList2;                                              
                               /*< Delayed tasks (two lists are used - one for delays that have overflowed the current tick count. */
                        531     ; static volatile xList *pxDelayedTaskList;                                             
                               /*< Points to the delayed task list currently being used. */
                        532     ; static volatile xList *pxOverflowDelayedTaskList;                             /*< Poin
                               ts to the delayed task list currently being used to hold tasks that have overflowed the current tick count. */
                        533     ; static volatile xList xPendingReadyList;                                              
                               /*< Tasks that have been readied while the scheduler was suspended.  They will be moved t
                               o the ready queue when the scheduler is resumed. */
                        534     ; 
                        535     ; #if( INCLUDE_vTaskDelete == 1 )
                        536     ; 
                        537     ;       static volatile xList xTasksWaitingTermination;                         /*< Task
                               s that have been deleted - but the their memory not yet freed. */
                        538     ; 
                        539     ; #endif
                        540     ; 
                        541     ; #if( INCLUDE_vTaskSuspend == 1 )
                        542     ; 
                        543     ;       static volatile xList xSuspendedTaskList;                                       
                               /*< Tasks that are currently suspended. */
                        544     ; 
                        545     ; #endif
                        546     ; 
                        547     ; /* File private variables. --------------------------------*/
                        548     ; static portSHORT sUsingPreemption = pdFALSE;
                        549     ; static unsigned portSHORT usCurrentNumberOfTasks = ( unsigned portSHORT ) 0;          
                                   
                        550     ; volatile portTickType xTickCount = ( portTickType ) 0;                                
                               /* Modified by tick ISR. */
                        551     ; static unsigned portCHAR ucTopUsedPriority = tskIDLE_PRIORITY;
                        552     ; static volatile unsigned portCHAR ucTopReadyPriority = tskIDLE_PRIORITY;
                        553     ; static signed portCHAR cSchedulerRunning = pdFALSE;
                        554     ; static volatile unsigned portCHAR ucSchedulerSuspended = pdFALSE;
                        555     ; static volatile unsigned portCHAR ucMissedTicks = ( unsigned portCHAR ) 0;
                        556     ; 
                        557     ; /* Debugging and trace facilities private variables and macros. ------------*/
                        558     ; 
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    10

                        559     ; /*
                        560     ;  * The value used to fill the stack of a task when the task is created.  This
                        561     ;  * is used purely for checking the high water mark for tasks.
                        562     ;  */
                        563     ; #define tskSTACK_FILL_BYTE    ( 0xa5 )
                        564     ; 
                        565     ; /*
                        566     ;  * Macros used by vListTask to indicate which state a task is in.
                        567     ;  */
                        568     ; #define tskBLOCKED_CHAR               ( ( signed portCHAR ) 'B' )
                        569     ; #define tskREADY_CHAR         ( ( signed portCHAR ) 'R' )
                        570     ; #define tskDELETED_CHAR               ( ( signed portCHAR ) 'D' )
                        571     ; #define tskSUSPENDED_CHAR     ( ( signed portCHAR ) 'S' )
                        572     ; 
                        573     ; /* 
                        574     ;  * Macros and private variables used by the trace facility.
                        575     ;  */
                        576     ; #if( USE_TRACE_FACILITY == 1 )
                        577     ; 
                        578     ;       #define tskSIZE_OF_EACH_TRACE_LINE                      ( sizeof( unsigned portL
                               ONG ) + sizeof( unsigned portCHAR ) )
                        579     ;       static volatile signed portCHAR * volatile pcTraceBuffer;
                        580     ;       static signed portCHAR *pcTraceBufferStart;
                        581     ;       static signed portCHAR *pcTraceBufferEnd;
                        582     ;       static signed portCHAR cTracing = ( signed portCHAR ) pdFALSE;
                        583     ; 
                        584     ; #endif
                        585     ; 
                        586     ; /*
                        587     ;  * Macro that writes a trace of scheduler activity to a buffer.  This trace
                        588     ;  * shows which task is running when and is very useful as a debugging tool.
                        589     ;  * As this macro is called each context switch it is a good idea to undefine
                        590     ;  * it if not using the facility.
                        591     ;  */
                        592     ; #if( USE_TRACE_FACILITY == 1 )
                        593     ; 
                        594     ;       #define vWriteTraceToBuffer()                                                   
                                                                                       \
                        595     ;       {                                                                               
                                                                                                                       \
                        596     ;               if( cTracing )                                                          
                                                                                                       \
                        597     ;               {                                                                       
                                                                                                                       \
                        598     ;                       static unsigned portCHAR ucPreviousTask = 255;                  
                                                                       \
                        599     ;                                                                                       
                                                                                                                       \
                        600     ;                       if( ucPreviousTask != pxCurrentTCB->ucTCBNumber )               
                                                                       \
                        601     ;                       {                                                               
                                                                                                                       \
                        602     ;                               if( ( pcTraceBuffer + tskSIZE_OF_EACH_TRACE_LINE ) < pcT
                               raceBufferEnd ) \
                        603     ;                               {                                                       
                                                                                                                       \
                        604     ;                                       ucPreviousTask = pxCurrentTCB->ucTCBNumber;     
                                                                               \
                        605     ;                                       *( unsigned portLONG * ) pcTraceBuffer = ( unsig
                               ned portLONG ) xTickCount;      \
                        606     ;                                       pcTraceBuffer += sizeof( unsigned portLONG );   
                                                                       \
                        607     ;                                       *( unsigned portCHAR * ) pcTraceBuffer = ucPrevi
                               ousTask;                        \
                        608     ;                                       pcTraceBuffer += sizeof( unsigned portCHAR );   
                                                                       \
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    11

                        609     ;                               }                                                       
                                                                                                                       \
                        610     ;                               else                                                    
                                                                                                               \
                        611     ;                               {                                                       
                                                                                                                       \
                        612     ;                                       cTracing = ( signed portCHAR ) pdFALSE;         
                                                                               \
                        613     ;                               }                                                       
                                                                                                                       \
                        614     ;                       }                                                               
                                                                                                                       \
                        615     ;               }                                                                       
                                                                                                                       \
                        616     ;       }
                        617     ; 
                        618     ; #else
                        619     ; 
                        620     ;       #define vWriteTraceToBuffer()
                        621     ; 
                        622     ; #endif
                        623     ; 
                        624     ; 
                        625     ; /*
                        626     ;  * Place the task represented by pxTCB into the appropriate ready queue for
                        627     ;  * the task.  It is inserted at the end of the list.  One quirk of this is
                        628     ;  * that if the task being inserted is at the same priority as the currently
                        629     ;  * executing task, then it will only be rescheduled after the currently 
                        630     ;  * executing task has been rescheduled.
                        631     ;  */
                        632     ; #define prvAddTaskToReadyQueue( pxTCB )                                               
                                                                                                                                       \
                        633     ; {                                                                                     
                                                                                                                        
                                                                              \
                        634     ;       listSET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ), 0 );                     
                                                                                                               \
                        635     ;       if( pxTCB->ucPriority > ucTopReadyPriority )                                    
                                                                                                                       \
                        636     ;       {                                                                               
                                                                                                                        
                                                                              \
                        637     ;               ucTopReadyPriority = pxTCB->ucPriority;                                 
                                                                                                                               \
                        638     ;       }                                                                               
                                                                                                                        
                                                                              \
                        639     ;       vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ pxTCB->ucPriority ] ), &( pxTC
                               B->xGenericListItem ) );        \
                        640     ; }     
                        641     ; 
                        642     ; 
                        643     ; /*
                        644     ;  * Macro that looks at the list of tasks that are currently delayed to see if 
                        645     ;  * any require waking.
                        646     ;  *
                        647     ;  * Tasks are stored in the queue in the order of their wake time - meaning
                        648     ;  * once one tasks has been found whose timer has not expired we need not look
                        649     ;  * any further down the list.
                        650     ;  */
                        651     ; #define prvCheckDelayedTasks()                                                        
                                                                                                               \
                        652     ; {                                                                                     
                                                                                                                                       \
                        653     ; register tskTCB *pxTCB;                                                               
                                                                                                                       \
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    12

                        654     ;                                                                                       
                                                                                                                                       \
                        655     ;       while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ) )
                                != NULL )      \
                        656     ;       {                                                                               
                                                                                                                                       \
                        657     ;               if( xTickCount < listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) )
                                )                              \
                        658     ;               {                                                                       
                                                                                                                                       \
                        659     ;                       break;                                                          
                                                                                                                               \
                        660     ;               }                                                                       
                                                                                                                                       \
                        661     ;               vListRemove( &( pxTCB->xGenericListItem ) );                            
                                                                                       \
                        662     ;               /* Is the task waiting on an event also? */                             
                                                                                               \
                        663     ;               if( pxTCB->xEventListItem.pvContainer )                                 
                                                                                               \
                        664     ;               {                                                                       
                                                                                                                                       \
                        665     ;                       vListRemove( &( pxTCB->xEventListItem ) );                      
                                                                                               \
                        666     ;               }                                                                       
                                                                                                                                       \
                        667     ;               prvAddTaskToReadyQueue( pxTCB );                                        
                                                                                                       \
                        668     ;       }                                                                               
                                                                                                                                       \
                        669     ; }                                                                                     
                                                                                                                               
                        670     ; 
                        671     ; /*
                        672     ;  * Several functions take an xTaskHandle parameter that can optionally be NULL,
                        673     ;  * where NULL is used to indicate that the handle of the currently executing 
                        674     ;  * task should be used in place of the parameter.  This macro simply checks to 
                        675     ;  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
                        676     ;  */
                        677     ; #define prvGetTCBFromHandle( pxHandle ) ( ( pxHandle == NULL ) ? ( tskTCB * ) pxCurren
                               tTCB : ( tskTCB * ) pxHandle )
                        678     ; 
                        679     ; 
                        680     ; /* File private functions. --------------------------------*/
                        681     ; 
                        682     ; /*
                        683     ;  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
                        684     ;  * into the TCB structure.
                        685     ;  */
                        686     ; static void prvInitialiseTCBVariables( tskTCB *pxTCB, unsigned portSHORT usStackDepth,
                                const signed portCHAR * const pcName, unsigned portCHAR ucPriority ) reentrant ;
                        687     ; 
                        688     ; /*
                        689     ;  * Utility to ready all the lists used by the scheduler.  This is called 
                        690     ;  * automatically upon the creation of the first task.
                        691     ;  */
                        692     ; static portSHORT prvInitialiseTaskLists( void ) reentrant;
                        693     ; 
                        694     ; /*
                        695     ;  * The idle task, which as all tasks is implemented as a never ending loop.
                        696     ;  * The idle task is automatically created and added to the ready lists upon
                        697     ;  * creation of the first user task.
                        698     ;  */
                        699     ; static void prvIdleTask( void *pvParameters ) reentrant;
                        700     ; 
                        701     ; /*
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    13

                        702     ;  * Utility to free all memory allocated by the scheduler to hold a TCB, 
                        703     ;  * including the stack pointed to by the TCB.  
                        704     ;  *
                        705     ;  * This does not free memory allocated by the task itself (i.e. memory 
                        706     ;  * allocated by calls to pvPortMalloc from within the tasks application code).
                        707     ;  */
                        708     ; #if( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )
                        709     ;       static void prvDeleteTCB( tskTCB *pxTCB )reentrant;
                        710     ; #endif
                        711     ; 
                        712     ; /*
                        713     ;  * Used only by the idle task.  This checks to see if anything has been placed
                        714     ;  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
                        715     ;  * and its TCB deleted.
                        716     ;  */
                        717     ; static void prvCheckTasksWaitingTermination( void )reentrant;
                        718     ; 
                        719     ; /*
                        720     ;  * Allocates memory from the heap for a TCB and associated stack.  Checks the
                        721     ;  * allocation was successful.
                        722     ;  */
                        723     ; static tskTCB *prvAllocateTCBAndStack( unsigned portSHORT usStackDepth )reentrant;
                        724     ; 
                        725     ; /*
                        726     ;  * Called from vTaskList.  vListTasks details all the tasks currently under
                        727     ;  * control of the scheduler.  The tasks may be in one of a number of lists.
                        728     ;  * prvListTaskWithinSingleList accepts a list and details the tasks from
                        729     ;  * within just that list.
                        730     ;  *
                        731     ;  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
                        732     ;  * NORMAL APPLICATION CODE.
                        733     ;  */
                        734     ; #if( USE_TRACE_FACILITY == 1 )
                        735     ; 
                        736     ;       static void prvListTaskWithinSingleList( signed portCHAR *pcWriteBuffer, xList *
                               pxList, signed portCHAR cStatus )reentrant;
                        737     ; #endif
                        738     ; 
                        739     ; 
                        740     ; /*lint +e956 */
                        741     ; 
                        742     ; 
                        743     ; 
                        744     ; 
                        745     ; 
                        746     ; /*-----------------------------------------------------------
                        747     ;  * TASK CREATION API documented in task.h
                        748     ;  *----------------------------------------------------------*/
                        749     ; 
                        750     ; portSHORT sTaskCreate( pdTASK_CODE pvTaskCode, const signed portCHAR * const pcName, u
                               nsigned portSHORT usStackDepth, void *pvParameters, unsigned portCHAR ucPriority, xTaskHandle *pxCreatedTask )reentrant
                        751     
------                  752             RSEG  ?PR?_?sTaskCreate?TASKS
000000                  753     _?sTaskCreate:
                        754             USING   0
                        755                             ; SOURCE LINE # 361
000000 9000FFFD         756             MOV     DPTR,#0FFFDH
000004 12000000   E     757             LCALL   ?C?ADDXBP
000008 EB               758             MOV     A,R3
000009 F0               759             MOVX    @DPTR,A
00000A A3               760             INC     DPTR
00000B EA               761             MOV     A,R2
00000C F0               762             MOVX    @DPTR,A
00000D A3               763             INC     DPTR
00000E E9               764             MOV     A,R1
00000F F0               765             MOVX    @DPTR,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    14

000010 9000FFF4         766             MOV     DPTR,#0FFF4H
000014 12000000   E     767             LCALL   ?C?ADDXBP
                        768     ; {
                        769     ; portSHORT sReturn;
                        770     ; tskTCB * pxNewTCB;
                        771     ; static unsigned portCHAR ucTaskNumber = 0; /*lint !e956 Static is deliberate - this is
                                guarded before use. */
                        772     ; 
                        773     ;       /* Allocate the memory required by the TCB and stack for the new task.  
                        774     ;       checking that the allocation was successful. */
                        775     ;       pxNewTCB = prvAllocateTCBAndStack( usStackDepth );
                        776                             ; SOURCE LINE # 369
000018 90000012         777             MOV     DPTR,#012H
00001C 12000000   E     778             LCALL   ?C?XBPOFF
000020 E0               779             MOVX    A,@DPTR
000021 FE               780             MOV     R6,A
000022 A3               781             INC     DPTR
000023 E0               782             MOVX    A,@DPTR
000024 FF               783             MOV     R7,A
000025 12000000   F     784             LCALL   _?prvAllocateTCBAndStack
000029 850083     E     785             MOV     DPH,?C_XBP
00002C 850082     E     786             MOV     DPL,?C_XBP+01H
00002F A3               787             INC     DPTR
000030 A3               788             INC     DPTR
000031 759300     E     789             MOV     DPX,#?C?XDATASEG
000034 EB               790             MOV     A,R3
000035 F0               791             MOVX    @DPTR,A
000036 A3               792             INC     DPTR
000037 EA               793             MOV     A,R2
000038 F0               794             MOVX    @DPTR,A
000039 A3               795             INC     DPTR
00003A E9               796             MOV     A,R1
00003B F0               797             MOVX    @DPTR,A
                        798     ;       if( pxNewTCB != NULL )
                        799                             ; SOURCE LINE # 370
00003C 850083     E     800             MOV     DPH,?C_XBP
00003F 850082     E     801             MOV     DPL,?C_XBP+01H
000042 A3               802             INC     DPTR
000043 A3               803             INC     DPTR
000044 759300     E     804             MOV     DPX,#?C?XDATASEG
000047 E0               805             MOVX    A,@DPTR
000048 FB               806             MOV     R3,A
000049 A3               807             INC     DPTR
00004A E0               808             MOVX    A,@DPTR
00004B FA               809             MOV     R2,A
00004C A3               810             INC     DPTR
00004D E0               811             MOVX    A,@DPTR
00004E 4A               812             ORL     A,R2
00004F 4B               813             ORL     A,R3
000050 7003             814             JNZ     $ + 5H
000052 010000     F     815             AJMP    ?C0001
                        816     ;       {               
                        817                             ; SOURCE LINE # 371
                        818     ;               portSTACK_TYPE *pxTopOfStack;
                        819     ; 
                        820     ;               /* Setup the newly allocated TCB with the initial state of the task. */
                        821     ;               prvInitialiseTCBVariables( pxNewTCB, usStackDepth, pcName, ucPriority );
                        822                             ; SOURCE LINE # 375
000055 90000017         823             MOV     DPTR,#017H
000059 12000000   E     824             LCALL   ?C?XBPOFF
00005D E0               825             MOVX    A,@DPTR
00005E FF               826             MOV     R7,A
00005F 9000FFFF         827             MOV     DPTR,#0FFFFH
000063 12000000   E     828             LCALL   ?C?ADDXBP
000067 EF               829             MOV     A,R7
000068 F0               830             MOVX    @DPTR,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    15

000069 90000010         831             MOV     DPTR,#010H
00006D 12000000   E     832             LCALL   ?C?XBPOFF
000071 E0               833             MOVX    A,@DPTR
000072 FB               834             MOV     R3,A
000073 A3               835             INC     DPTR
000074 E0               836             MOVX    A,@DPTR
000075 FA               837             MOV     R2,A
000076 A3               838             INC     DPTR
000077 E0               839             MOVX    A,@DPTR
000078 F9               840             MOV     R1,A
000079 9000FFFD         841             MOV     DPTR,#0FFFDH
00007D 12000000   E     842             LCALL   ?C?ADDXBP
000081 EB               843             MOV     A,R3
000082 F0               844             MOVX    @DPTR,A
000083 A3               845             INC     DPTR
000084 EA               846             MOV     A,R2
000085 F0               847             MOVX    @DPTR,A
000086 A3               848             INC     DPTR
000087 E9               849             MOV     A,R1
000088 F0               850             MOVX    @DPTR,A
000089 90000016         851             MOV     DPTR,#016H
00008D 12000000   E     852             LCALL   ?C?XBPOFF
000091 E0               853             MOVX    A,@DPTR
000092 FC               854             MOV     R4,A
000093 A3               855             INC     DPTR
000094 E0               856             MOVX    A,@DPTR
000095 FD               857             MOV     R5,A
000096 90000006         858             MOV     DPTR,#06H
00009A 12000000   E     859             LCALL   ?C?XBPOFF
00009E E0               860             MOVX    A,@DPTR
00009F FB               861             MOV     R3,A
0000A0 A3               862             INC     DPTR
0000A1 E0               863             MOVX    A,@DPTR
0000A2 FA               864             MOV     R2,A
0000A3 A3               865             INC     DPTR
0000A4 E0               866             MOVX    A,@DPTR
0000A5 F9               867             MOV     R1,A
0000A6 12000000   F     868             LCALL   _?prvInitialiseTCBVariables
                        869     ; 
                        870     ;               /* Calculate the top of stack address.  This depends on whether the
                        871     ;               stack grows from high memory to low (as per the 80x86) or visa versa. 
                        872     ;               portSTACK_GROWTH is used to make the result positive or negative as
                        873     ;               required by the port. */
                        874     ;               #if portSTACK_GROWTH < 0
                        875     ;               {
                        876                             ; SOURCE LINE # 382
                        877     ;                       portLONG lStackSize; 
                        878     ; 
                        879     ;                       lStackSize = ( portLONG ) ( pxNewTCB->usStackDepth - ( unsigned 
                               portSHORT ) 1 );
                        880                             ; SOURCE LINE # 385
0000AA 850083     E     881             MOV     DPH,?C_XBP
0000AD 850082     E     882             MOV     DPL,?C_XBP+01H
0000B0 A3               883             INC     DPTR
0000B1 A3               884             INC     DPTR
0000B2 759300     E     885             MOV     DPX,#?C?XDATASEG
0000B5 E0               886             MOVX    A,@DPTR
0000B6 FB               887             MOV     R3,A
0000B7 A3               888             INC     DPTR
0000B8 E0               889             MOVX    A,@DPTR
0000B9 FA               890             MOV     R2,A
0000BA A3               891             INC     DPTR
0000BB E0               892             MOVX    A,@DPTR
0000BC 2406             893             ADD     A,#06H
0000BE F9               894             MOV     R1,A
0000BF E4               895             CLR     A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    16

0000C0 3A               896             ADDC    A,R2
0000C1 FA               897             MOV     R2,A
0000C2 12000000   E     898             LCALL   ?C?ILDPTR
0000C6 C3               899             CLR     C
0000C7 9401             900             SUBB    A,#01H
0000C9 FF               901             MOV     R7,A
0000CA E5F0             902             MOV     A,B
0000CC 9400             903             SUBB    A,#00H
0000CE FE               904             MOV     R6,A
0000CF E4               905             CLR     A
0000D0 FC               906             MOV     R4,A
0000D1 FD               907             MOV     R5,A
0000D2 90000008         908             MOV     DPTR,#08H
0000D6 12000000   E     909             LCALL   ?C?XBPOFF
0000DA 12000000   E     910             LCALL   ?C?LSTXDATA
                        911     ;                       pxTopOfStack = pxNewTCB->pxStack + lStackSize;
                        912                             ; SOURCE LINE # 386
0000DE 850083     E     913             MOV     DPH,?C_XBP
0000E1 850082     E     914             MOV     DPL,?C_XBP+01H
0000E4 A3               915             INC     DPTR
0000E5 A3               916             INC     DPTR
0000E6 759300     E     917             MOV     DPX,#?C?XDATASEG
0000E9 E0               918             MOVX    A,@DPTR
0000EA FB               919             MOV     R3,A
0000EB A3               920             INC     DPTR
0000EC E0               921             MOVX    A,@DPTR
0000ED FA               922             MOV     R2,A
0000EE A3               923             INC     DPTR
0000EF E0               924             MOVX    A,@DPTR
0000F0 2403             925             ADD     A,#03H
0000F2 F9               926             MOV     R1,A
0000F3 E4               927             CLR     A
0000F4 3A               928             ADDC    A,R2
0000F5 FA               929             MOV     R2,A
0000F6 12000000   E     930             LCALL   ?C?PLDPTR
0000FA 90000008         931             MOV     DPTR,#08H
0000FE 12000000   E     932             LCALL   ?C?XBPOFF
000102 A3               933             INC     DPTR
000103 E0               934             MOVX    A,@DPTR
000104 FD               935             MOV     R5,A
000105 A3               936             INC     DPTR
000106 E0               937             MOVX    A,@DPTR
000107 FE               938             MOV     R6,A
000108 A3               939             INC     DPTR
000109 E0               940             MOVX    A,@DPTR
00010A 29               941             ADD     A,R1
00010B F9               942             MOV     R1,A
00010C EA               943             MOV     A,R2
00010D 3E               944             ADDC    A,R6
00010E FA               945             MOV     R2,A
00010F EB               946             MOV     A,R3
000110 3D               947             ADDC    A,R5
000111 FB               948             MOV     R3,A
000112 90000005         949             MOV     DPTR,#05H
000116 12000000   E     950             LCALL   ?C?XBPOFF
00011A EB               951             MOV     A,R3
00011B F0               952             MOVX    @DPTR,A
00011C A3               953             INC     DPTR
00011D EA               954             MOV     A,R2
00011E F0               955             MOVX    @DPTR,A
00011F A3               956             INC     DPTR
000120 E9               957             MOV     A,R1
000121 F0               958             MOVX    @DPTR,A
                        959     ;               }
                        960                             ; SOURCE LINE # 387
                        961     ;               #else
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    17

                        962     ;               {
                        963     ;                       pxTopOfStack = pxNewTCB->pxStack;       
                        964     ;               }
                        965     ;               #endif
                        966     ; 
                        967     ;               /* Initialise the TCB stack to look as if the task was already running,
                        968     ;               but had been interrupted by the scheduler.  The return address is set
                        969     ;               to the start of the task function. Once the stack has been initialised
                        970     ;               the     top of stack variable is updated. */
                        971     ;               pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pvTaskCode
                               , pvParameters );
                        972                             ; SOURCE LINE # 398
000122 90000014         973             MOV     DPTR,#014H
000126 12000000   E     974             LCALL   ?C?XBPOFF
00012A E0               975             MOVX    A,@DPTR
00012B FB               976             MOV     R3,A
00012C A3               977             INC     DPTR
00012D E0               978             MOVX    A,@DPTR
00012E FA               979             MOV     R2,A
00012F A3               980             INC     DPTR
000130 E0               981             MOVX    A,@DPTR
000131 F9               982             MOV     R1,A
000132 9000FFFD         983             MOV     DPTR,#0FFFDH
000136 12000000   E     984             LCALL   ?C?ADDXBP
00013A EB               985             MOV     A,R3
00013B F0               986             MOVX    @DPTR,A
00013C A3               987             INC     DPTR
00013D EA               988             MOV     A,R2
00013E F0               989             MOVX    @DPTR,A
00013F A3               990             INC     DPTR
000140 E9               991             MOV     A,R1
000141 F0               992             MOVX    @DPTR,A
000142 9000000F         993             MOV     DPTR,#0FH
000146 12000000   E     994             LCALL   ?C?XBPOFF
00014A E0               995             MOVX    A,@DPTR
00014B FB               996             MOV     R3,A
00014C A3               997             INC     DPTR
00014D E0               998             MOVX    A,@DPTR
00014E FA               999             MOV     R2,A
00014F A3              1000             INC     DPTR
000150 E0              1001             MOVX    A,@DPTR
000151 F9              1002             MOV     R1,A
000152 9000FFFD        1003             MOV     DPTR,#0FFFDH
000156 12000000   E    1004             LCALL   ?C?ADDXBP
00015A EB              1005             MOV     A,R3
00015B F0              1006             MOVX    @DPTR,A
00015C A3              1007             INC     DPTR
00015D EA              1008             MOV     A,R2
00015E F0              1009             MOVX    @DPTR,A
00015F A3              1010             INC     DPTR
000160 E9              1011             MOV     A,R1
000161 F0              1012             MOVX    @DPTR,A
000162 9000000B        1013             MOV     DPTR,#0BH
000166 12000000   E    1014             LCALL   ?C?XBPOFF
00016A E0              1015             MOVX    A,@DPTR
00016B FB              1016             MOV     R3,A
00016C A3              1017             INC     DPTR
00016D E0              1018             MOVX    A,@DPTR
00016E FA              1019             MOV     R2,A
00016F A3              1020             INC     DPTR
000170 E0              1021             MOVX    A,@DPTR
000171 F9              1022             MOV     R1,A
000172 12000000   E    1023             LCALL   _?pxPortInitialiseStack
000176 C003            1024             PUSH    AR3
000178 C002            1025             PUSH    AR2
00017A C001            1026             PUSH    AR1
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    18

00017C 850083     E    1027             MOV     DPH,?C_XBP
00017F 850082     E    1028             MOV     DPL,?C_XBP+01H
000182 A3              1029             INC     DPTR
000183 A3              1030             INC     DPTR
000184 759300     E    1031             MOV     DPX,#?C?XDATASEG
000187 E0              1032             MOVX    A,@DPTR
000188 FB              1033             MOV     R3,A
000189 A3              1034             INC     DPTR
00018A E0              1035             MOVX    A,@DPTR
00018B FA              1036             MOV     R2,A
00018C A3              1037             INC     DPTR
00018D E0              1038             MOVX    A,@DPTR
00018E F9              1039             MOV     R1,A
00018F 12000000   E    1040             LCALL   ?C?PSTPTR
                       1041     ; 
                       1042     ;               /* We are going to manipulate the task queues to add this task to a
                       1043     ;               ready list, so must make sure no interrupts occur. */
                       1044     ;               portENTER_CRITICAL();
000193 A2AFC2AF        1045              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
000197 C0D0                     
                       1046     ;               {
                       1047                             ; SOURCE LINE # 403
                       1048     ;                       usCurrentNumberOfTasks++;
                       1049                             ; SOURCE LINE # 404
000199 90000000   F    1050             MOV     DPTR,#usCurrentNumberOfTasks+01H
00019D E0              1051             MOVX    A,@DPTR
00019E 04              1052             INC     A
00019F F0              1053             MOVX    @DPTR,A
0001A0 7007            1054             JNZ     ?C0106
0001A2 90000000   F    1055             MOV     DPTR,#usCurrentNumberOfTasks
0001A6 E0              1056             MOVX    A,@DPTR
0001A7 04              1057             INC     A
0001A8 F0              1058             MOVX    @DPTR,A
0001A9                 1059     ?C0106:
                       1060     ;                       if( usCurrentNumberOfTasks == ( unsigned portSHORT ) 1 )
                       1061                             ; SOURCE LINE # 405
0001A9 90000000   F    1062             MOV     DPTR,#usCurrentNumberOfTasks
0001AD E0              1063             MOVX    A,@DPTR
0001AE 7004            1064             JNZ     ?C0107
0001B0 A3              1065             INC     DPTR
0001B1 E0              1066             MOVX    A,@DPTR
0001B2 6401            1067             XRL     A,#01H
0001B4                 1068     ?C0107:
0001B4 7032            1069             JNZ     ?C0002
                       1070     ;                       {
                       1071                             ; SOURCE LINE # 406
                       1072     ;                               /* As this is the first task it must also be the current
                                task. */
                       1073     ;                               pxCurrentTCB = ( volatile tskTCB * volatile ) pxNewTCB;
                       1074                             ; SOURCE LINE # 408
0001B6 850083     E    1075             MOV     DPH,?C_XBP
0001B9 850082     E    1076             MOV     DPL,?C_XBP+01H
0001BC A3              1077             INC     DPTR
0001BD A3              1078             INC     DPTR
0001BE 759300     E    1079             MOV     DPX,#?C?XDATASEG
0001C1 E0              1080             MOVX    A,@DPTR
0001C2 F9              1081             MOV     R1,A
0001C3 A3              1082             INC     DPTR
0001C4 E0              1083             MOVX    A,@DPTR
0001C5 FA              1084             MOV     R2,A
0001C6 A3              1085             INC     DPTR
0001C7 E0              1086             MOVX    A,@DPTR
0001C8 90000000   F    1087             MOV     DPTR,#pxCurrentTCB
0001CC C9              1088             XCH     A,R1
0001CD F0              1089             MOVX    @DPTR,A
0001CE A3              1090             INC     DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    19

0001CF EA              1091             MOV     A,R2
0001D0 F0              1092             MOVX    @DPTR,A
0001D1 A3              1093             INC     DPTR
0001D2 E9              1094             MOV     A,R1
0001D3 F0              1095             MOVX    @DPTR,A
                       1096     ; 
                       1097     ;                               /* This is the first task to be created so do the prelim
                               inary
                       1098     ;                               initialisation required.  We will not recover if this ca
                               ll 
                       1099     ;                               fails, but we will report the failure. */
                       1100     ;                               sReturn = prvInitialiseTaskLists();
                       1101                             ; SOURCE LINE # 413
0001D4 12000000   F    1102             LCALL   _?prvInitialiseTaskLists
0001D8 850083     E    1103             MOV     DPH,?C_XBP
0001DB 850082     E    1104             MOV     DPL,?C_XBP+01H
0001DE 759300     E    1105             MOV     DPX,#?C?XDATASEG
0001E1 EE              1106             MOV     A,R6
0001E2 F0              1107             MOVX    @DPTR,A
0001E3 A3              1108             INC     DPTR
0001E4 EF              1109             MOV     A,R7
0001E5 F0              1110             MOVX    @DPTR,A
                       1111     ;                       }
                       1112                             ; SOURCE LINE # 414
0001E6 8058            1113             SJMP    ?C0003
0001E8                 1114     ?C0002:
                       1115     ;                       else
                       1116     ;                       {
                       1117                             ; SOURCE LINE # 416
                       1118     ;                               sReturn = pdPASS;
                       1119                             ; SOURCE LINE # 417
0001E8 850083     E    1120             MOV     DPH,?C_XBP
0001EB 850082     E    1121             MOV     DPL,?C_XBP+01H
0001EE 759300     E    1122             MOV     DPX,#?C?XDATASEG
0001F1 E4              1123             CLR     A
0001F2 F0              1124             MOVX    @DPTR,A
0001F3 A3              1125             INC     DPTR
0001F4 04              1126             INC     A
0001F5 F0              1127             MOVX    @DPTR,A
                       1128     ; 
                       1129     ;                               /* If the scheduler is not already running, make this ta
                               sk the
                       1130     ;                               current task if it is the highest priority task to be cr
                               eated
                       1131     ;                               so far. */
                       1132     ;                               if( cSchedulerRunning == pdFALSE )
                       1133                             ; SOURCE LINE # 422
0001F6 90000000   F    1134             MOV     DPTR,#cSchedulerRunning
0001FA E0              1135             MOVX    A,@DPTR
0001FB 7043            1136             JNZ     ?C0003
                       1137     ;                               {
                       1138                             ; SOURCE LINE # 423
                       1139     ;                                       if( pxCurrentTCB->ucPriority <= ucPriority )
                       1140                             ; SOURCE LINE # 424
0001FD 90000000   F    1141             MOV     DPTR,#pxCurrentTCB
000201 E0              1142             MOVX    A,@DPTR
000202 FB              1143             MOV     R3,A
000203 A3              1144             INC     DPTR
000204 E0              1145             MOVX    A,@DPTR
000205 FA              1146             MOV     R2,A
000206 A3              1147             INC     DPTR
000207 E0              1148             MOVX    A,@DPTR
000208 2418            1149             ADD     A,#018H
00020A F9              1150             MOV     R1,A
00020B E4              1151             CLR     A
00020C 3A              1152             ADDC    A,R2
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    20

00020D FA              1153             MOV     R2,A
00020E 12000000   E    1154             LCALL   ?C?CLDPTR
000212 FF              1155             MOV     R7,A
000213 90000017        1156             MOV     DPTR,#017H
000217 12000000   E    1157             LCALL   ?C?XBPOFF
00021B E0              1158             MOVX    A,@DPTR
00021C FE              1159             MOV     R6,A
00021D EF              1160             MOV     A,R7
00021E D3              1161             SETB    C
00021F 9E              1162             SUBB    A,R6
000220 501E            1163             JNC     ?C0003
                       1164     ;                                       {
                       1165                             ; SOURCE LINE # 425
                       1166     ;                                               pxCurrentTCB = ( volatile tskTCB * volat
                               ile ) pxNewTCB; 
                       1167                             ; SOURCE LINE # 426
000222 850083     E    1168             MOV     DPH,?C_XBP
000225 850082     E    1169             MOV     DPL,?C_XBP+01H
000228 A3              1170             INC     DPTR
000229 A3              1171             INC     DPTR
00022A 759300     E    1172             MOV     DPX,#?C?XDATASEG
00022D E0              1173             MOVX    A,@DPTR
00022E F9              1174             MOV     R1,A
00022F A3              1175             INC     DPTR
000230 E0              1176             MOVX    A,@DPTR
000231 FA              1177             MOV     R2,A
000232 A3              1178             INC     DPTR
000233 E0              1179             MOVX    A,@DPTR
000234 90000000   F    1180             MOV     DPTR,#pxCurrentTCB
000238 C9              1181             XCH     A,R1
000239 F0              1182             MOVX    @DPTR,A
00023A A3              1183             INC     DPTR
00023B EA              1184             MOV     A,R2
00023C F0              1185             MOVX    @DPTR,A
00023D A3              1186             INC     DPTR
00023E E9              1187             MOV     A,R1
00023F F0              1188             MOVX    @DPTR,A
                       1189     ;                                       }
                       1190                             ; SOURCE LINE # 427
                       1191     ;                               }
                       1192                             ; SOURCE LINE # 428
                       1193     ;                       }                               
                       1194                             ; SOURCE LINE # 429
000240                 1195     ?C0003:
                       1196     ; 
                       1197     ;                       /* Remember the top priority to make context switching faster.  
                               Use
                       1198     ;                       the priority in pxNewTCB as this has been capped to a valid valu
                               e. */
                       1199     ;                       if( pxNewTCB->ucPriority > ucTopUsedPriority )
                       1200                             ; SOURCE LINE # 433
000240 850083     E    1201             MOV     DPH,?C_XBP
000243 850082     E    1202             MOV     DPL,?C_XBP+01H
000246 A3              1203             INC     DPTR
000247 A3              1204             INC     DPTR
000248 759300     E    1205             MOV     DPX,#?C?XDATASEG
00024B E0              1206             MOVX    A,@DPTR
00024C FB              1207             MOV     R3,A
00024D A3              1208             INC     DPTR
00024E E0              1209             MOVX    A,@DPTR
00024F FA              1210             MOV     R2,A
000250 A3              1211             INC     DPTR
000251 E0              1212             MOVX    A,@DPTR
000252 2418            1213             ADD     A,#018H
000254 F9              1214             MOV     R1,A
000255 E4              1215             CLR     A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    21

000256 3A              1216             ADDC    A,R2
000257 FA              1217             MOV     R2,A
000258 12000000   E    1218             LCALL   ?C?CLDPTR
00025C FF              1219             MOV     R7,A
00025D 90000000   F    1220             MOV     DPTR,#ucTopUsedPriority
000261 E0              1221             MOVX    A,@DPTR
000262 FE              1222             MOV     R6,A
000263 EF              1223             MOV     A,R7
000264 D3              1224             SETB    C
000265 9E              1225             SUBB    A,R6
000266 4002            1226             JC      ?C0006
                       1227     ;                       {
                       1228                             ; SOURCE LINE # 434
                       1229     ;                               ucTopUsedPriority = pxNewTCB->ucPriority;
                       1230                             ; SOURCE LINE # 435
000268 EF              1231             MOV     A,R7
000269 F0              1232             MOVX    @DPTR,A
                       1233     ;                       }
                       1234                             ; SOURCE LINE # 436
00026A                 1235     ?C0006:
                       1236     ; 
                       1237     ;                       /* Add a counter into the TCB for tracing only. */
                       1238     ;                       pxNewTCB->ucTCBNumber = ucTaskNumber;
                       1239                             ; SOURCE LINE # 439
00026A 90000000   F    1240             MOV     DPTR,#ucTaskNumber
00026E E0              1241             MOVX    A,@DPTR
00026F FF              1242             MOV     R7,A
000270 850083     E    1243             MOV     DPH,?C_XBP
000273 850082     E    1244             MOV     DPL,?C_XBP+01H
000276 A3              1245             INC     DPTR
000277 A3              1246             INC     DPTR
000278 759300     E    1247             MOV     DPX,#?C?XDATASEG
00027B E0              1248             MOVX    A,@DPTR
00027C FB              1249             MOV     R3,A
00027D A3              1250             INC     DPTR
00027E E0              1251             MOVX    A,@DPTR
00027F FA              1252             MOV     R2,A
000280 A3              1253             INC     DPTR
000281 E0              1254             MOVX    A,@DPTR
000282 2439            1255             ADD     A,#039H
000284 F9              1256             MOV     R1,A
000285 E4              1257             CLR     A
000286 3A              1258             ADDC    A,R2
000287 FA              1259             MOV     R2,A
000288 EF              1260             MOV     A,R7
000289 12000000   E    1261             LCALL   ?C?CSTPTR
                       1262     ;                       ucTaskNumber++;
                       1263                             ; SOURCE LINE # 440
00028D 90000000   F    1264             MOV     DPTR,#ucTaskNumber
000291 E0              1265             MOVX    A,@DPTR
000292 04              1266             INC     A
000293 F0              1267             MOVX    @DPTR,A
                       1268     ; 
                       1269     ;                       prvAddTaskToReadyQueue( pxNewTCB );
                       1270                             ; SOURCE LINE # 442
000294 E4              1271             CLR     A
000295 FF              1272             MOV     R7,A
000296 FE              1273             MOV     R6,A
000297 FD              1274             MOV     R5,A
000298 FC              1275             MOV     R4,A
000299 850083     E    1276             MOV     DPH,?C_XBP
00029C 850082     E    1277             MOV     DPL,?C_XBP+01H
00029F A3              1278             INC     DPTR
0002A0 A3              1279             INC     DPTR
0002A1 759300     E    1280             MOV     DPX,#?C?XDATASEG
0002A4 E0              1281             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    22

0002A5 FB              1282             MOV     R3,A
0002A6 A3              1283             INC     DPTR
0002A7 E0              1284             MOVX    A,@DPTR
0002A8 FA              1285             MOV     R2,A
0002A9 A3              1286             INC     DPTR
0002AA E0              1287             MOVX    A,@DPTR
0002AB 2419            1288             ADD     A,#019H
0002AD F9              1289             MOV     R1,A
0002AE E4              1290             CLR     A
0002AF 3A              1291             ADDC    A,R2
0002B0 FA              1292             MOV     R2,A
0002B1 12000000   E    1293             LCALL   ?C?LSTPTR
0002B5 850083     E    1294             MOV     DPH,?C_XBP
0002B8 850082     E    1295             MOV     DPL,?C_XBP+01H
0002BB A3              1296             INC     DPTR
0002BC A3              1297             INC     DPTR
0002BD 759300     E    1298             MOV     DPX,#?C?XDATASEG
0002C0 E0              1299             MOVX    A,@DPTR
0002C1 FB              1300             MOV     R3,A
0002C2 A3              1301             INC     DPTR
0002C3 E0              1302             MOVX    A,@DPTR
0002C4 FA              1303             MOV     R2,A
0002C5 A3              1304             INC     DPTR
0002C6 E0              1305             MOVX    A,@DPTR
0002C7 2418            1306             ADD     A,#018H
0002C9 F9              1307             MOV     R1,A
0002CA E4              1308             CLR     A
0002CB 3A              1309             ADDC    A,R2
0002CC FA              1310             MOV     R2,A
0002CD 12000000   E    1311             LCALL   ?C?CLDPTR
0002D1 FF              1312             MOV     R7,A
0002D2 90000000   F    1313             MOV     DPTR,#ucTopReadyPriority
0002D6 E0              1314             MOVX    A,@DPTR
0002D7 FE              1315             MOV     R6,A
0002D8 EF              1316             MOV     A,R7
0002D9 D3              1317             SETB    C
0002DA 9E              1318             SUBB    A,R6
0002DB 4002            1319             JC      ?C0007
0002DD EF              1320             MOV     A,R7
0002DE F0              1321             MOVX    @DPTR,A
0002DF                 1322     ?C0007:
0002DF 850083     E    1323             MOV     DPH,?C_XBP
0002E2 850082     E    1324             MOV     DPL,?C_XBP+01H
0002E5 A3              1325             INC     DPTR
0002E6 A3              1326             INC     DPTR
0002E7 759300     E    1327             MOV     DPX,#?C?XDATASEG
0002EA E0              1328             MOVX    A,@DPTR
0002EB FB              1329             MOV     R3,A
0002EC A3              1330             INC     DPTR
0002ED E0              1331             MOVX    A,@DPTR
0002EE FA              1332             MOV     R2,A
0002EF A3              1333             INC     DPTR
0002F0 E0              1334             MOVX    A,@DPTR
0002F1 2419            1335             ADD     A,#019H
0002F3 F9              1336             MOV     R1,A
0002F4 E4              1337             CLR     A
0002F5 3A              1338             ADDC    A,R2
0002F6 FA              1339             MOV     R2,A
0002F7 9000FFFD        1340             MOV     DPTR,#0FFFDH
0002FB 12000000   E    1341             LCALL   ?C?ADDXBP
0002FF EB              1342             MOV     A,R3
000300 F0              1343             MOVX    @DPTR,A
000301 A3              1344             INC     DPTR
000302 EA              1345             MOV     A,R2
000303 F0              1346             MOVX    @DPTR,A
000304 A3              1347             INC     DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    23

000305 E9              1348             MOV     A,R1
000306 F0              1349             MOVX    @DPTR,A
000307 EF              1350             MOV     A,R7
000308 75F018          1351             MOV     B,#018H
00030B A4              1352             MUL     AB
00030C 2400       F    1353             ADD     A,#LOW (pxReadyTasksLists)
00030E F9              1354             MOV     R1,A
00030F 7400       F    1355             MOV     A,#HIGH (pxReadyTasksLists)
000311 35F0            1356             ADDC    A,B
000313 FA              1357             MOV     R2,A
000314 7B00       F    1358             MOV     R3,#MBYTE (pxReadyTasksLists)
000316 12000000   E    1359             LCALL   _?vListInsertEnd
                       1360     ;               }
                       1361                             ; SOURCE LINE # 443
                       1362     ;               portEXIT_CRITICAL();
00031A D0D092AF        1363              DB 0D0H, 0D0H, 092H, 0AFH;
                       1364     ;       }
                       1365                             ; SOURCE LINE # 445
00031E 800E            1366             SJMP    ?C0008
000320                 1367     ?C0001:
                       1368     ;       else
                       1369     ;       {
                       1370                             ; SOURCE LINE # 447
                       1371     ;               sReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
                       1372                             ; SOURCE LINE # 448
000320 850083     E    1373             MOV     DPH,?C_XBP
000323 850082     E    1374             MOV     DPL,?C_XBP+01H
000326 759300     E    1375             MOV     DPX,#?C?XDATASEG
000329 74FF            1376             MOV     A,#0FFH
00032B F0              1377             MOVX    @DPTR,A
00032C A3              1378             INC     DPTR
00032D F0              1379             MOVX    @DPTR,A
                       1380     ;       }
                       1381                             ; SOURCE LINE # 449
00032E                 1382     ?C0008:
                       1383     ; 
                       1384     ;       if( sReturn == pdPASS )
                       1385                             ; SOURCE LINE # 451
00032E 850083     E    1386             MOV     DPH,?C_XBP
000331 850082     E    1387             MOV     DPL,?C_XBP+01H
000334 759300     E    1388             MOV     DPX,#?C?XDATASEG
000337 E0              1389             MOVX    A,@DPTR
000338 FE              1390             MOV     R6,A
000339 A3              1391             INC     DPTR
00033A E0              1392             MOVX    A,@DPTR
00033B 6401            1393             XRL     A,#01H
00033D 4E              1394             ORL     A,R6
00033E 7070            1395             JNZ     ?C0009
                       1396     ;       {
                       1397                             ; SOURCE LINE # 452
                       1398     ;               if( ( void * ) pxCreatedTask != NULL )
                       1399                             ; SOURCE LINE # 453
000340 90000018        1400             MOV     DPTR,#018H
000344 12000000   E    1401             LCALL   ?C?XBPOFF
000348 E0              1402             MOVX    A,@DPTR
000349 FB              1403             MOV     R3,A
00034A A3              1404             INC     DPTR
00034B E0              1405             MOVX    A,@DPTR
00034C FA              1406             MOV     R2,A
00034D A3              1407             INC     DPTR
00034E E0              1408             MOVX    A,@DPTR
00034F 4A              1409             ORL     A,R2
000350 4B              1410             ORL     A,R3
000351 602D            1411             JZ      ?C0010
                       1412     ;               {
                       1413                             ; SOURCE LINE # 454
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    24

                       1414     ;                       /* Pass the TCB out - in an anonymous way.  The calling function
                               /
                       1415     ;                       task can use this as a handle to delete the task later if 
                       1416     ;                       required.*/
                       1417     ;                       *pxCreatedTask = ( xTaskHandle ) pxNewTCB;
                       1418                             ; SOURCE LINE # 458
000353 850083     E    1419             MOV     DPH,?C_XBP
000356 850082     E    1420             MOV     DPL,?C_XBP+01H
000359 A3              1421             INC     DPTR
00035A A3              1422             INC     DPTR
00035B 759300     E    1423             MOV     DPX,#?C?XDATASEG
00035E E0              1424             MOVX    A,@DPTR
00035F FB              1425             MOV     R3,A
000360 A3              1426             INC     DPTR
000361 E0              1427             MOVX    A,@DPTR
000362 FA              1428             MOV     R2,A
000363 A3              1429             INC     DPTR
000364 E0              1430             MOVX    A,@DPTR
000365 F9              1431             MOV     R1,A
000366 C003            1432             PUSH    AR3
000368 C002            1433             PUSH    AR2
00036A C001            1434             PUSH    AR1
00036C 90000018        1435             MOV     DPTR,#018H
000370 12000000   E    1436             LCALL   ?C?XBPOFF
000374 E0              1437             MOVX    A,@DPTR
000375 FB              1438             MOV     R3,A
000376 A3              1439             INC     DPTR
000377 E0              1440             MOVX    A,@DPTR
000378 FA              1441             MOV     R2,A
000379 A3              1442             INC     DPTR
00037A E0              1443             MOVX    A,@DPTR
00037B F9              1444             MOV     R1,A
00037C 12000000   E    1445             LCALL   ?C?PSTPTR
                       1446     ;               }
                       1447                             ; SOURCE LINE # 459
000380                 1448     ?C0010:
                       1449     ; 
                       1450     ;               if( cSchedulerRunning != pdFALSE )
                       1451                             ; SOURCE LINE # 461
000380 90000000   F    1452             MOV     DPTR,#cSchedulerRunning
000384 E0              1453             MOVX    A,@DPTR
000385 6029            1454             JZ      ?C0009
                       1455     ;               {
                       1456                             ; SOURCE LINE # 462
                       1457     ;                       /* If the created task is of a higher priority than the current 
                               task
                       1458     ;                       then it should run now. */
                       1459     ;                       if( pxCurrentTCB->ucPriority < ucPriority )
                       1460                             ; SOURCE LINE # 465
000387 90000000   F    1461             MOV     DPTR,#pxCurrentTCB
00038B E0              1462             MOVX    A,@DPTR
00038C FB              1463             MOV     R3,A
00038D A3              1464             INC     DPTR
00038E E0              1465             MOVX    A,@DPTR
00038F FA              1466             MOV     R2,A
000390 A3              1467             INC     DPTR
000391 E0              1468             MOVX    A,@DPTR
000392 2418            1469             ADD     A,#018H
000394 F9              1470             MOV     R1,A
000395 E4              1471             CLR     A
000396 3A              1472             ADDC    A,R2
000397 FA              1473             MOV     R2,A
000398 12000000   E    1474             LCALL   ?C?CLDPTR
00039C FF              1475             MOV     R7,A
00039D 90000017        1476             MOV     DPTR,#017H
0003A1 12000000   E    1477             LCALL   ?C?XBPOFF
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    25

0003A5 E0              1478             MOVX    A,@DPTR
0003A6 FE              1479             MOV     R6,A
0003A7 EF              1480             MOV     A,R7
0003A8 C3              1481             CLR     C
0003A9 9E              1482             SUBB    A,R6
0003AA 5004            1483             JNC     ?C0009
                       1484     ;                       {
                       1485                             ; SOURCE LINE # 466
                       1486     ;                               taskYIELD();
                       1487                             ; SOURCE LINE # 467
0003AC 12000000   E    1488             LCALL   _?vPortYield
                       1489     ;                       }
                       1490                             ; SOURCE LINE # 468
                       1491     ;               }
                       1492                             ; SOURCE LINE # 469
                       1493     ;       }
                       1494                             ; SOURCE LINE # 470
0003B0                 1495     ?C0009:
                       1496     ; 
                       1497     ;       return sReturn;
                       1498                             ; SOURCE LINE # 472
0003B0 850083     E    1499             MOV     DPH,?C_XBP
0003B3 850082     E    1500             MOV     DPL,?C_XBP+01H
0003B6 759300     E    1501             MOV     DPX,#?C?XDATASEG
0003B9 E0              1502             MOVX    A,@DPTR
0003BA FE              1503             MOV     R6,A
0003BB A3              1504             INC     DPTR
0003BC E0              1505             MOVX    A,@DPTR
0003BD FF              1506             MOV     R7,A
                       1507     ; }
                       1508                             ; SOURCE LINE # 473
0003BE                 1509     ?C0013:
0003BE 9000001B        1510             MOV     DPTR,#01BH
0003C2 02000000   E    1511             LJMP    ?C?ADDXBP
                       1512     ; END OF _?sTaskCreate
                       1513     
                       1514     ; /*-----------------------------------------------------------*/
                       1515     ; 
                       1516     ; #if( INCLUDE_vTaskDelete == 1 )
                       1517     ; 
                       1518     ;       void vTaskDelete( xTaskHandle pxTaskToDelete ) reentrant
                       1519     ;       {
                       1520     ;       tskTCB *pxTCB;
                       1521     ; 
                       1522     ;               taskENTER_CRITICAL();
                       1523     ;               {
                       1524     ;                       /* If null is passed in here then we are deleting ourselves. */
                       1525     ;                       pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
                       1526     ; 
                       1527     ;                       /* Remove task from the ready list and place in the     terminat
                               ion list.
                       1528     ;                       This will stop the task from be scheduled.  The idle task will c
                               heck
                       1529     ;                       the termination list and free up any memory allocated by the 
                       1530     ;                       scheduler for the TCB and stack. */
                       1531     ;                       vListRemove( &( pxTCB->xGenericListItem ) );
                       1532     ; 
                       1533     ;                       /* Is the task waiting on an event also? */                     
                                                                                                       
                       1534     ;                       if( pxTCB->xEventListItem.pvContainer )
                       1535     ;                       {
                       1536     ;                               vListRemove( &( pxTCB->xEventListItem ) );
                       1537     ;                       }
                       1538     ; 
                       1539     ;                       vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB-
                               >xGenericListItem ) );
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    26

                       1540     ;               }
                       1541     ;               taskEXIT_CRITICAL();
                       1542     ; 
                       1543     ;               /* Force a reschedule if we have just deleted the current task. */
                       1544     ;               if( ( void * ) pxTaskToDelete == NULL )
                       1545     ;               {
                       1546     ;                       taskYIELD();
                       1547     ;               }
                       1548     ;       }
                       1549     ; 
                       1550     ; #endif
                       1551     ; 
                       1552     ; 
                       1553     ; 
                       1554     ; 
                       1555     ; 
                       1556     ; 
                       1557     ; /*-----------------------------------------------------------
                       1558     ;  * TASK CONTROL API documented in task.h
                       1559     ;  *----------------------------------------------------------*/
                       1560     ; 
                       1561     ; #if( INCLUDE_vTaskDelayUntil == 1 )
                       1562     ;       void vTaskDelayUntil( portTickType *pxPreviousWakeTime, portTickType xTimeIncrem
                               ent ) reentrant
                       1563     
------                 1564             RSEG  ?PR?_?vTaskDelayUntil?TASKS
000000                 1565     _?vTaskDelayUntil:
                       1566             USING   0
                       1567                             ; SOURCE LINE # 522
000000 9000FFFC        1568             MOV     DPTR,#0FFFCH
000004 12000000   E    1569             LCALL   ?C?ADDXBP
000008 12000000   E    1570             LCALL   ?C?LSTXDATA
00000C 9000FFFD        1571             MOV     DPTR,#0FFFDH
000010 12000000   E    1572             LCALL   ?C?ADDXBP
000014 EB              1573             MOV     A,R3
000015 F0              1574             MOVX    @DPTR,A
000016 A3              1575             INC     DPTR
000017 EA              1576             MOV     A,R2
000018 F0              1577             MOVX    @DPTR,A
000019 A3              1578             INC     DPTR
00001A E9              1579             MOV     A,R1
00001B F0              1580             MOVX    @DPTR,A
00001C 9000FFFA        1581             MOV     DPTR,#0FFFAH
000020 12000000   E    1582             LCALL   ?C?ADDXBP
                       1583     ;       {
                       1584     ;       portTickType xTimeToWake;
                       1585     ;       portCHAR cAlreadyYielded, cShouldDelay = ( portCHAR ) pdFALSE;
                       1586                             ; SOURCE LINE # 525
000024 90000005        1587             MOV     DPTR,#05H
000028 12000000   E    1588             LCALL   ?C?XBPOFF
00002C E4              1589             CLR     A
00002D F0              1590             MOVX    @DPTR,A
                       1591     ; 
                       1592     ;               vTaskSuspendAll();
                       1593                             ; SOURCE LINE # 527
00002E 12000000   F    1594             LCALL   _?vTaskSuspendAll
                       1595     ;               {
                       1596                             ; SOURCE LINE # 528
                       1597     ;                       /* Generate the tick time at which the task wants to wake. */
                       1598     ;                       xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
                       1599                             ; SOURCE LINE # 530
000032 90000006        1600             MOV     DPTR,#06H
000036 12000000   E    1601             LCALL   ?C?XBPOFF
00003A E0              1602             MOVX    A,@DPTR
00003B FB              1603             MOV     R3,A
00003C A3              1604             INC     DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    27

00003D E0              1605             MOVX    A,@DPTR
00003E FA              1606             MOV     R2,A
00003F A3              1607             INC     DPTR
000040 E0              1608             MOVX    A,@DPTR
000041 F9              1609             MOV     R1,A
000042 12000000   E    1610             LCALL   ?C?LLDPTR
000046 90000009        1611             MOV     DPTR,#09H
00004A 12000000   E    1612             LCALL   ?C?XBPOFF
00004E E0              1613             MOVX    A,@DPTR
00004F F8              1614             MOV     R0,A
000050 A3              1615             INC     DPTR
000051 E0              1616             MOVX    A,@DPTR
000052 F9              1617             MOV     R1,A
000053 A3              1618             INC     DPTR
000054 E0              1619             MOVX    A,@DPTR
000055 FA              1620             MOV     R2,A
000056 A3              1621             INC     DPTR
000057 E0              1622             MOVX    A,@DPTR
000058 2F              1623             ADD     A,R7
000059 FF              1624             MOV     R7,A
00005A EA              1625             MOV     A,R2
00005B 3E              1626             ADDC    A,R6
00005C FE              1627             MOV     R6,A
00005D E9              1628             MOV     A,R1
00005E 3D              1629             ADDC    A,R5
00005F FD              1630             MOV     R5,A
000060 E8              1631             MOV     A,R0
000061 3C              1632             ADDC    A,R4
000062 FC              1633             MOV     R4,A
000063 850083     E    1634             MOV     DPH,?C_XBP
000066 850082     E    1635             MOV     DPL,?C_XBP+01H
000069 759300     E    1636             MOV     DPX,#?C?XDATASEG
00006C 12000000   E    1637             LCALL   ?C?LSTXDATA
                       1638     ; 
                       1639     ;                       if( xTickCount < *pxPreviousWakeTime )
                       1640                             ; SOURCE LINE # 532
000070 90000006        1641             MOV     DPTR,#06H
000074 12000000   E    1642             LCALL   ?C?XBPOFF
000078 E0              1643             MOVX    A,@DPTR
000079 FB              1644             MOV     R3,A
00007A A3              1645             INC     DPTR
00007B E0              1646             MOVX    A,@DPTR
00007C FA              1647             MOV     R2,A
00007D A3              1648             INC     DPTR
00007E E0              1649             MOVX    A,@DPTR
00007F F9              1650             MOV     R1,A
000080 12000000   E    1651             LCALL   ?C?LLDPTR
000084 90000000   F    1652             MOV     DPTR,#xTickCount
000088 E0              1653             MOVX    A,@DPTR
000089 F8              1654             MOV     R0,A
00008A A3              1655             INC     DPTR
00008B E0              1656             MOVX    A,@DPTR
00008C F9              1657             MOV     R1,A
00008D A3              1658             INC     DPTR
00008E E0              1659             MOVX    A,@DPTR
00008F FA              1660             MOV     R2,A
000090 A3              1661             INC     DPTR
000091 E0              1662             MOVX    A,@DPTR
000092 FB              1663             MOV     R3,A
000093 C3              1664             CLR     C
000094 12000000   E    1665             LCALL   ?C?ULCMP
000098 505D            1666             JNC     ?C0014
                       1667     ;                       {
                       1668                             ; SOURCE LINE # 533
                       1669     ;                               /* The tick count has overflowed since this function was
                                
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    28

                       1670     ;                               lasted called.  In this case the only time we should eve
                               r 
                       1671     ;                               actually delay is if the wake time has also     overflow
                               ed, 
                       1672     ;                               and the wake time is greater than the tick time.  When t
                               his 
                       1673     ;                               is the case it is as if neither time had overflowed. */
                       1674     ;                               if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWa
                               ke > xTickCount ) )
                       1675                             ; SOURCE LINE # 539
00009A 90000006        1676             MOV     DPTR,#06H
00009E 12000000   E    1677             LCALL   ?C?XBPOFF
0000A2 E0              1678             MOVX    A,@DPTR
0000A3 FB              1679             MOV     R3,A
0000A4 A3              1680             INC     DPTR
0000A5 E0              1681             MOVX    A,@DPTR
0000A6 FA              1682             MOV     R2,A
0000A7 A3              1683             INC     DPTR
0000A8 E0              1684             MOVX    A,@DPTR
0000A9 F9              1685             MOV     R1,A
0000AA 12000000   E    1686             LCALL   ?C?LLDPTR
0000AE 850083     E    1687             MOV     DPH,?C_XBP
0000B1 850082     E    1688             MOV     DPL,?C_XBP+01H
0000B4 759300     E    1689             MOV     DPX,#?C?XDATASEG
0000B7 E0              1690             MOVX    A,@DPTR
0000B8 F8              1691             MOV     R0,A
0000B9 A3              1692             INC     DPTR
0000BA E0              1693             MOVX    A,@DPTR
0000BB F9              1694             MOV     R1,A
0000BC A3              1695             INC     DPTR
0000BD E0              1696             MOVX    A,@DPTR
0000BE FA              1697             MOV     R2,A
0000BF A3              1698             INC     DPTR
0000C0 E0              1699             MOVX    A,@DPTR
0000C1 FB              1700             MOV     R3,A
0000C2 C3              1701             CLR     C
0000C3 12000000   E    1702             LCALL   ?C?ULCMP
0000C7 4003            1703             JC      $ + 5H
0000C9 010000     F    1704             AJMP    ?C0016
0000CC 90000000   F    1705             MOV     DPTR,#xTickCount
0000D0 E0              1706             MOVX    A,@DPTR
0000D1 FC              1707             MOV     R4,A
0000D2 A3              1708             INC     DPTR
0000D3 E0              1709             MOVX    A,@DPTR
0000D4 FD              1710             MOV     R5,A
0000D5 A3              1711             INC     DPTR
0000D6 E0              1712             MOVX    A,@DPTR
0000D7 FE              1713             MOV     R6,A
0000D8 A3              1714             INC     DPTR
0000D9 E0              1715             MOVX    A,@DPTR
0000DA FF              1716             MOV     R7,A
0000DB 850083     E    1717             MOV     DPH,?C_XBP
0000DE 850082     E    1718             MOV     DPL,?C_XBP+01H
0000E1 759300     E    1719             MOV     DPX,#?C?XDATASEG
0000E4 E0              1720             MOVX    A,@DPTR
0000E5 F8              1721             MOV     R0,A
0000E6 A3              1722             INC     DPTR
0000E7 E0              1723             MOVX    A,@DPTR
0000E8 F9              1724             MOV     R1,A
0000E9 A3              1725             INC     DPTR
0000EA E0              1726             MOVX    A,@DPTR
0000EB FA              1727             MOV     R2,A
0000EC A3              1728             INC     DPTR
0000ED E0              1729             MOVX    A,@DPTR
0000EE FB              1730             MOV     R3,A
0000EF 12000000   E    1731             LCALL   ?C?ULCMP
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    29

0000F3 4066            1732             JC      ?C0016
                       1733     ;                               {
                       1734                             ; SOURCE LINE # 540
                       1735     ;                                       cShouldDelay = ( portCHAR ) pdTRUE;
                       1736                             ; SOURCE LINE # 541
                       1737     ;                               }
                       1738                             ; SOURCE LINE # 542
                       1739     ;                       }
                       1740                             ; SOURCE LINE # 543
0000F5 8059            1741             SJMP    ?C0121
0000F7                 1742     ?C0014:
                       1743     ;                       else
                       1744     ;                       {
                       1745                             ; SOURCE LINE # 545
                       1746     ;                               /* The tick time has not overflowed.  In this case we wi
                               ll
                       1747     ;                               delay if either the wake time has overflowed, and/or the
                       1748     ;                               tick time is less than the wake time. */
                       1749     ;                               if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWa
                               ke > xTickCount ) )
                       1750                             ; SOURCE LINE # 549
0000F7 90000006        1751             MOV     DPTR,#06H
0000FB 12000000   E    1752             LCALL   ?C?XBPOFF
0000FF E0              1753             MOVX    A,@DPTR
000100 FB              1754             MOV     R3,A
000101 A3              1755             INC     DPTR
000102 E0              1756             MOVX    A,@DPTR
000103 FA              1757             MOV     R2,A
000104 A3              1758             INC     DPTR
000105 E0              1759             MOVX    A,@DPTR
000106 F9              1760             MOV     R1,A
000107 12000000   E    1761             LCALL   ?C?LLDPTR
00010B 850083     E    1762             MOV     DPH,?C_XBP
00010E 850082     E    1763             MOV     DPL,?C_XBP+01H
000111 759300     E    1764             MOV     DPX,#?C?XDATASEG
000114 E0              1765             MOVX    A,@DPTR
000115 F8              1766             MOV     R0,A
000116 A3              1767             INC     DPTR
000117 E0              1768             MOVX    A,@DPTR
000118 F9              1769             MOV     R1,A
000119 A3              1770             INC     DPTR
00011A E0              1771             MOVX    A,@DPTR
00011B FA              1772             MOV     R2,A
00011C A3              1773             INC     DPTR
00011D E0              1774             MOVX    A,@DPTR
00011E FB              1775             MOV     R3,A
00011F C3              1776             CLR     C
000120 12000000   E    1777             LCALL   ?C?ULCMP
000124 402A            1778             JC      ?C0018
000126 90000000   F    1779             MOV     DPTR,#xTickCount
00012A E0              1780             MOVX    A,@DPTR
00012B FC              1781             MOV     R4,A
00012C A3              1782             INC     DPTR
00012D E0              1783             MOVX    A,@DPTR
00012E FD              1784             MOV     R5,A
00012F A3              1785             INC     DPTR
000130 E0              1786             MOVX    A,@DPTR
000131 FE              1787             MOV     R6,A
000132 A3              1788             INC     DPTR
000133 E0              1789             MOVX    A,@DPTR
000134 FF              1790             MOV     R7,A
000135 850083     E    1791             MOV     DPH,?C_XBP
000138 850082     E    1792             MOV     DPL,?C_XBP+01H
00013B 759300     E    1793             MOV     DPX,#?C?XDATASEG
00013E E0              1794             MOVX    A,@DPTR
00013F F8              1795             MOV     R0,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    30

000140 A3              1796             INC     DPTR
000141 E0              1797             MOVX    A,@DPTR
000142 F9              1798             MOV     R1,A
000143 A3              1799             INC     DPTR
000144 E0              1800             MOVX    A,@DPTR
000145 FA              1801             MOV     R2,A
000146 A3              1802             INC     DPTR
000147 E0              1803             MOVX    A,@DPTR
000148 FB              1804             MOV     R3,A
000149 D3              1805             SETB    C
00014A 12000000   E    1806             LCALL   ?C?ULCMP
00014E 400B            1807             JC      ?C0016
000150                 1808     ?C0018:
                       1809     ;                               {
                       1810                             ; SOURCE LINE # 550
                       1811     ;                                       cShouldDelay = ( portCHAR ) pdTRUE;
                       1812                             ; SOURCE LINE # 551
000150                 1813     ?C0121:
000150 90000005        1814             MOV     DPTR,#05H
000154 12000000   E    1815             LCALL   ?C?XBPOFF
000158 7401            1816             MOV     A,#01H
00015A F0              1817             MOVX    @DPTR,A
                       1818     ;                               }
                       1819                             ; SOURCE LINE # 552
                       1820     ;                       }
                       1821                             ; SOURCE LINE # 553
00015B                 1822     ?C0016:
                       1823     ; 
                       1824     ;                       /* Update the wake time ready for the next call. */
                       1825     ;                       *pxPreviousWakeTime = xTimeToWake;
                       1826                             ; SOURCE LINE # 556
00015B 850083     E    1827             MOV     DPH,?C_XBP
00015E 850082     E    1828             MOV     DPL,?C_XBP+01H
000161 759300     E    1829             MOV     DPX,#?C?XDATASEG
000164 E0              1830             MOVX    A,@DPTR
000165 FC              1831             MOV     R4,A
000166 A3              1832             INC     DPTR
000167 E0              1833             MOVX    A,@DPTR
000168 FD              1834             MOV     R5,A
000169 A3              1835             INC     DPTR
00016A E0              1836             MOVX    A,@DPTR
00016B FE              1837             MOV     R6,A
00016C A3              1838             INC     DPTR
00016D E0              1839             MOVX    A,@DPTR
00016E FF              1840             MOV     R7,A
00016F 90000006        1841             MOV     DPTR,#06H
000173 12000000   E    1842             LCALL   ?C?XBPOFF
000177 E0              1843             MOVX    A,@DPTR
000178 FB              1844             MOV     R3,A
000179 A3              1845             INC     DPTR
00017A E0              1846             MOVX    A,@DPTR
00017B FA              1847             MOV     R2,A
00017C A3              1848             INC     DPTR
00017D E0              1849             MOVX    A,@DPTR
00017E F9              1850             MOV     R1,A
00017F 12000000   E    1851             LCALL   ?C?LSTPTR
                       1852     ; 
                       1853     ;                       if( cShouldDelay )
                       1854                             ; SOURCE LINE # 558
000183 90000005        1855             MOV     DPTR,#05H
000187 12000000   E    1856             LCALL   ?C?XBPOFF
00018B E0              1857             MOVX    A,@DPTR
00018C 7003            1858             JNZ     $ + 5H
00018E 010000     F    1859             AJMP    ?C0019
                       1860     ;                       {
                       1861                             ; SOURCE LINE # 559
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    31

                       1862     ;                               /* We must remove ourselves from the ready list before a
                               dding 
                       1863     ;                               ourselves to the blocked list as the same list item is u
                               sed for 
                       1864     ;                               both lists. */
                       1865     ;                               vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericLi
                               stItem ) );
                       1866                             ; SOURCE LINE # 563
000191 90000000   F    1867             MOV     DPTR,#pxCurrentTCB
000195 E0              1868             MOVX    A,@DPTR
000196 FB              1869             MOV     R3,A
000197 A3              1870             INC     DPTR
000198 E0              1871             MOVX    A,@DPTR
000199 FA              1872             MOV     R2,A
00019A A3              1873             INC     DPTR
00019B E0              1874             MOVX    A,@DPTR
00019C 2419            1875             ADD     A,#019H
00019E F9              1876             MOV     R1,A
00019F E4              1877             CLR     A
0001A0 3A              1878             ADDC    A,R2
0001A1 FA              1879             MOV     R2,A
0001A2 12000000   E    1880             LCALL   _?vListRemove
                       1881     ; 
                       1882     ;                               /* The list item will be inserted in wake time order. */
                       1883     ;                               listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListIt
                               em ), xTimeToWake );
                       1884                             ; SOURCE LINE # 566
0001A6 850083     E    1885             MOV     DPH,?C_XBP
0001A9 850082     E    1886             MOV     DPL,?C_XBP+01H
0001AC 759300     E    1887             MOV     DPX,#?C?XDATASEG
0001AF E0              1888             MOVX    A,@DPTR
0001B0 FC              1889             MOV     R4,A
0001B1 A3              1890             INC     DPTR
0001B2 E0              1891             MOVX    A,@DPTR
0001B3 FD              1892             MOV     R5,A
0001B4 A3              1893             INC     DPTR
0001B5 E0              1894             MOVX    A,@DPTR
0001B6 FE              1895             MOV     R6,A
0001B7 A3              1896             INC     DPTR
0001B8 E0              1897             MOVX    A,@DPTR
0001B9 FF              1898             MOV     R7,A
0001BA 90000000   F    1899             MOV     DPTR,#pxCurrentTCB
0001BE E0              1900             MOVX    A,@DPTR
0001BF FB              1901             MOV     R3,A
0001C0 A3              1902             INC     DPTR
0001C1 E0              1903             MOVX    A,@DPTR
0001C2 FA              1904             MOV     R2,A
0001C3 A3              1905             INC     DPTR
0001C4 E0              1906             MOVX    A,@DPTR
0001C5 2419            1907             ADD     A,#019H
0001C7 F9              1908             MOV     R1,A
0001C8 E4              1909             CLR     A
0001C9 3A              1910             ADDC    A,R2
0001CA FA              1911             MOV     R2,A
0001CB 12000000   E    1912             LCALL   ?C?LSTPTR
                       1913     ; 
                       1914     ;                               if( xTimeToWake < xTickCount )
                       1915                             ; SOURCE LINE # 568
0001CF 90000000   F    1916             MOV     DPTR,#xTickCount
0001D3 E0              1917             MOVX    A,@DPTR
0001D4 FC              1918             MOV     R4,A
0001D5 A3              1919             INC     DPTR
0001D6 E0              1920             MOVX    A,@DPTR
0001D7 FD              1921             MOV     R5,A
0001D8 A3              1922             INC     DPTR
0001D9 E0              1923             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    32

0001DA FE              1924             MOV     R6,A
0001DB A3              1925             INC     DPTR
0001DC E0              1926             MOVX    A,@DPTR
0001DD FF              1927             MOV     R7,A
0001DE 850083     E    1928             MOV     DPH,?C_XBP
0001E1 850082     E    1929             MOV     DPL,?C_XBP+01H
0001E4 759300     E    1930             MOV     DPX,#?C?XDATASEG
0001E7 E0              1931             MOVX    A,@DPTR
0001E8 F8              1932             MOV     R0,A
0001E9 A3              1933             INC     DPTR
0001EA E0              1934             MOVX    A,@DPTR
0001EB F9              1935             MOV     R1,A
0001EC A3              1936             INC     DPTR
0001ED E0              1937             MOVX    A,@DPTR
0001EE FA              1938             MOV     R2,A
0001EF A3              1939             INC     DPTR
0001F0 E0              1940             MOVX    A,@DPTR
0001F1 FB              1941             MOV     R3,A
0001F2 C3              1942             CLR     C
0001F3 12000000   E    1943             LCALL   ?C?ULCMP
0001F7 90000000   F    1944             MOV     DPTR,#pxCurrentTCB
0001FB E0              1945             MOVX    A,@DPTR
0001FC FB              1946             MOV     R3,A
0001FD 5021            1947             JNC     ?C0020
                       1948     ;                               {
                       1949                             ; SOURCE LINE # 569
                       1950     ;                                       /* Wake time has overflowed.  Place this item in
                                the 
                       1951     ;                                       overflow list. */
                       1952     ;                                       vListInsert( ( xList * ) pxOverflowDelayedTaskLi
                               st, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
                       1953                             ; SOURCE LINE # 572
0001FF A3              1954             INC     DPTR
000200 E0              1955             MOVX    A,@DPTR
000201 FA              1956             MOV     R2,A
000202 A3              1957             INC     DPTR
000203 E0              1958             MOVX    A,@DPTR
000204 2419            1959             ADD     A,#019H
000206 F9              1960             MOV     R1,A
000207 E4              1961             CLR     A
000208 3A              1962             ADDC    A,R2
000209 FA              1963             MOV     R2,A
00020A 9000FFFD        1964             MOV     DPTR,#0FFFDH
00020E 12000000   E    1965             LCALL   ?C?ADDXBP
000212 EB              1966             MOV     A,R3
000213 F0              1967             MOVX    @DPTR,A
000214 A3              1968             INC     DPTR
000215 EA              1969             MOV     A,R2
000216 F0              1970             MOVX    @DPTR,A
000217 A3              1971             INC     DPTR
000218 E9              1972             MOV     A,R1
000219 F0              1973             MOVX    @DPTR,A
00021A 90000000   F    1974             MOV     DPTR,#pxOverflowDelayedTaskList
                       1975     ;                               }
                       1976                             ; SOURCE LINE # 573
00021E 801F            1977             SJMP    ?C0120
000220                 1978     ?C0020:
                       1979     ;                               else
                       1980     ;                               {
                       1981                             ; SOURCE LINE # 575
                       1982     ;                                       /* The wake time has not overflowed, so we can u
                               se the 
                       1983     ;                                       current block list. */
                       1984     ;                                       vListInsert( ( xList * ) pxDelayedTaskList, ( xL
                               istItem * ) &( pxCurrentTCB->xGenericListItem ) );
                       1985                             ; SOURCE LINE # 578
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    33

000220 A3              1986             INC     DPTR
000221 E0              1987             MOVX    A,@DPTR
000222 FA              1988             MOV     R2,A
000223 A3              1989             INC     DPTR
000224 E0              1990             MOVX    A,@DPTR
000225 2419            1991             ADD     A,#019H
000227 F9              1992             MOV     R1,A
000228 E4              1993             CLR     A
000229 3A              1994             ADDC    A,R2
00022A FA              1995             MOV     R2,A
00022B 9000FFFD        1996             MOV     DPTR,#0FFFDH
00022F 12000000   E    1997             LCALL   ?C?ADDXBP
000233 EB              1998             MOV     A,R3
000234 F0              1999             MOVX    @DPTR,A
000235 A3              2000             INC     DPTR
000236 EA              2001             MOV     A,R2
000237 F0              2002             MOVX    @DPTR,A
000238 A3              2003             INC     DPTR
000239 E9              2004             MOV     A,R1
00023A F0              2005             MOVX    @DPTR,A
00023B 90000000   F    2006             MOV     DPTR,#pxDelayedTaskList
00023F                 2007     ?C0120:
00023F E0              2008             MOVX    A,@DPTR
000240 FB              2009             MOV     R3,A
000241 A3              2010             INC     DPTR
000242 E0              2011             MOVX    A,@DPTR
000243 FA              2012             MOV     R2,A
000244 A3              2013             INC     DPTR
000245 E0              2014             MOVX    A,@DPTR
000246 F9              2015             MOV     R1,A
000247 12000000   E    2016             LCALL   _?vListInsert
                       2017     ;                               }
                       2018                             ; SOURCE LINE # 579
                       2019     ;                       }
                       2020                             ; SOURCE LINE # 580
00024B                 2021     ?C0019:
                       2022     ;               }
                       2023                             ; SOURCE LINE # 581
                       2024     ;               cAlreadyYielded = cTaskResumeAll();
                       2025                             ; SOURCE LINE # 582
00024B 12000000   F    2026             LCALL   _?cTaskResumeAll
00024F 90000004        2027             MOV     DPTR,#04H
000253 12000000   E    2028             LCALL   ?C?XBPOFF
000257 EF              2029             MOV     A,R7
000258 F0              2030             MOVX    @DPTR,A
                       2031     ; 
                       2032     ;               /* Force a reschedule if cTaskResumeAll has not already done so, we may 
                       2033     ;               have put ourselves to sleep. */
                       2034     ;               if( !cAlreadyYielded )
                       2035                             ; SOURCE LINE # 586
000259 90000004        2036             MOV     DPTR,#04H
00025D 12000000   E    2037             LCALL   ?C?XBPOFF
000261 E0              2038             MOVX    A,@DPTR
000262 7004            2039             JNZ     ?C0023
                       2040     ;               {
                       2041                             ; SOURCE LINE # 587
                       2042     ;                       taskYIELD(); 
                       2043                             ; SOURCE LINE # 588
000264 12000000   E    2044             LCALL   _?vPortYield
                       2045     ;               }
                       2046                             ; SOURCE LINE # 589
                       2047     ;       }
                       2048                             ; SOURCE LINE # 590
000268                 2049     ?C0023:
000268 9000000D        2050             MOV     DPTR,#0DH
00026C 02000000   E    2051             LJMP    ?C?ADDXBP
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    34

                       2052     ; END OF _?vTaskDelayUntil
                       2053     
                       2054     ; #endif
                       2055     ; /*-----------------------------------------------------------*/
                       2056     ; 
                       2057     ; #if( INCLUDE_vTaskDelay == 1 )
                       2058     ;       void vTaskDelay( portTickType xTicksToDelay ) reentrant
                       2059     
------                 2060             RSEG  ?PR?_?vTaskDelay?TASKS
000000                 2061     _?vTaskDelay:
                       2062             USING   0
                       2063                             ; SOURCE LINE # 595
000000 9000FFFC        2064             MOV     DPTR,#0FFFCH
000004 12000000   E    2065             LCALL   ?C?ADDXBP
000008 12000000   E    2066             LCALL   ?C?LSTXDATA
00000C 9000FFFB        2067             MOV     DPTR,#0FFFBH
000010 12000000   E    2068             LCALL   ?C?ADDXBP
                       2069     ;       {
                       2070     ;       portTickType xTimeToWake;
                       2071     ;       signed portCHAR cAlreadyYielded = pdFALSE;
                       2072                             ; SOURCE LINE # 598
000014 90000004        2073             MOV     DPTR,#04H
000018 12000000   E    2074             LCALL   ?C?XBPOFF
00001C E4              2075             CLR     A
00001D F0              2076             MOVX    @DPTR,A
                       2077     ; 
                       2078     ;               /* A delay time of zero just forces a reschedule. */
                       2079     ;               if( xTicksToDelay > ( portTickType ) 0 )
                       2080                             ; SOURCE LINE # 601
00001E FF              2081             MOV     R7,A
00001F FE              2082             MOV     R6,A
000020 FD              2083             MOV     R5,A
000021 FC              2084             MOV     R4,A
000022 90000005        2085             MOV     DPTR,#05H
000026 12000000   E    2086             LCALL   ?C?XBPOFF
00002A E0              2087             MOVX    A,@DPTR
00002B F8              2088             MOV     R0,A
00002C A3              2089             INC     DPTR
00002D E0              2090             MOVX    A,@DPTR
00002E F9              2091             MOV     R1,A
00002F A3              2092             INC     DPTR
000030 E0              2093             MOVX    A,@DPTR
000031 FA              2094             MOV     R2,A
000032 A3              2095             INC     DPTR
000033 E0              2096             MOVX    A,@DPTR
000034 FB              2097             MOV     R3,A
000035 D3              2098             SETB    C
000036 12000000   E    2099             LCALL   ?C?ULCMP
00003A 5003            2100             JNC     $ + 5H
00003C 010000     F    2101             AJMP    ?C0024
                       2102     ;               {
                       2103                             ; SOURCE LINE # 602
                       2104     ;                       vTaskSuspendAll();
                       2105                             ; SOURCE LINE # 603
00003F 12000000   F    2106             LCALL   _?vTaskSuspendAll
                       2107     ;                       {
                       2108                             ; SOURCE LINE # 604
                       2109     ;                               /* A task that is removed from the event list while the 
                       2110     ;                               scheduler is suspended will not get placed in the ready 
                       2111     ;                               list or removed from the blocked list until the schedule
                               r 
                       2112     ;                               is resumed.  
                       2113     ;                               
                       2114     ;                               This task cannot be in an event list as it is the curren
                               tly 
                       2115     ;                               executing task. */
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    35

                       2116     ; 
                       2117     ;                               /* Calculate the time to wake - this may overflow but th
                               is is 
                       2118     ;                               not a problem. */
                       2119     ;                               xTimeToWake = xTickCount + xTicksToDelay;
                       2120                             ; SOURCE LINE # 615
000043 90000005        2121             MOV     DPTR,#05H
000047 12000000   E    2122             LCALL   ?C?XBPOFF
00004B E0              2123             MOVX    A,@DPTR
00004C FC              2124             MOV     R4,A
00004D A3              2125             INC     DPTR
00004E E0              2126             MOVX    A,@DPTR
00004F FD              2127             MOV     R5,A
000050 A3              2128             INC     DPTR
000051 E0              2129             MOVX    A,@DPTR
000052 FE              2130             MOV     R6,A
000053 A3              2131             INC     DPTR
000054 E0              2132             MOVX    A,@DPTR
000055 FF              2133             MOV     R7,A
000056 90000000   F    2134             MOV     DPTR,#xTickCount
00005A E0              2135             MOVX    A,@DPTR
00005B F8              2136             MOV     R0,A
00005C A3              2137             INC     DPTR
00005D E0              2138             MOVX    A,@DPTR
00005E F9              2139             MOV     R1,A
00005F A3              2140             INC     DPTR
000060 E0              2141             MOVX    A,@DPTR
000061 FA              2142             MOV     R2,A
000062 A3              2143             INC     DPTR
000063 E0              2144             MOVX    A,@DPTR
000064 2F              2145             ADD     A,R7
000065 FF              2146             MOV     R7,A
000066 EA              2147             MOV     A,R2
000067 3E              2148             ADDC    A,R6
000068 FE              2149             MOV     R6,A
000069 E9              2150             MOV     A,R1
00006A 3D              2151             ADDC    A,R5
00006B FD              2152             MOV     R5,A
00006C E8              2153             MOV     A,R0
00006D 3C              2154             ADDC    A,R4
00006E FC              2155             MOV     R4,A
00006F 850083     E    2156             MOV     DPH,?C_XBP
000072 850082     E    2157             MOV     DPL,?C_XBP+01H
000075 759300     E    2158             MOV     DPX,#?C?XDATASEG
000078 12000000   E    2159             LCALL   ?C?LSTXDATA
                       2160     ; 
                       2161     ;                               /* We must remove ourselves from the ready list before a
                               dding 
                       2162     ;                               ourselves to the blocked list as the same list item is u
                               sed for 
                       2163     ;                               both lists. */
                       2164     ;                               vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericLi
                               stItem ) );
                       2165                             ; SOURCE LINE # 620
00007C 90000000   F    2166             MOV     DPTR,#pxCurrentTCB
000080 E0              2167             MOVX    A,@DPTR
000081 FB              2168             MOV     R3,A
000082 A3              2169             INC     DPTR
000083 E0              2170             MOVX    A,@DPTR
000084 FA              2171             MOV     R2,A
000085 A3              2172             INC     DPTR
000086 E0              2173             MOVX    A,@DPTR
000087 2419            2174             ADD     A,#019H
000089 F9              2175             MOV     R1,A
00008A E4              2176             CLR     A
00008B 3A              2177             ADDC    A,R2
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    36

00008C FA              2178             MOV     R2,A
00008D 12000000   E    2179             LCALL   _?vListRemove
                       2180     ; 
                       2181     ;                               /* The list item will be inserted in wake time order. */
                       2182     ;                               listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListIt
                               em ), xTimeToWake );
                       2183                             ; SOURCE LINE # 623
000091 850083     E    2184             MOV     DPH,?C_XBP
000094 850082     E    2185             MOV     DPL,?C_XBP+01H
000097 759300     E    2186             MOV     DPX,#?C?XDATASEG
00009A E0              2187             MOVX    A,@DPTR
00009B FC              2188             MOV     R4,A
00009C A3              2189             INC     DPTR
00009D E0              2190             MOVX    A,@DPTR
00009E FD              2191             MOV     R5,A
00009F A3              2192             INC     DPTR
0000A0 E0              2193             MOVX    A,@DPTR
0000A1 FE              2194             MOV     R6,A
0000A2 A3              2195             INC     DPTR
0000A3 E0              2196             MOVX    A,@DPTR
0000A4 FF              2197             MOV     R7,A
0000A5 90000000   F    2198             MOV     DPTR,#pxCurrentTCB
0000A9 E0              2199             MOVX    A,@DPTR
0000AA FB              2200             MOV     R3,A
0000AB A3              2201             INC     DPTR
0000AC E0              2202             MOVX    A,@DPTR
0000AD FA              2203             MOV     R2,A
0000AE A3              2204             INC     DPTR
0000AF E0              2205             MOVX    A,@DPTR
0000B0 2419            2206             ADD     A,#019H
0000B2 F9              2207             MOV     R1,A
0000B3 E4              2208             CLR     A
0000B4 3A              2209             ADDC    A,R2
0000B5 FA              2210             MOV     R2,A
0000B6 12000000   E    2211             LCALL   ?C?LSTPTR
                       2212     ; 
                       2213     ;                               if( xTimeToWake < xTickCount )
                       2214                             ; SOURCE LINE # 625
0000BA 90000000   F    2215             MOV     DPTR,#xTickCount
0000BE E0              2216             MOVX    A,@DPTR
0000BF FC              2217             MOV     R4,A
0000C0 A3              2218             INC     DPTR
0000C1 E0              2219             MOVX    A,@DPTR
0000C2 FD              2220             MOV     R5,A
0000C3 A3              2221             INC     DPTR
0000C4 E0              2222             MOVX    A,@DPTR
0000C5 FE              2223             MOV     R6,A
0000C6 A3              2224             INC     DPTR
0000C7 E0              2225             MOVX    A,@DPTR
0000C8 FF              2226             MOV     R7,A
0000C9 850083     E    2227             MOV     DPH,?C_XBP
0000CC 850082     E    2228             MOV     DPL,?C_XBP+01H
0000CF 759300     E    2229             MOV     DPX,#?C?XDATASEG
0000D2 E0              2230             MOVX    A,@DPTR
0000D3 F8              2231             MOV     R0,A
0000D4 A3              2232             INC     DPTR
0000D5 E0              2233             MOVX    A,@DPTR
0000D6 F9              2234             MOV     R1,A
0000D7 A3              2235             INC     DPTR
0000D8 E0              2236             MOVX    A,@DPTR
0000D9 FA              2237             MOV     R2,A
0000DA A3              2238             INC     DPTR
0000DB E0              2239             MOVX    A,@DPTR
0000DC FB              2240             MOV     R3,A
0000DD C3              2241             CLR     C
0000DE 12000000   E    2242             LCALL   ?C?ULCMP
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    37

0000E2 90000000   F    2243             MOV     DPTR,#pxCurrentTCB
0000E6 E0              2244             MOVX    A,@DPTR
0000E7 FB              2245             MOV     R3,A
0000E8 5021            2246             JNC     ?C0025
                       2247     ;                               {
                       2248                             ; SOURCE LINE # 626
                       2249     ;                                       /* Wake time has overflowed.  Place this item in
                                the 
                       2250     ;                                       overflow list. */
                       2251     ;                                       vListInsert( ( xList * ) pxOverflowDelayedTaskLi
                               st, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
                       2252                             ; SOURCE LINE # 629
0000EA A3              2253             INC     DPTR
0000EB E0              2254             MOVX    A,@DPTR
0000EC FA              2255             MOV     R2,A
0000ED A3              2256             INC     DPTR
0000EE E0              2257             MOVX    A,@DPTR
0000EF 2419            2258             ADD     A,#019H
0000F1 F9              2259             MOV     R1,A
0000F2 E4              2260             CLR     A
0000F3 3A              2261             ADDC    A,R2
0000F4 FA              2262             MOV     R2,A
0000F5 9000FFFD        2263             MOV     DPTR,#0FFFDH
0000F9 12000000   E    2264             LCALL   ?C?ADDXBP
0000FD EB              2265             MOV     A,R3
0000FE F0              2266             MOVX    @DPTR,A
0000FF A3              2267             INC     DPTR
000100 EA              2268             MOV     A,R2
000101 F0              2269             MOVX    @DPTR,A
000102 A3              2270             INC     DPTR
000103 E9              2271             MOV     A,R1
000104 F0              2272             MOVX    @DPTR,A
000105 90000000   F    2273             MOV     DPTR,#pxOverflowDelayedTaskList
                       2274     ;                               }
                       2275                             ; SOURCE LINE # 630
000109 801F            2276             SJMP    ?C0122
00010B                 2277     ?C0025:
                       2278     ;                               else
                       2279     ;                               {
                       2280                             ; SOURCE LINE # 632
                       2281     ;                                       /* The wake time has not overflowed, so we can u
                               se the 
                       2282     ;                                       current block list. */
                       2283     ;                                       vListInsert( ( xList * ) pxDelayedTaskList, ( xL
                               istItem * ) &( pxCurrentTCB->xGenericListItem ) );
                       2284                             ; SOURCE LINE # 635
00010B A3              2285             INC     DPTR
00010C E0              2286             MOVX    A,@DPTR
00010D FA              2287             MOV     R2,A
00010E A3              2288             INC     DPTR
00010F E0              2289             MOVX    A,@DPTR
000110 2419            2290             ADD     A,#019H
000112 F9              2291             MOV     R1,A
000113 E4              2292             CLR     A
000114 3A              2293             ADDC    A,R2
000115 FA              2294             MOV     R2,A
000116 9000FFFD        2295             MOV     DPTR,#0FFFDH
00011A 12000000   E    2296             LCALL   ?C?ADDXBP
00011E EB              2297             MOV     A,R3
00011F F0              2298             MOVX    @DPTR,A
000120 A3              2299             INC     DPTR
000121 EA              2300             MOV     A,R2
000122 F0              2301             MOVX    @DPTR,A
000123 A3              2302             INC     DPTR
000124 E9              2303             MOV     A,R1
000125 F0              2304             MOVX    @DPTR,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    38

000126 90000000   F    2305             MOV     DPTR,#pxDelayedTaskList
00012A                 2306     ?C0122:
00012A E0              2307             MOVX    A,@DPTR
00012B FB              2308             MOV     R3,A
00012C A3              2309             INC     DPTR
00012D E0              2310             MOVX    A,@DPTR
00012E FA              2311             MOV     R2,A
00012F A3              2312             INC     DPTR
000130 E0              2313             MOVX    A,@DPTR
000131 F9              2314             MOV     R1,A
000132 12000000   E    2315             LCALL   _?vListInsert
                       2316     ;                               }
                       2317                             ; SOURCE LINE # 636
000136                 2318     ?C0026:
                       2319     ;                       }
                       2320                             ; SOURCE LINE # 637
                       2321     ;                       cAlreadyYielded = cTaskResumeAll();
                       2322                             ; SOURCE LINE # 638
000136 12000000   F    2323             LCALL   _?cTaskResumeAll
00013A 90000004        2324             MOV     DPTR,#04H
00013E 12000000   E    2325             LCALL   ?C?XBPOFF
000142 EF              2326             MOV     A,R7
000143 F0              2327             MOVX    @DPTR,A
                       2328     ;               }
                       2329                             ; SOURCE LINE # 639
000144                 2330     ?C0024:
                       2331     ;               
                       2332     ;               /* Force a reschedule if cTaskResumeAll has not already done so, we may 
                       2333     ;               have put ourselves to sleep. */
                       2334     ;               if( !cAlreadyYielded )
                       2335                             ; SOURCE LINE # 643
000144 90000004        2336             MOV     DPTR,#04H
000148 12000000   E    2337             LCALL   ?C?XBPOFF
00014C E0              2338             MOVX    A,@DPTR
00014D 7004            2339             JNZ     ?C0028
                       2340     ;               {
                       2341                             ; SOURCE LINE # 644
                       2342     ;                       taskYIELD(); 
                       2343                             ; SOURCE LINE # 645
00014F 12000000   E    2344             LCALL   _?vPortYield
                       2345     ;               }
                       2346                             ; SOURCE LINE # 646
                       2347     ;       }
                       2348                             ; SOURCE LINE # 647
000153                 2349     ?C0028:
000153 90000009        2350             MOV     DPTR,#09H
000157 02000000   E    2351             LJMP    ?C?ADDXBP
                       2352     ; END OF _?vTaskDelay
                       2353     
                       2354     ; #endif
                       2355     ; /*-----------------------------------------------------------*/
                       2356     ; 
                       2357     ; #if( INCLUDE_ucTaskPriorityGet == 1 )
                       2358     ; 
                       2359     ;       unsigned portCHAR ucTaskPriorityGet( xTaskHandle pxTask ) reentrant
                       2360     ;       {
                       2361     ;       tskTCB *pxTCB;
                       2362     ;       unsigned portCHAR ucReturn;
                       2363     ; 
                       2364     ;               taskENTER_CRITICAL();
                       2365     ;               {
                       2366     ;                       /* If null is passed in here then we are changing the
                       2367     ;                       priority of the calling function. */
                       2368     ;                       pxTCB = prvGetTCBFromHandle( pxTask );
                       2369     ;                       ucReturn = pxTCB->ucPriority;
                       2370     ;               }
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    39

                       2371     ;               taskEXIT_CRITICAL();
                       2372     ; 
                       2373     ;               return ucReturn;
                       2374     ;       }
                       2375     ; 
                       2376     ; #endif
                       2377     ; /*-----------------------------------------------------------*/
                       2378     ; 
                       2379     ; #if( INCLUDE_vTaskPrioritySet == 1 )
                       2380     ; 
                       2381     ;       void vTaskPrioritySet( xTaskHandle pxTask, unsigned portCHAR ucNewPriority ) ree
                               ntrant
                       2382     ;       {
                       2383     ;       tskTCB *pxTCB;
                       2384     ;       unsigned portCHAR ucCurrentPriority;
                       2385     ; 
                       2386     ;               /* Ensure the new priority is valid. */
                       2387     ;               if( ucNewPriority >= portMAX_PRIORITIES )
                       2388     ;               {
                       2389     ;                       ucNewPriority = portMAX_PRIORITIES - ( unsigned portCHAR ) 1;
                       2390     ;               }
                       2391     ; 
                       2392     ;               taskENTER_CRITICAL();
                       2393     ;               {
                       2394     ;                       /* If null is passed in here then we are changing the
                       2395     ;                       priority of the calling function. */
                       2396     ;                       pxTCB = prvGetTCBFromHandle( pxTask );
                       2397     ;                       ucCurrentPriority = pxTCB->ucPriority;
                       2398     ; 
                       2399     ;                       if( ucCurrentPriority != ucNewPriority )
                       2400     ;                       {
                       2401     ;                               pxTCB->ucPriority = ucNewPriority;
                       2402     ; 
                       2403     ;                               /* If the task is in the blocked or suspended list we ne
                               ed do 
                       2404     ;                               nothing more than change it's priority variable. However
                               , if 
                       2405     ;                               the task is in a ready list it needs to be removed and p
                               laced 
                       2406     ;                               in the queue appropriate to its new priority. */
                       2407     ;                               if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ ucCur
                               rentPriority ] ), &( pxTCB->xGenericListItem ) ) )
                       2408     ;                               {
                       2409     ;                                       /* The task is currently in its ready list - rem
                               ove before adding
                       2410     ;                                       it to it's new ready list. */
                       2411     ;                                       vListRemove( &( pxTCB->xGenericListItem ) );
                       2412     ;                                       prvAddTaskToReadyQueue( pxTCB );
                       2413     ;                               }                       
                       2414     ;                       }
                       2415     ;               }
                       2416     ;               taskEXIT_CRITICAL();
                       2417     ; 
                       2418     ;               /* The priority change may have readied a task of higher
                       2419     ;               priority than the calling task. */
                       2420     ;               taskYIELD();
                       2421     ;       }
                       2422     ; 
                       2423     ; #endif
                       2424     ; /*-----------------------------------------------------------*/
                       2425     ; 
                       2426     ; #if( INCLUDE_vTaskSuspend == 1 )
                       2427     ; 
                       2428     ;       void vTaskSuspend( xTaskHandle pxTaskToSuspend ) reentrant
                       2429     
------                 2430             RSEG  ?PR?_?vTaskSuspend?TASKS
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    40

000000                 2431     _?vTaskSuspend:
                       2432             USING   0
                       2433                             ; SOURCE LINE # 722
000000 9000FFFD        2434             MOV     DPTR,#0FFFDH
000004 12000000   E    2435             LCALL   ?C?ADDXBP
000008 EB              2436             MOV     A,R3
000009 F0              2437             MOVX    @DPTR,A
00000A A3              2438             INC     DPTR
00000B EA              2439             MOV     A,R2
00000C F0              2440             MOVX    @DPTR,A
00000D A3              2441             INC     DPTR
00000E E9              2442             MOV     A,R1
00000F F0              2443             MOVX    @DPTR,A
000010 9000FFFD        2444             MOV     DPTR,#0FFFDH
000014 12000000   E    2445             LCALL   ?C?ADDXBP
                       2446     ;       {
                       2447     ;       tskTCB *pxTCB;
000018 A2AFC2AF        2448              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
00001C C0D0                     
                       2449     ; 
                       2450     ;               taskENTER_CRITICAL();
                       2451     ;               {
                       2452                             ; SOURCE LINE # 727
                       2453     ;                       /* If null is passed in here then we are suspending ourselves. *
                               /
                       2454     ;                       pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
                       2455                             ; SOURCE LINE # 729
00001E 90000003        2456             MOV     DPTR,#03H
000022 12000000   E    2457             LCALL   ?C?XBPOFF
000026 E0              2458             MOVX    A,@DPTR
000027 FB              2459             MOV     R3,A
000028 A3              2460             INC     DPTR
000029 E0              2461             MOVX    A,@DPTR
00002A FA              2462             MOV     R2,A
00002B A3              2463             INC     DPTR
00002C E0              2464             MOVX    A,@DPTR
00002D 4A              2465             ORL     A,R2
00002E 4B              2466             ORL     A,R3
00002F 700E            2467             JNZ     ?C0029
000031 90000000   F    2468             MOV     DPTR,#pxCurrentTCB
000035 E0              2469             MOVX    A,@DPTR
000036 FB              2470             MOV     R3,A
000037 A3              2471             INC     DPTR
000038 E0              2472             MOVX    A,@DPTR
000039 FA              2473             MOV     R2,A
00003A A3              2474             INC     DPTR
00003B E0              2475             MOVX    A,@DPTR
00003C F9              2476             MOV     R1,A
00003D 8010            2477             SJMP    ?C0030
00003F                 2478     ?C0029:
00003F 90000003        2479             MOV     DPTR,#03H
000043 12000000   E    2480             LCALL   ?C?XBPOFF
000047 E0              2481             MOVX    A,@DPTR
000048 FB              2482             MOV     R3,A
000049 A3              2483             INC     DPTR
00004A E0              2484             MOVX    A,@DPTR
00004B FA              2485             MOV     R2,A
00004C A3              2486             INC     DPTR
00004D E0              2487             MOVX    A,@DPTR
00004E F9              2488             MOV     R1,A
00004F                 2489     ?C0030:
00004F 850083     E    2490             MOV     DPH,?C_XBP
000052 850082     E    2491             MOV     DPL,?C_XBP+01H
000055 759300     E    2492             MOV     DPX,#?C?XDATASEG
000058 EB              2493             MOV     A,R3
000059 F0              2494             MOVX    @DPTR,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    41

00005A A3              2495             INC     DPTR
00005B EA              2496             MOV     A,R2
00005C F0              2497             MOVX    @DPTR,A
00005D A3              2498             INC     DPTR
00005E E9              2499             MOV     A,R1
00005F F0              2500             MOVX    @DPTR,A
                       2501     ; 
                       2502     ;                       /* Remove task from the ready/delayed list and place in the     
                               suspended list. */
                       2503     ;                       vListRemove( &( pxTCB->xGenericListItem ) );
                       2504                             ; SOURCE LINE # 732
000060 850083     E    2505             MOV     DPH,?C_XBP
000063 850082     E    2506             MOV     DPL,?C_XBP+01H
000066 759300     E    2507             MOV     DPX,#?C?XDATASEG
000069 E0              2508             MOVX    A,@DPTR
00006A FB              2509             MOV     R3,A
00006B A3              2510             INC     DPTR
00006C E0              2511             MOVX    A,@DPTR
00006D FA              2512             MOV     R2,A
00006E A3              2513             INC     DPTR
00006F E0              2514             MOVX    A,@DPTR
000070 2419            2515             ADD     A,#019H
000072 F9              2516             MOV     R1,A
000073 E4              2517             CLR     A
000074 3A              2518             ADDC    A,R2
000075 FA              2519             MOV     R2,A
000076 12000000   E    2520             LCALL   _?vListRemove
                       2521     ; 
                       2522     ;                       /* Is the task waiting on an event also? */                     
                                                                                                       
                       2523     ;                       if( pxTCB->xEventListItem.pvContainer )
                       2524                             ; SOURCE LINE # 735
00007A 850083     E    2525             MOV     DPH,?C_XBP
00007D 850082     E    2526             MOV     DPL,?C_XBP+01H
000080 759300     E    2527             MOV     DPX,#?C?XDATASEG
000083 E0              2528             MOVX    A,@DPTR
000084 FB              2529             MOV     R3,A
000085 A3              2530             INC     DPTR
000086 E0              2531             MOVX    A,@DPTR
000087 FA              2532             MOV     R2,A
000088 A3              2533             INC     DPTR
000089 E0              2534             MOVX    A,@DPTR
00008A 2436            2535             ADD     A,#036H
00008C F9              2536             MOV     R1,A
00008D E4              2537             CLR     A
00008E 3A              2538             ADDC    A,R2
00008F FA              2539             MOV     R2,A
000090 12000000   E    2540             LCALL   ?C?PLDPTR
000094 EA              2541             MOV     A,R2
000095 49              2542             ORL     A,R1
000096 4B              2543             ORL     A,R3
000097 601A            2544             JZ      ?C0031
                       2545     ;                       {
                       2546                             ; SOURCE LINE # 736
                       2547     ;                               vListRemove( &( pxTCB->xEventListItem ) );
                       2548                             ; SOURCE LINE # 737
000099 850083     E    2549             MOV     DPH,?C_XBP
00009C 850082     E    2550             MOV     DPL,?C_XBP+01H
00009F 759300     E    2551             MOV     DPX,#?C?XDATASEG
0000A2 E0              2552             MOVX    A,@DPTR
0000A3 FB              2553             MOV     R3,A
0000A4 A3              2554             INC     DPTR
0000A5 E0              2555             MOVX    A,@DPTR
0000A6 FA              2556             MOV     R2,A
0000A7 A3              2557             INC     DPTR
0000A8 E0              2558             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    42

0000A9 2429            2559             ADD     A,#029H
0000AB F9              2560             MOV     R1,A
0000AC E4              2561             CLR     A
0000AD 3A              2562             ADDC    A,R2
0000AE FA              2563             MOV     R2,A
0000AF 12000000   E    2564             LCALL   _?vListRemove
                       2565     ;                       }
                       2566                             ; SOURCE LINE # 738
0000B3                 2567     ?C0031:
                       2568     ; 
                       2569     ;                       vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGene
                               ricListItem ) );
                       2570                             ; SOURCE LINE # 740
0000B3 850083     E    2571             MOV     DPH,?C_XBP
0000B6 850082     E    2572             MOV     DPL,?C_XBP+01H
0000B9 759300     E    2573             MOV     DPX,#?C?XDATASEG
0000BC E0              2574             MOVX    A,@DPTR
0000BD FB              2575             MOV     R3,A
0000BE A3              2576             INC     DPTR
0000BF E0              2577             MOVX    A,@DPTR
0000C0 FA              2578             MOV     R2,A
0000C1 A3              2579             INC     DPTR
0000C2 E0              2580             MOVX    A,@DPTR
0000C3 2419            2581             ADD     A,#019H
0000C5 F9              2582             MOV     R1,A
0000C6 E4              2583             CLR     A
0000C7 3A              2584             ADDC    A,R2
0000C8 FA              2585             MOV     R2,A
0000C9 9000FFFD        2586             MOV     DPTR,#0FFFDH
0000CD 12000000   E    2587             LCALL   ?C?ADDXBP
0000D1 EB              2588             MOV     A,R3
0000D2 F0              2589             MOVX    @DPTR,A
0000D3 A3              2590             INC     DPTR
0000D4 EA              2591             MOV     A,R2
0000D5 F0              2592             MOVX    @DPTR,A
0000D6 A3              2593             INC     DPTR
0000D7 E9              2594             MOV     A,R1
0000D8 F0              2595             MOVX    @DPTR,A
0000D9 7B00       F    2596             MOV     R3,#MBYTE (xSuspendedTaskList)
0000DB 7A00       F    2597             MOV     R2,#HIGH (xSuspendedTaskList)
0000DD 7900       F    2598             MOV     R1,#LOW (xSuspendedTaskList)
0000DF 12000000   E    2599             LCALL   _?vListInsertEnd
                       2600     ;               }
                       2601                             ; SOURCE LINE # 741
                       2602     ;               taskEXIT_CRITICAL();
0000E3 D0D092AF        2603              DB 0D0H, 0D0H, 092H, 0AFH;
                       2604     ; 
                       2605     ;               /* We may have just suspended the current task. */
                       2606     ;               if( ( void * ) pxTaskToSuspend == NULL )
                       2607                             ; SOURCE LINE # 745
0000E7 90000003        2608             MOV     DPTR,#03H
0000EB 12000000   E    2609             LCALL   ?C?XBPOFF
0000EF E0              2610             MOVX    A,@DPTR
0000F0 FB              2611             MOV     R3,A
0000F1 A3              2612             INC     DPTR
0000F2 E0              2613             MOVX    A,@DPTR
0000F3 FA              2614             MOV     R2,A
0000F4 A3              2615             INC     DPTR
0000F5 E0              2616             MOVX    A,@DPTR
0000F6 4A              2617             ORL     A,R2
0000F7 4B              2618             ORL     A,R3
0000F8 7004            2619             JNZ     ?C0033
                       2620     ;               {
                       2621                             ; SOURCE LINE # 746
                       2622     ;                       taskYIELD();
                       2623                             ; SOURCE LINE # 747
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    43

0000FA 12000000   E    2624             LCALL   _?vPortYield
                       2625     ;               }
                       2626                             ; SOURCE LINE # 748
                       2627     ;       }
                       2628                             ; SOURCE LINE # 749
0000FE                 2629     ?C0033:
0000FE 90000006        2630             MOV     DPTR,#06H
000102 02000000   E    2631             LJMP    ?C?ADDXBP
                       2632     ; END OF _?vTaskSuspend
                       2633     
                       2634     ; 
                       2635     ; #endif
                       2636     ; /*-----------------------------------------------------------*/
                       2637     ; 
                       2638     ; #if( INCLUDE_vTaskSuspend == 1 )
                       2639     ; 
                       2640     ;       void vTaskResume( xTaskHandle pxTaskToResume )reentrant
                       2641     
------                 2642             RSEG  ?PR?_?vTaskResume?TASKS
000000                 2643     _?vTaskResume:
                       2644             USING   0
                       2645                             ; SOURCE LINE # 756
000000 9000FFFD        2646             MOV     DPTR,#0FFFDH
000004 12000000   E    2647             LCALL   ?C?ADDXBP
000008 EB              2648             MOV     A,R3
000009 F0              2649             MOVX    @DPTR,A
00000A A3              2650             INC     DPTR
00000B EA              2651             MOV     A,R2
00000C F0              2652             MOVX    @DPTR,A
00000D A3              2653             INC     DPTR
00000E E9              2654             MOV     A,R1
00000F F0              2655             MOVX    @DPTR,A
000010 9000FFFB        2656             MOV     DPTR,#0FFFBH
000014 12000000   E    2657             LCALL   ?C?ADDXBP
                       2658     ;       {
                       2659     ;       tskTCB *pxTCB;
                       2660     ;       portSHORT sYieldRequired;
                       2661     ; 
                       2662     ;               /* Remove the task from whichever list it is currently in, and place
                       2663     ;               it in the ready list. */
                       2664     ;               pxTCB = ( tskTCB * ) pxTaskToResume;
                       2665                             ; SOURCE LINE # 763
000018 90000005        2666             MOV     DPTR,#05H
00001C 12000000   E    2667             LCALL   ?C?XBPOFF
000020 E0              2668             MOVX    A,@DPTR
000021 F9              2669             MOV     R1,A
000022 A3              2670             INC     DPTR
000023 E0              2671             MOVX    A,@DPTR
000024 FA              2672             MOV     R2,A
000025 A3              2673             INC     DPTR
000026 E0              2674             MOVX    A,@DPTR
000027 850083     E    2675             MOV     DPH,?C_XBP
00002A 850082     E    2676             MOV     DPL,?C_XBP+01H
00002D 759300     E    2677             MOV     DPX,#?C?XDATASEG
000030 C9              2678             XCH     A,R1
000031 F0              2679             MOVX    @DPTR,A
000032 A3              2680             INC     DPTR
000033 EA              2681             MOV     A,R2
000034 F0              2682             MOVX    @DPTR,A
000035 A3              2683             INC     DPTR
000036 E9              2684             MOV     A,R1
000037 F0              2685             MOVX    @DPTR,A
                       2686     ; 
                       2687     ;               /* The parameter cannot be NULL as it is impossible to resume the
                       2688     ;               currently executing task. */
                       2689     ;               if( pxTCB != NULL )
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    44

                       2690                             ; SOURCE LINE # 767
000038 850083     E    2691             MOV     DPH,?C_XBP
00003B 850082     E    2692             MOV     DPL,?C_XBP+01H
00003E 759300     E    2693             MOV     DPX,#?C?XDATASEG
000041 E0              2694             MOVX    A,@DPTR
000042 FB              2695             MOV     R3,A
000043 A3              2696             INC     DPTR
000044 E0              2697             MOVX    A,@DPTR
000045 FA              2698             MOV     R2,A
000046 A3              2699             INC     DPTR
000047 E0              2700             MOVX    A,@DPTR
000048 4A              2701             ORL     A,R2
000049 4B              2702             ORL     A,R3
00004A 7003            2703             JNZ     $ + 5H
00004C 010000     F    2704             AJMP    ?C0039
                       2705     ;               {
                       2706                             ; SOURCE LINE # 768
                       2707     ;                       taskENTER_CRITICAL();
00004F A2AFC2AF        2708              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
000053 C0D0                     
                       2709     ;                       {
                       2710                             ; SOURCE LINE # 770
                       2711     ;                               sYieldRequired = ( pxTCB->ucPriority >= pxCurrentTCB->uc
                               Priority );
                       2712                             ; SOURCE LINE # 771
000055 90000000   F    2713             MOV     DPTR,#pxCurrentTCB
000059 E0              2714             MOVX    A,@DPTR
00005A FB              2715             MOV     R3,A
00005B A3              2716             INC     DPTR
00005C E0              2717             MOVX    A,@DPTR
00005D FA              2718             MOV     R2,A
00005E A3              2719             INC     DPTR
00005F E0              2720             MOVX    A,@DPTR
000060 2418            2721             ADD     A,#018H
000062 F9              2722             MOV     R1,A
000063 E4              2723             CLR     A
000064 3A              2724             ADDC    A,R2
000065 FA              2725             MOV     R2,A
000066 12000000   E    2726             LCALL   ?C?CLDPTR
00006A FF              2727             MOV     R7,A
00006B 850083     E    2728             MOV     DPH,?C_XBP
00006E 850082     E    2729             MOV     DPL,?C_XBP+01H
000071 759300     E    2730             MOV     DPX,#?C?XDATASEG
000074 E0              2731             MOVX    A,@DPTR
000075 FB              2732             MOV     R3,A
000076 A3              2733             INC     DPTR
000077 E0              2734             MOVX    A,@DPTR
000078 FA              2735             MOV     R2,A
000079 A3              2736             INC     DPTR
00007A E0              2737             MOVX    A,@DPTR
00007B 2418            2738             ADD     A,#018H
00007D F9              2739             MOV     R1,A
00007E E4              2740             CLR     A
00007F 3A              2741             ADDC    A,R2
000080 FA              2742             MOV     R2,A
000081 12000000   E    2743             LCALL   ?C?CLDPTR
000085 C3              2744             CLR     C
000086 9F              2745             SUBB    A,R7
000087 7E00            2746             MOV     R6,#00H
000089 4004            2747             JC      ?C0035
00008B 7F01            2748             MOV     R7,#01H
00008D 8002            2749             SJMP    ?C0036
00008F                 2750     ?C0035:
00008F 7F00            2751             MOV     R7,#00H
000091                 2752     ?C0036:
000091 90000003        2753             MOV     DPTR,#03H
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    45

000095 12000000   E    2754             LCALL   ?C?XBPOFF
000099 EE              2755             MOV     A,R6
00009A F0              2756             MOVX    @DPTR,A
00009B A3              2757             INC     DPTR
00009C EF              2758             MOV     A,R7
00009D F0              2759             MOVX    @DPTR,A
                       2760     ;                               vListRemove( &( pxTCB->xGenericListItem ) );
                       2761                             ; SOURCE LINE # 772
00009E 850083     E    2762             MOV     DPH,?C_XBP
0000A1 850082     E    2763             MOV     DPL,?C_XBP+01H
0000A4 759300     E    2764             MOV     DPX,#?C?XDATASEG
0000A7 E0              2765             MOVX    A,@DPTR
0000A8 FB              2766             MOV     R3,A
0000A9 A3              2767             INC     DPTR
0000AA E0              2768             MOVX    A,@DPTR
0000AB FA              2769             MOV     R2,A
0000AC A3              2770             INC     DPTR
0000AD E0              2771             MOVX    A,@DPTR
0000AE 2419            2772             ADD     A,#019H
0000B0 F9              2773             MOV     R1,A
0000B1 E4              2774             CLR     A
0000B2 3A              2775             ADDC    A,R2
0000B3 FA              2776             MOV     R2,A
0000B4 12000000   E    2777             LCALL   _?vListRemove
                       2778     ;                               prvAddTaskToReadyQueue( pxTCB );
                       2779                             ; SOURCE LINE # 773
0000B8 E4              2780             CLR     A
0000B9 FF              2781             MOV     R7,A
0000BA FE              2782             MOV     R6,A
0000BB FD              2783             MOV     R5,A
0000BC FC              2784             MOV     R4,A
0000BD 850083     E    2785             MOV     DPH,?C_XBP
0000C0 850082     E    2786             MOV     DPL,?C_XBP+01H
0000C3 759300     E    2787             MOV     DPX,#?C?XDATASEG
0000C6 E0              2788             MOVX    A,@DPTR
0000C7 FB              2789             MOV     R3,A
0000C8 A3              2790             INC     DPTR
0000C9 E0              2791             MOVX    A,@DPTR
0000CA FA              2792             MOV     R2,A
0000CB A3              2793             INC     DPTR
0000CC E0              2794             MOVX    A,@DPTR
0000CD 2419            2795             ADD     A,#019H
0000CF F9              2796             MOV     R1,A
0000D0 E4              2797             CLR     A
0000D1 3A              2798             ADDC    A,R2
0000D2 FA              2799             MOV     R2,A
0000D3 12000000   E    2800             LCALL   ?C?LSTPTR
0000D7 850083     E    2801             MOV     DPH,?C_XBP
0000DA 850082     E    2802             MOV     DPL,?C_XBP+01H
0000DD 759300     E    2803             MOV     DPX,#?C?XDATASEG
0000E0 E0              2804             MOVX    A,@DPTR
0000E1 FB              2805             MOV     R3,A
0000E2 A3              2806             INC     DPTR
0000E3 E0              2807             MOVX    A,@DPTR
0000E4 FA              2808             MOV     R2,A
0000E5 A3              2809             INC     DPTR
0000E6 E0              2810             MOVX    A,@DPTR
0000E7 2418            2811             ADD     A,#018H
0000E9 F9              2812             MOV     R1,A
0000EA E4              2813             CLR     A
0000EB 3A              2814             ADDC    A,R2
0000EC FA              2815             MOV     R2,A
0000ED 12000000   E    2816             LCALL   ?C?CLDPTR
0000F1 FF              2817             MOV     R7,A
0000F2 90000000   F    2818             MOV     DPTR,#ucTopReadyPriority
0000F6 E0              2819             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    46

0000F7 FE              2820             MOV     R6,A
0000F8 EF              2821             MOV     A,R7
0000F9 D3              2822             SETB    C
0000FA 9E              2823             SUBB    A,R6
0000FB 4002            2824             JC      ?C0037
0000FD EF              2825             MOV     A,R7
0000FE F0              2826             MOVX    @DPTR,A
0000FF                 2827     ?C0037:
0000FF 850083     E    2828             MOV     DPH,?C_XBP
000102 850082     E    2829             MOV     DPL,?C_XBP+01H
000105 759300     E    2830             MOV     DPX,#?C?XDATASEG
000108 E0              2831             MOVX    A,@DPTR
000109 FB              2832             MOV     R3,A
00010A A3              2833             INC     DPTR
00010B E0              2834             MOVX    A,@DPTR
00010C FA              2835             MOV     R2,A
00010D A3              2836             INC     DPTR
00010E E0              2837             MOVX    A,@DPTR
00010F 2419            2838             ADD     A,#019H
000111 F9              2839             MOV     R1,A
000112 E4              2840             CLR     A
000113 3A              2841             ADDC    A,R2
000114 FA              2842             MOV     R2,A
000115 9000FFFD        2843             MOV     DPTR,#0FFFDH
000119 12000000   E    2844             LCALL   ?C?ADDXBP
00011D EB              2845             MOV     A,R3
00011E F0              2846             MOVX    @DPTR,A
00011F A3              2847             INC     DPTR
000120 EA              2848             MOV     A,R2
000121 F0              2849             MOVX    @DPTR,A
000122 A3              2850             INC     DPTR
000123 E9              2851             MOV     A,R1
000124 F0              2852             MOVX    @DPTR,A
000125 EF              2853             MOV     A,R7
000126 75F018          2854             MOV     B,#018H
000129 A4              2855             MUL     AB
00012A 2400       F    2856             ADD     A,#LOW (pxReadyTasksLists)
00012C F9              2857             MOV     R1,A
00012D 7400       F    2858             MOV     A,#HIGH (pxReadyTasksLists)
00012F 35F0            2859             ADDC    A,B
000131 FA              2860             MOV     R2,A
000132 7B00       F    2861             MOV     R3,#MBYTE (pxReadyTasksLists)
000134 12000000   E    2862             LCALL   _?vListInsertEnd
                       2863     ;                       }
                       2864                             ; SOURCE LINE # 774
                       2865     ;                       taskEXIT_CRITICAL();
000138 D0D092AF        2866              DB 0D0H, 0D0H, 092H, 0AFH;
                       2867     ; 
                       2868     ;                       /* We may have just resumed a higher priority task. */
                       2869     ;                       if( sYieldRequired )
                       2870                             ; SOURCE LINE # 778
00013C 90000003        2871             MOV     DPTR,#03H
000140 12000000   E    2872             LCALL   ?C?XBPOFF
000144 E0              2873             MOVX    A,@DPTR
000145 FE              2874             MOV     R6,A
000146 A3              2875             INC     DPTR
000147 E0              2876             MOVX    A,@DPTR
000148 4E              2877             ORL     A,R6
000149 6004            2878             JZ      ?C0039
                       2879     ;                       {
                       2880                             ; SOURCE LINE # 779
                       2881     ;                               /* This yield may not cause the task just resumed to run
                               , but
                       2882     ;                               will leave the lists in the correct state for the next y
                               ield. */
                       2883     ;                               taskYIELD();
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    47

                       2884                             ; SOURCE LINE # 782
00014B 12000000   E    2885             LCALL   _?vPortYield
                       2886     ;                       }
                       2887                             ; SOURCE LINE # 783
                       2888     ;               }
                       2889                             ; SOURCE LINE # 784
                       2890     ;       }
                       2891                             ; SOURCE LINE # 785
00014F                 2892     ?C0039:
00014F 90000008        2893             MOV     DPTR,#08H
000153 02000000   E    2894             LJMP    ?C?ADDXBP
                       2895     ; END OF _?vTaskResume
                       2896     
                       2897     ; 
                       2898     ; #endif
                       2899     ; 
                       2900     ; 
                       2901     ; 
                       2902     ; 
                       2903     ; 
                       2904     ; /*-----------------------------------------------------------
                       2905     ;  * PUBLIC SCHEDULER CONTROL documented in task.h
                       2906     ;  *----------------------------------------------------------*/
                       2907     ; 
                       2908     ; 
                       2909     ; void vTaskStartScheduler( portSHORT sUsePreemption )reentrant
                       2910     
------                 2911             RSEG  ?PR?_?vTaskStartScheduler?TASKS
000000                 2912     _?vTaskStartScheduler:
                       2913             USING   0
                       2914                             ; SOURCE LINE # 798
000000 9000FFFE        2915             MOV     DPTR,#0FFFEH
000004 12000000   E    2916             LCALL   ?C?ADDXBP
000008 EE              2917             MOV     A,R6
000009 F0              2918             MOVX    @DPTR,A
00000A A3              2919             INC     DPTR
00000B EF              2920             MOV     A,R7
00000C F0              2921             MOVX    @DPTR,A
                       2922     ; {
                       2923     ;       /* Check a task has been created. */
                       2924     ;       if( pxCurrentTCB != NULL )
                       2925                             ; SOURCE LINE # 801
00000D 90000000   F    2926             MOV     DPTR,#pxCurrentTCB
000011 E0              2927             MOVX    A,@DPTR
000012 FB              2928             MOV     R3,A
000013 A3              2929             INC     DPTR
000014 E0              2930             MOVX    A,@DPTR
000015 FA              2931             MOV     R2,A
000016 A3              2932             INC     DPTR
000017 E0              2933             MOVX    A,@DPTR
000018 4A              2934             ORL     A,R2
000019 4B              2935             ORL     A,R3
00001A 6035            2936             JZ      ?C0043
                       2937     ;       {
                       2938                             ; SOURCE LINE # 802
                       2939     ;               sUsingPreemption = sUsePreemption;
                       2940                             ; SOURCE LINE # 803
00001C 850083     E    2941             MOV     DPH,?C_XBP
00001F 850082     E    2942             MOV     DPL,?C_XBP+01H
000022 759300     E    2943             MOV     DPX,#?C?XDATASEG
000025 E0              2944             MOVX    A,@DPTR
000026 FA              2945             MOV     R2,A
000027 A3              2946             INC     DPTR
000028 E0              2947             MOVX    A,@DPTR
000029 FB              2948             MOV     R3,A
00002A 90000000   F    2949             MOV     DPTR,#sUsingPreemption
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    48

00002E EA              2950             MOV     A,R2
00002F F0              2951             MOVX    @DPTR,A
000030 A3              2952             INC     DPTR
000031 EB              2953             MOV     A,R3
000032 F0              2954             MOVX    @DPTR,A
                       2955     ; 
                       2956     ;               /* Interrupts are turned off here, to ensure a tick does not occur
                       2957     ;               before or during the call to sPortStartScheduler().  The stacks of 
                       2958     ;               the created tasks contain a status word with interrupts switched on
                       2959     ;               so interrupts will automatically get re-enabled when the first task
                       2960     ;               starts to run.
                       2961     ;               
                       2962     ;               STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
                       2963     ;               DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
                       2964     ;               portDISABLE_INTERRUPTS();
                       2965                             ; SOURCE LINE # 813
000033 C2AF            2966             CLR     EA
                       2967     ; 
                       2968     ;               cSchedulerRunning = pdTRUE;
                       2969                             ; SOURCE LINE # 815
000035 90000000   F    2970             MOV     DPTR,#cSchedulerRunning
000039 7401            2971             MOV     A,#01H
00003B F0              2972             MOVX    @DPTR,A
                       2973     ;               xTickCount = ( portTickType ) 0;
                       2974                             ; SOURCE LINE # 816
00003C E4              2975             CLR     A
00003D FF              2976             MOV     R7,A
00003E FE              2977             MOV     R6,A
00003F FD              2978             MOV     R5,A
000040 FC              2979             MOV     R4,A
000041 90000000   F    2980             MOV     DPTR,#xTickCount
000045 12000000   E    2981             LCALL   ?C?LSTXDATA
                       2982     ; 
                       2983     ;               /* Setting up the timer tick is hardware specific and thus in the 
                       2984     ;               portable interface. */
                       2985     ;               if( sPortStartScheduler( sUsePreemption ) )
                       2986                             ; SOURCE LINE # 820
000049 AF03            2987             MOV     R7,AR3
00004B AE02            2988             MOV     R6,AR2
00004D 12000000   E    2989             LCALL   _?sPortStartScheduler
                       2990     ;               {
                       2991                             ; SOURCE LINE # 821
                       2992     ;                       /* Should not reach here as if the scheduler is running the
                       2993     ;                       function will not return. */
                       2994     ;               }
                       2995                             ; SOURCE LINE # 824
000051                 2996     ?C0041:
                       2997     ;               else
                       2998     ;               {
                       2999                             ; SOURCE LINE # 826
                       3000     ;                       /* Should only reach here if a task calls sTaskEndScheduler(). *
                               /
                       3001     ;               }
                       3002                             ; SOURCE LINE # 828
                       3003     ;       }
                       3004                             ; SOURCE LINE # 829
                       3005     ; }
                       3006                             ; SOURCE LINE # 830
000051                 3007     ?C0043:
000051 90000002        3008             MOV     DPTR,#02H
000055 02000000   E    3009             LJMP    ?C?ADDXBP
                       3010     ; END OF _?vTaskStartScheduler
                       3011     
                       3012     ; /*-----------------------------------------------------------*/
                       3013     ; 
                       3014     ; void vTaskEndScheduler( void ) reentrant
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    49

                       3015     
------                 3016             RSEG  ?PR?_?vTaskEndScheduler?TASKS
000000                 3017     _?vTaskEndScheduler:
                       3018             USING   0
                       3019                             ; SOURCE LINE # 833
                       3020     ; {
                       3021     ;       /* Stop the scheduler interrupts and call the portable scheduler end 
                       3022     ;       routine so the original ISRs can be restored if necessary.  The port
                       3023     ;       layer must ensure interrupts enable     bit is left in the correct state. */
                       3024     ;       portDISABLE_INTERRUPTS();
                       3025                             ; SOURCE LINE # 838
000000 C2AF            3026             CLR     EA
                       3027     ;       cSchedulerRunning = pdFALSE;
                       3028                             ; SOURCE LINE # 839
000002 E4              3029             CLR     A
000003 90000000   F    3030             MOV     DPTR,#cSchedulerRunning
000007 F0              3031             MOVX    @DPTR,A
                       3032     ;       vPortEndScheduler();
                       3033                             ; SOURCE LINE # 840
000008 02000000   E    3034             LJMP    _?vPortEndScheduler
                       3035     ; END OF _?vTaskEndScheduler
                       3036     
                       3037     ; }
                       3038     ; /*----------------------------------------------------------*/
                       3039     ; 
                       3040     ; void vTaskSuspendAll( void ) reentrant
                       3041     
------                 3042             RSEG  ?PR?_?vTaskSuspendAll?TASKS
000000                 3043     _?vTaskSuspendAll:
                       3044             USING   0
                       3045                             ; SOURCE LINE # 844
                       3046     ; {
                       3047     ;       portENTER_CRITICAL();
000000 A2AFC2AF        3048              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
000004 C0D0                     
                       3049     ;               ++ucSchedulerSuspended;
                       3050                             ; SOURCE LINE # 847
000006 90000000   F    3051             MOV     DPTR,#ucSchedulerSuspended
00000A E0              3052             MOVX    A,@DPTR
00000B 04              3053             INC     A
00000C F0              3054             MOVX    @DPTR,A
                       3055     ;       portEXIT_CRITICAL();
00000D D0D092AF        3056              DB 0D0H, 0D0H, 092H, 0AFH;
                       3057     ; }
                       3058                             ; SOURCE LINE # 849
000011 22              3059             RET     
                       3060     ; END OF _?vTaskSuspendAll
                       3061     
                       3062     ; /*----------------------------------------------------------*/
                       3063     ; 
                       3064     ; signed portCHAR cTaskResumeAll( void ) reentrant
                       3065     
------                 3066             RSEG  ?PR?_?cTaskResumeAll?TASKS
000000                 3067     _?cTaskResumeAll:
                       3068             USING   0
                       3069                             ; SOURCE LINE # 852
000000 9000FFFC        3070             MOV     DPTR,#0FFFCH
000004 12000000   E    3071             LCALL   ?C?ADDXBP
                       3072     ; {
                       3073     ; register tskTCB *pxTCB;
                       3074     ; signed portCHAR cAlreadyYielded = ( signed portCHAR ) pdFALSE;
                       3075                             ; SOURCE LINE # 855
000008 90000003        3076             MOV     DPTR,#03H
00000C 12000000   E    3077             LCALL   ?C?XBPOFF
000010 E4              3078             CLR     A
000011 F0              3079             MOVX    @DPTR,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    50

000012 A2AFC2AF        3080              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
000016 C0D0                     
                       3081     ; 
                       3082     ;       /* It is possible that an ISR caused a task to be removed from an event
                       3083     ;       list while the scheduler was suspended.  If this was the case then the
                       3084     ;       removed task will have been added to the xPendingReadyList.  Once the
                       3085     ;       scheduler has been resumed it is safe to move all the pending ready
                       3086     ;       tasks from this list into their appropriate ready list. */
                       3087     ;       portENTER_CRITICAL();
                       3088     ;       {
                       3089                             ; SOURCE LINE # 863
                       3090     ;               --ucSchedulerSuspended;
                       3091                             ; SOURCE LINE # 864
000018 90000000   F    3092             MOV     DPTR,#ucSchedulerSuspended
00001C E0              3093             MOVX    A,@DPTR
00001D 14              3094             DEC     A
00001E F0              3095             MOVX    @DPTR,A
                       3096     ; 
                       3097     ;               if( ucSchedulerSuspended == pdFALSE )
                       3098                             ; SOURCE LINE # 866
00001F E0              3099             MOVX    A,@DPTR
000020 6003            3100             JZ      $ + 5H
000022 010000     F    3101             AJMP    ?C0046
                       3102     ;               {
                       3103                             ; SOURCE LINE # 867
                       3104     ;                       if( usCurrentNumberOfTasks > ( unsigned portSHORT ) 0 )
                       3105                             ; SOURCE LINE # 868
000025 D3              3106             SETB    C
000026 90000000   F    3107             MOV     DPTR,#usCurrentNumberOfTasks+01H
00002A E0              3108             MOVX    A,@DPTR
00002B 9400            3109             SUBB    A,#00H
00002D 90000000   F    3110             MOV     DPTR,#usCurrentNumberOfTasks
000031 E0              3111             MOVX    A,@DPTR
000032 9400            3112             SUBB    A,#00H
000034 5003            3113             JNC     $ + 5H
000036 010000     F    3114             AJMP    ?C0046
                       3115     ;                       {
                       3116                             ; SOURCE LINE # 869
000039                 3117     ?C0048:
                       3118     ;                               /* Move any readied tasks from the pending list into the
                                
                       3119     ;                               appropriate ready list. */
                       3120     ;                               while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTR
                               Y(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
                       3121                             ; SOURCE LINE # 872
000039 90000000   F    3122             MOV     DPTR,#xPendingReadyList
00003D E0              3123             MOVX    A,@DPTR
00003E 7002            3124             JNZ     ?C0113
000040 A3              3125             INC     DPTR
000041 E0              3126             MOVX    A,@DPTR
000042                 3127     ?C0113:
000042 6022            3128             JZ      ?C0050
000044 90000000   F    3129             MOV     DPTR,#xPendingReadyList+02H
000048 E0              3130             MOVX    A,@DPTR
000049 FB              3131             MOV     R3,A
00004A A3              3132             INC     DPTR
00004B E0              3133             MOVX    A,@DPTR
00004C FA              3134             MOV     R2,A
00004D A3              3135             INC     DPTR
00004E E0              3136             MOVX    A,@DPTR
00004F 2404            3137             ADD     A,#04H
000051 F9              3138             MOV     R1,A
000052 E4              3139             CLR     A
000053 3A              3140             ADDC    A,R2
000054 FA              3141             MOV     R2,A
000055 12000000   E    3142             LCALL   ?C?PLDPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    51

000059 E9              3143             MOV     A,R1
00005A 240A            3144             ADD     A,#0AH
00005C F9              3145             MOV     R1,A
00005D E4              3146             CLR     A
00005E 3A              3147             ADDC    A,R2
00005F FA              3148             MOV     R2,A
000060 12000000   E    3149             LCALL   ?C?PLDPTR
000064 8006            3150             SJMP    ?C0051
000066                 3151     ?C0050:
000066 7B00            3152             MOV     R3,#00H
000068 7A00            3153             MOV     R2,#00H
00006A 7900            3154             MOV     R1,#00H
00006C                 3155     ?C0051:
00006C 850083     E    3156             MOV     DPH,?C_XBP
00006F 850082     E    3157             MOV     DPL,?C_XBP+01H
000072 759300     E    3158             MOV     DPX,#?C?XDATASEG
000075 EB              3159             MOV     A,R3
000076 F0              3160             MOVX    @DPTR,A
000077 A3              3161             INC     DPTR
000078 EA              3162             MOV     A,R2
000079 F0              3163             MOVX    @DPTR,A
00007A A3              3164             INC     DPTR
00007B E9              3165             MOV     A,R1
00007C F0              3166             MOVX    @DPTR,A
00007D 4A              3167             ORL     A,R2
00007E 4B              3168             ORL     A,R3
00007F 7003            3169             JNZ     $ + 5H
000081 010000     F    3170             AJMP    ?C0049
                       3171     ;                               {
                       3172                             ; SOURCE LINE # 873
                       3173     ;                                       vListRemove( &( pxTCB->xEventListItem ) );
                       3174                             ; SOURCE LINE # 874
000084 850083     E    3175             MOV     DPH,?C_XBP
000087 850082     E    3176             MOV     DPL,?C_XBP+01H
00008A 759300     E    3177             MOV     DPX,#?C?XDATASEG
00008D E0              3178             MOVX    A,@DPTR
00008E FB              3179             MOV     R3,A
00008F A3              3180             INC     DPTR
000090 E0              3181             MOVX    A,@DPTR
000091 FA              3182             MOV     R2,A
000092 A3              3183             INC     DPTR
000093 E0              3184             MOVX    A,@DPTR
000094 2429            3185             ADD     A,#029H
000096 F9              3186             MOV     R1,A
000097 E4              3187             CLR     A
000098 3A              3188             ADDC    A,R2
000099 FA              3189             MOV     R2,A
00009A 12000000   E    3190             LCALL   _?vListRemove
                       3191     ;                                       vListRemove( &( pxTCB->xGenericListItem ) );
                       3192                             ; SOURCE LINE # 875
00009E 850083     E    3193             MOV     DPH,?C_XBP
0000A1 850082     E    3194             MOV     DPL,?C_XBP+01H
0000A4 759300     E    3195             MOV     DPX,#?C?XDATASEG
0000A7 E0              3196             MOVX    A,@DPTR
0000A8 FB              3197             MOV     R3,A
0000A9 A3              3198             INC     DPTR
0000AA E0              3199             MOVX    A,@DPTR
0000AB FA              3200             MOV     R2,A
0000AC A3              3201             INC     DPTR
0000AD E0              3202             MOVX    A,@DPTR
0000AE 2419            3203             ADD     A,#019H
0000B0 F9              3204             MOV     R1,A
0000B1 E4              3205             CLR     A
0000B2 3A              3206             ADDC    A,R2
0000B3 FA              3207             MOV     R2,A
0000B4 12000000   E    3208             LCALL   _?vListRemove
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    52

                       3209     ;                                       prvAddTaskToReadyQueue( pxTCB );
                       3210                             ; SOURCE LINE # 876
0000B8 E4              3211             CLR     A
0000B9 FF              3212             MOV     R7,A
0000BA FE              3213             MOV     R6,A
0000BB FD              3214             MOV     R5,A
0000BC FC              3215             MOV     R4,A
0000BD 850083     E    3216             MOV     DPH,?C_XBP
0000C0 850082     E    3217             MOV     DPL,?C_XBP+01H
0000C3 759300     E    3218             MOV     DPX,#?C?XDATASEG
0000C6 E0              3219             MOVX    A,@DPTR
0000C7 FB              3220             MOV     R3,A
0000C8 A3              3221             INC     DPTR
0000C9 E0              3222             MOVX    A,@DPTR
0000CA FA              3223             MOV     R2,A
0000CB A3              3224             INC     DPTR
0000CC E0              3225             MOVX    A,@DPTR
0000CD 2419            3226             ADD     A,#019H
0000CF F9              3227             MOV     R1,A
0000D0 E4              3228             CLR     A
0000D1 3A              3229             ADDC    A,R2
0000D2 FA              3230             MOV     R2,A
0000D3 12000000   E    3231             LCALL   ?C?LSTPTR
0000D7 850083     E    3232             MOV     DPH,?C_XBP
0000DA 850082     E    3233             MOV     DPL,?C_XBP+01H
0000DD 759300     E    3234             MOV     DPX,#?C?XDATASEG
0000E0 E0              3235             MOVX    A,@DPTR
0000E1 FB              3236             MOV     R3,A
0000E2 A3              3237             INC     DPTR
0000E3 E0              3238             MOVX    A,@DPTR
0000E4 FA              3239             MOV     R2,A
0000E5 A3              3240             INC     DPTR
0000E6 E0              3241             MOVX    A,@DPTR
0000E7 2418            3242             ADD     A,#018H
0000E9 F9              3243             MOV     R1,A
0000EA E4              3244             CLR     A
0000EB 3A              3245             ADDC    A,R2
0000EC FA              3246             MOV     R2,A
0000ED 12000000   E    3247             LCALL   ?C?CLDPTR
0000F1 FF              3248             MOV     R7,A
0000F2 90000000   F    3249             MOV     DPTR,#ucTopReadyPriority
0000F6 E0              3250             MOVX    A,@DPTR
0000F7 FE              3251             MOV     R6,A
0000F8 EF              3252             MOV     A,R7
0000F9 D3              3253             SETB    C
0000FA 9E              3254             SUBB    A,R6
0000FB 4002            3255             JC      ?C0052
0000FD EF              3256             MOV     A,R7
0000FE F0              3257             MOVX    @DPTR,A
0000FF                 3258     ?C0052:
0000FF 850083     E    3259             MOV     DPH,?C_XBP
000102 850082     E    3260             MOV     DPL,?C_XBP+01H
000105 759300     E    3261             MOV     DPX,#?C?XDATASEG
000108 E0              3262             MOVX    A,@DPTR
000109 FB              3263             MOV     R3,A
00010A A3              3264             INC     DPTR
00010B E0              3265             MOVX    A,@DPTR
00010C FA              3266             MOV     R2,A
00010D A3              3267             INC     DPTR
00010E E0              3268             MOVX    A,@DPTR
00010F 2419            3269             ADD     A,#019H
000111 F9              3270             MOV     R1,A
000112 E4              3271             CLR     A
000113 3A              3272             ADDC    A,R2
000114 FA              3273             MOV     R2,A
000115 9000FFFD        3274             MOV     DPTR,#0FFFDH
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    53

000119 12000000   E    3275             LCALL   ?C?ADDXBP
00011D EB              3276             MOV     A,R3
00011E F0              3277             MOVX    @DPTR,A
00011F A3              3278             INC     DPTR
000120 EA              3279             MOV     A,R2
000121 F0              3280             MOVX    @DPTR,A
000122 A3              3281             INC     DPTR
000123 E9              3282             MOV     A,R1
000124 F0              3283             MOVX    @DPTR,A
000125 EF              3284             MOV     A,R7
000126 75F018          3285             MOV     B,#018H
000129 A4              3286             MUL     AB
00012A 2400       F    3287             ADD     A,#LOW (pxReadyTasksLists)
00012C F9              3288             MOV     R1,A
00012D 7400       F    3289             MOV     A,#HIGH (pxReadyTasksLists)
00012F 35F0            3290             ADDC    A,B
000131 FA              3291             MOV     R2,A
000132 7B00       F    3292             MOV     R3,#MBYTE (pxReadyTasksLists)
000134 12000000   E    3293             LCALL   _?vListInsertEnd
                       3294     ;                               }
                       3295                             ; SOURCE LINE # 877
000138 010000     F    3296             AJMP    ?C0048
00013B                 3297     ?C0049:
                       3298     ; 
                       3299     ;                               /* If any ticks occurred while the scheduler was suspend
                               ed then
                       3300     ;                               they should be processed now.  This ensures the tick cou
                               nt does not
                       3301     ;                               slip, and that any delayed tasks are resumed at the corr
                               ect time. */
                       3302     ;                               if( ucMissedTicks > 0 )
                       3303                             ; SOURCE LINE # 882
00013B 90000000   F    3304             MOV     DPTR,#ucMissedTicks
00013F E0              3305             MOVX    A,@DPTR
000140 D3              3306             SETB    C
000141 9400            3307             SUBB    A,#00H
000143 4026            3308             JC      ?C0046
                       3309     ;                               {
                       3310                             ; SOURCE LINE # 883
000145                 3311     ?C0054:
                       3312     ;                                       while( ucMissedTicks > 0 )
                       3313                             ; SOURCE LINE # 884
000145 90000000   F    3314             MOV     DPTR,#ucMissedTicks
000149 E0              3315             MOVX    A,@DPTR
00014A D3              3316             SETB    C
00014B 9400            3317             SUBB    A,#00H
00014D 400D            3318             JC      ?C0055
                       3319     ;                                       {
                       3320                             ; SOURCE LINE # 885
                       3321     ;                                               vTaskIncrementTick();
                       3322                             ; SOURCE LINE # 886
00014F 12000000   F    3323             LCALL   _?vTaskIncrementTick
                       3324     ;                                               --ucMissedTicks;
                       3325                             ; SOURCE LINE # 887
000153 90000000   F    3326             MOV     DPTR,#ucMissedTicks
000157 E0              3327             MOVX    A,@DPTR
000158 14              3328             DEC     A
000159 F0              3329             MOVX    @DPTR,A
                       3330     ;                                       }
                       3331                             ; SOURCE LINE # 888
00015A 80E9            3332             SJMP    ?C0054
00015C                 3333     ?C0055:
                       3334     ; 
                       3335     ;                                       /* As we have processed some ticks it is appropr
                               iate to yield
                       3336     ;                                       to ensure the highest priority task that is read
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    54

                               y to run is
                       3337     ;                                       the task actually running. */
                       3338     ;                                       cAlreadyYielded = ( signed portCHAR ) pdTRUE;
                       3339                             ; SOURCE LINE # 893
00015C 90000003        3340             MOV     DPTR,#03H
000160 12000000   E    3341             LCALL   ?C?XBPOFF
000164 7401            3342             MOV     A,#01H
000166 F0              3343             MOVX    @DPTR,A
                       3344     ;                                       taskYIELD();
                       3345                             ; SOURCE LINE # 894
000167 12000000   E    3346             LCALL   _?vPortYield
                       3347     ;                               }
                       3348                             ; SOURCE LINE # 895
                       3349     ;                       }
                       3350                             ; SOURCE LINE # 896
                       3351     ;               }
                       3352                             ; SOURCE LINE # 897
00016B                 3353     ?C0046:
                       3354     ;       }
                       3355                             ; SOURCE LINE # 898
                       3356     ;       portEXIT_CRITICAL();
00016B D0D092AF        3357              DB 0D0H, 0D0H, 092H, 0AFH;
                       3358     ; 
                       3359     ;       return cAlreadyYielded;
                       3360                             ; SOURCE LINE # 901
00016F 90000003        3361             MOV     DPTR,#03H
000173 12000000   E    3362             LCALL   ?C?XBPOFF
000177 E0              3363             MOVX    A,@DPTR
000178 FF              3364             MOV     R7,A
                       3365     ; }
                       3366                             ; SOURCE LINE # 902
000179                 3367     ?C0056:
000179 90000004        3368             MOV     DPTR,#04H
00017D 02000000   E    3369             LJMP    ?C?ADDXBP
                       3370     ; END OF _?cTaskResumeAll
                       3371     
                       3372     ; 
                       3373     ; 
                       3374     ; 
                       3375     ; 
                       3376     ; 
                       3377     ; 
                       3378     ; /*-----------------------------------------------------------
                       3379     ;  * PUBLIC TASK UTILITIES documented in task.h
                       3380     ;  *----------------------------------------------------------*/
                       3381     ; 
                       3382     ; 
                       3383     ; 
                       3384     ; volatile portTickType xTaskGetTickCount( void ) reentrant
                       3385     
------                 3386             RSEG  ?PR?_?xTaskGetTickCount?TASKS
000000                 3387     _?xTaskGetTickCount:
                       3388             USING   0
                       3389                             ; SOURCE LINE # 915
000000 9000FFFC        3390             MOV     DPTR,#0FFFCH
000004 12000000   E    3391             LCALL   ?C?ADDXBP
                       3392     ; {
                       3393     ; portTickType xTicks;
000008 A2AFC2AF        3394              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
00000C C0D0                     
                       3395     ; 
                       3396     ;       /* Critical section required if running on a 16 bit processor. */
                       3397     ;       taskENTER_CRITICAL();
                       3398     ;       {
                       3399                             ; SOURCE LINE # 921
                       3400     ;               xTicks = xTickCount;
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    55

                       3401                             ; SOURCE LINE # 922
00000E 90000000   F    3402             MOV     DPTR,#xTickCount
000012 E0              3403             MOVX    A,@DPTR
000013 FC              3404             MOV     R4,A
000014 A3              3405             INC     DPTR
000015 E0              3406             MOVX    A,@DPTR
000016 FD              3407             MOV     R5,A
000017 A3              3408             INC     DPTR
000018 E0              3409             MOVX    A,@DPTR
000019 FE              3410             MOV     R6,A
00001A A3              3411             INC     DPTR
00001B E0              3412             MOVX    A,@DPTR
00001C FF              3413             MOV     R7,A
00001D 850083     E    3414             MOV     DPH,?C_XBP
000020 850082     E    3415             MOV     DPL,?C_XBP+01H
000023 759300     E    3416             MOV     DPX,#?C?XDATASEG
000026 12000000   E    3417             LCALL   ?C?LSTXDATA
                       3418     ;       }
                       3419                             ; SOURCE LINE # 923
                       3420     ;       taskEXIT_CRITICAL();
00002A D0D092AF        3421              DB 0D0H, 0D0H, 092H, 0AFH;
                       3422     ; 
                       3423     ;       return xTicks;
                       3424                             ; SOURCE LINE # 926
00002E 850083     E    3425             MOV     DPH,?C_XBP
000031 850082     E    3426             MOV     DPL,?C_XBP+01H
000034 759300     E    3427             MOV     DPX,#?C?XDATASEG
000037 E0              3428             MOVX    A,@DPTR
000038 FC              3429             MOV     R4,A
000039 A3              3430             INC     DPTR
00003A E0              3431             MOVX    A,@DPTR
00003B FD              3432             MOV     R5,A
00003C A3              3433             INC     DPTR
00003D E0              3434             MOVX    A,@DPTR
00003E FE              3435             MOV     R6,A
00003F A3              3436             INC     DPTR
000040 E0              3437             MOVX    A,@DPTR
000041 FF              3438             MOV     R7,A
                       3439     ; }
                       3440                             ; SOURCE LINE # 927
000042                 3441     ?C0057:
000042 90000004        3442             MOV     DPTR,#04H
000046 02000000   E    3443             LJMP    ?C?ADDXBP
                       3444     ; END OF _?xTaskGetTickCount
                       3445     
                       3446     ; /*-----------------------------------------------------------*/
                       3447     ; 
                       3448     ; unsigned portSHORT usTaskGetNumberOfTasks( void ) reentrant
                       3449     
------                 3450             RSEG  ?PR?_?usTaskGetNumberOfTasks?TASKS
000000                 3451     _?usTaskGetNumberOfTasks:
                       3452             USING   0
                       3453                             ; SOURCE LINE # 930
000000 9000FFFE        3454             MOV     DPTR,#0FFFEH
000004 12000000   E    3455             LCALL   ?C?ADDXBP
                       3456     ; {
                       3457     ; unsigned portSHORT usNumberOfTasks;
000008 A2AFC2AF        3458              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
00000C C0D0                     
                       3459     ; 
                       3460     ;       taskENTER_CRITICAL();
                       3461     ;               usNumberOfTasks = usCurrentNumberOfTasks;
                       3462                             ; SOURCE LINE # 935
00000E 90000000   F    3463             MOV     DPTR,#usCurrentNumberOfTasks
000012 E0              3464             MOVX    A,@DPTR
000013 FF              3465             MOV     R7,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    56

000014 A3              3466             INC     DPTR
000015 E0              3467             MOVX    A,@DPTR
000016 850083     E    3468             MOV     DPH,?C_XBP
000019 850082     E    3469             MOV     DPL,?C_XBP+01H
00001C 759300     E    3470             MOV     DPX,#?C?XDATASEG
00001F CF              3471             XCH     A,R7
000020 F0              3472             MOVX    @DPTR,A
000021 A3              3473             INC     DPTR
000022 EF              3474             MOV     A,R7
000023 F0              3475             MOVX    @DPTR,A
                       3476     ;       taskEXIT_CRITICAL();
000024 D0D092AF        3477              DB 0D0H, 0D0H, 092H, 0AFH;
                       3478     ; 
                       3479     ;       return usNumberOfTasks;
                       3480                             ; SOURCE LINE # 938
000028 850083     E    3481             MOV     DPH,?C_XBP
00002B 850082     E    3482             MOV     DPL,?C_XBP+01H
00002E 759300     E    3483             MOV     DPX,#?C?XDATASEG
000031 E0              3484             MOVX    A,@DPTR
000032 FE              3485             MOV     R6,A
000033 A3              3486             INC     DPTR
000034 E0              3487             MOVX    A,@DPTR
000035 FF              3488             MOV     R7,A
                       3489     ; }
                       3490                             ; SOURCE LINE # 939
000036                 3491     ?C0058:
000036 90000002        3492             MOV     DPTR,#02H
00003A 02000000   E    3493             LJMP    ?C?ADDXBP
                       3494     ; END OF _?usTaskGetNumberOfTasks
                       3495     
                       3496     ; /*-----------------------------------------------------------*/
                       3497     ; 
                       3498     ; #if( ( USE_TRACE_FACILITY == 1 ) && ( INCLUDE_vTaskDelete == 1 ) && ( INCLUDE_vTaskSus
                               pend == 1 ) )
                       3499     ; 
                       3500     ;       void vTaskList( signed portCHAR *pcWriteBuffer ) reentrant
                       3501     ;       {
                       3502     ;       unsigned portSHORT usQueue;
                       3503     ; 
                       3504     ;               /* This is a VERY costly function that should be used for debug only.
                       3505     ;               It leaves interrupts disabled for a LONG time. */
                       3506     ; 
                       3507     ;               taskENTER_CRITICAL();
                       3508     ;               {
                       3509     ;                       /* Run through all the lists that could potentially contain a TC
                               B and
                       3510     ;                       report the task name, state and stack high water mark. */
                       3511     ; 
                       3512     ;                       pcWriteBuffer[ 0 ] = ( signed portCHAR ) 0x00;
                       3513     ;                       strcat( pcWriteBuffer, ( const signed portCHAR * ) "\r\n" );
                       3514     ; 
                       3515     ;                       usQueue = ( unsigned portSHORT ) ucTopUsedPriority + ( unsigned 
                               portSHORT ) 1;
                       3516     ; 
                       3517     ;                       do
                       3518     ;                       {
                       3519     ;                               usQueue--;
                       3520     ; 
                       3521     ;                               if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ usQueue ] 
                               ) ) )
                       3522     ;                               {
                       3523     ;                                       prvListTaskWithinSingleList( pcWriteBuffer, ( xL
                               ist * ) &( pxReadyTasksLists[ usQueue ] ), tskREADY_CHAR );                     
                       3524     ;                               }
                       3525     ;                       }while( usQueue > ( unsigned portSHORT ) tskIDLE_PRIORITY );
                       3526     ; 
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    57

                       3527     ;                       if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
                       3528     ;                       {
                       3529     ;                               prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) 
                               pxDelayedTaskList, tskBLOCKED_CHAR );
                       3530     ;                       }
                       3531     ; 
                       3532     ;                       if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
                       3533     ;                       {
                       3534     ;                               prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) 
                               pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
                       3535     ;                       }
                       3536     ; 
                       3537     ;                       if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
                       3538     ;                       {
                       3539     ;                               prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) 
                               &xTasksWaitingTermination, tskDELETED_CHAR );
                       3540     ;                       }
                       3541     ; 
                       3542     ;                       if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
                       3543     ;                       {
                       3544     ;                               prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) 
                               &xSuspendedTaskList, tskSUSPENDED_CHAR );
                       3545     ;                       }
                       3546     ;               }
                       3547     ;               taskEXIT_CRITICAL();
                       3548     ;       }
                       3549     ; 
                       3550     ; #endif
                       3551     ; /*----------------------------------------------------------*/
                       3552     ; 
                       3553     ; #if( USE_TRACE_FACILITY == 1 )
                       3554     ; 
                       3555     ;       void vTaskStartTrace( signed portCHAR * pcBuffer, unsigned portSHORT usBufferSiz
                               e ) reentrant
                       3556     ;       {
                       3557     ;               portENTER_CRITICAL();
                       3558     ;               {
                       3559     ;                       pcTraceBuffer = ( volatile signed portCHAR * volatile )pcBuffer;
                       3560     ;                       pcTraceBufferStart = pcBuffer;
                       3561     ;                       pcTraceBufferEnd = pcBuffer + usBufferSize - tskSIZE_OF_EACH_TRA
                               CE_LINE;
                       3562     ;                       cTracing = ( signed portCHAR ) pdTRUE;
                       3563     ;               }
                       3564     ;               portEXIT_CRITICAL();
                       3565     ;       }
                       3566     ; 
                       3567     ; #endif
                       3568     ; /*----------------------------------------------------------*/
                       3569     ; 
                       3570     ; #if( USE_TRACE_FACILITY == 1 )
                       3571     ; 
                       3572     ;       unsigned portSHORT usTaskEndTrace( void ) reentrant
                       3573     ;       {
                       3574     ;       unsigned portSHORT usBufferLength;
                       3575     ; 
                       3576     ;               portENTER_CRITICAL();
                       3577     ;                       cTracing = ( signed portCHAR ) pdFALSE;
                       3578     ;               portEXIT_CRITICAL();
                       3579     ; 
                       3580     ;               usBufferLength = ( unsigned portSHORT ) ( pcTraceBuffer - pcTraceBufferS
                               tart );
                       3581     ; 
                       3582     ;               return usBufferLength;
                       3583     ;       }
                       3584     ; 
                       3585     ; #endif
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    58

                       3586     ; 
                       3587     ; 
                       3588     ; 
                       3589     ; 
                       3590     ; 
                       3591     ; /*-----------------------------------------------------------
                       3592     ;  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
                       3593     ;  * documented in task.h
                       3594     ;  *----------------------------------------------------------*/
                       3595     ; 
                       3596     ; 
                       3597     ; inline void vTaskIncrementTick( void ) reentrant
                       3598     
------                 3599             RSEG  ?PR?_?vTaskIncrementTick?TASKS
000000                 3600     _?vTaskIncrementTick:
                       3601             USING   0
                       3602                             ; SOURCE LINE # 1041
000000 9000FFFD        3603             MOV     DPTR,#0FFFDH
000004 12000000   E    3604             LCALL   ?C?ADDXBP
                       3605     ; {
                       3606     ;       /* Called by the portable layer each time a tick interrupt occurs.
                       3607     ;       Increments the tick then checks to see if the new tick value will cause any
                       3608     ;       tasks to be unblocked. */
                       3609     ;       if( ucSchedulerSuspended == ( unsigned portCHAR ) pdFALSE )
                       3610                             ; SOURCE LINE # 1046
000008 90000000   F    3611             MOV     DPTR,#ucSchedulerSuspended
00000C E0              3612             MOVX    A,@DPTR
00000D 6003            3613             JZ      $ + 5H
00000F 010000     F    3614             AJMP    ?C0059
                       3615     ;       {
                       3616                             ; SOURCE LINE # 1047
                       3617     ;               ++xTickCount;
                       3618                             ; SOURCE LINE # 1048
000012 90000000   F    3619             MOV     DPTR,#xTickCount
000016 E0              3620             MOVX    A,@DPTR
000017 FC              3621             MOV     R4,A
000018 A3              3622             INC     DPTR
000019 E0              3623             MOVX    A,@DPTR
00001A FD              3624             MOV     R5,A
00001B A3              3625             INC     DPTR
00001C E0              3626             MOVX    A,@DPTR
00001D FE              3627             MOV     R6,A
00001E A3              3628             INC     DPTR
00001F E0              3629             MOVX    A,@DPTR
000020 2401            3630             ADD     A,#01H
000022 FF              3631             MOV     R7,A
000023 E4              3632             CLR     A
000024 3E              3633             ADDC    A,R6
000025 FE              3634             MOV     R6,A
000026 E4              3635             CLR     A
000027 3D              3636             ADDC    A,R5
000028 FD              3637             MOV     R5,A
000029 E4              3638             CLR     A
00002A 3C              3639             ADDC    A,R4
00002B FC              3640             MOV     R4,A
00002C 90000000   F    3641             MOV     DPTR,#xTickCount
000030 12000000   E    3642             LCALL   ?C?LSTXDATA
                       3643     ;               if( xTickCount == ( portTickType ) 0 )
                       3644                             ; SOURCE LINE # 1049
000034 E4              3645             CLR     A
000035 FF              3646             MOV     R7,A
000036 FE              3647             MOV     R6,A
000037 FD              3648             MOV     R5,A
000038 FC              3649             MOV     R4,A
000039 90000000   F    3650             MOV     DPTR,#xTickCount
00003D E0              3651             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    59

00003E F8              3652             MOV     R0,A
00003F A3              3653             INC     DPTR
000040 E0              3654             MOVX    A,@DPTR
000041 F9              3655             MOV     R1,A
000042 A3              3656             INC     DPTR
000043 E0              3657             MOVX    A,@DPTR
000044 FA              3658             MOV     R2,A
000045 A3              3659             INC     DPTR
000046 E0              3660             MOVX    A,@DPTR
000047 FB              3661             MOV     R3,A
000048 C3              3662             CLR     C
000049 12000000   E    3663             LCALL   ?C?ULCMP
00004D 704F            3664             JNZ     ?C0061
                       3665     ;               {
                       3666                             ; SOURCE LINE # 1050
                       3667     ;                       volatile xList *pxTemp;
                       3668     ; 
                       3669     ;                       /* Tick count has overflowed so we need to swap the delay lists.
                                 If there are
                       3670     ;                       any items in pxDelayedTaskList here then there is an error! */
                       3671     ;                       pxTemp = pxDelayedTaskList;
                       3672                             ; SOURCE LINE # 1055
00004F 90000000   F    3673             MOV     DPTR,#pxDelayedTaskList
000053 E0              3674             MOVX    A,@DPTR
000054 F9              3675             MOV     R1,A
000055 A3              3676             INC     DPTR
000056 E0              3677             MOVX    A,@DPTR
000057 FA              3678             MOV     R2,A
000058 A3              3679             INC     DPTR
000059 E0              3680             MOVX    A,@DPTR
00005A 850083     E    3681             MOV     DPH,?C_XBP
00005D 850082     E    3682             MOV     DPL,?C_XBP+01H
000060 759300     E    3683             MOV     DPX,#?C?XDATASEG
000063 C9              3684             XCH     A,R1
000064 F0              3685             MOVX    @DPTR,A
000065 A3              3686             INC     DPTR
000066 EA              3687             MOV     A,R2
000067 F0              3688             MOVX    @DPTR,A
000068 A3              3689             INC     DPTR
000069 E9              3690             MOV     A,R1
00006A F0              3691             MOVX    @DPTR,A
                       3692     ;                       pxDelayedTaskList = pxOverflowDelayedTaskList;
                       3693                             ; SOURCE LINE # 1056
00006B 90000000   F    3694             MOV     DPTR,#pxOverflowDelayedTaskList
00006F E0              3695             MOVX    A,@DPTR
000070 F9              3696             MOV     R1,A
000071 A3              3697             INC     DPTR
000072 E0              3698             MOVX    A,@DPTR
000073 FA              3699             MOV     R2,A
000074 A3              3700             INC     DPTR
000075 E0              3701             MOVX    A,@DPTR
000076 90000000   F    3702             MOV     DPTR,#pxDelayedTaskList
00007A C9              3703             XCH     A,R1
00007B F0              3704             MOVX    @DPTR,A
00007C A3              3705             INC     DPTR
00007D EA              3706             MOV     A,R2
00007E F0              3707             MOVX    @DPTR,A
00007F A3              3708             INC     DPTR
000080 E9              3709             MOV     A,R1
000081 F0              3710             MOVX    @DPTR,A
                       3711     ;                       pxOverflowDelayedTaskList = pxTemp;
                       3712                             ; SOURCE LINE # 1057
000082 850083     E    3713             MOV     DPH,?C_XBP
000085 850082     E    3714             MOV     DPL,?C_XBP+01H
000088 759300     E    3715             MOV     DPX,#?C?XDATASEG
00008B E0              3716             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    60

00008C F9              3717             MOV     R1,A
00008D A3              3718             INC     DPTR
00008E E0              3719             MOVX    A,@DPTR
00008F FA              3720             MOV     R2,A
000090 A3              3721             INC     DPTR
000091 E0              3722             MOVX    A,@DPTR
000092 90000000   F    3723             MOV     DPTR,#pxOverflowDelayedTaskList
000096 C9              3724             XCH     A,R1
000097 F0              3725             MOVX    @DPTR,A
000098 A3              3726             INC     DPTR
000099 EA              3727             MOV     A,R2
00009A F0              3728             MOVX    @DPTR,A
00009B A3              3729             INC     DPTR
00009C E9              3730             MOV     A,R1
00009D F0              3731             MOVX    @DPTR,A
                       3732     ;               }
                       3733                             ; SOURCE LINE # 1058
                       3734     ; 
                       3735     ;               /* See if this tick has made a timeout expire. */
                       3736     ;               prvCheckDelayedTasks();
                       3737                             ; SOURCE LINE # 1061
00009E                 3738     ?C0061:
00009E 90000000   F    3739             MOV     DPTR,#pxDelayedTaskList
0000A2 E0              3740             MOVX    A,@DPTR
0000A3 FB              3741             MOV     R3,A
0000A4 A3              3742             INC     DPTR
0000A5 E0              3743             MOVX    A,@DPTR
0000A6 FA              3744             MOV     R2,A
0000A7 A3              3745             INC     DPTR
0000A8 E0              3746             MOVX    A,@DPTR
0000A9 F9              3747             MOV     R1,A
0000AA 12000000   E    3748             LCALL   ?C?ILDPTR
0000AE 45F0            3749             ORL     A,B
0000B0 6023            3750             JZ      ?C0063
0000B2 E9              3751             MOV     A,R1
0000B3 2402            3752             ADD     A,#02H
0000B5 F9              3753             MOV     R1,A
0000B6 E4              3754             CLR     A
0000B7 3A              3755             ADDC    A,R2
0000B8 FA              3756             MOV     R2,A
0000B9 12000000   E    3757             LCALL   ?C?PLDPTR
0000BD E9              3758             MOV     A,R1
0000BE 2404            3759             ADD     A,#04H
0000C0 F9              3760             MOV     R1,A
0000C1 E4              3761             CLR     A
0000C2 3A              3762             ADDC    A,R2
0000C3 FA              3763             MOV     R2,A
0000C4 12000000   E    3764             LCALL   ?C?PLDPTR
0000C8 E9              3765             MOV     A,R1
0000C9 240A            3766             ADD     A,#0AH
0000CB F9              3767             MOV     R1,A
0000CC E4              3768             CLR     A
0000CD 3A              3769             ADDC    A,R2
0000CE FA              3770             MOV     R2,A
0000CF 12000000   E    3771             LCALL   ?C?PLDPTR
0000D3 8006            3772             SJMP    ?C0064
0000D5                 3773     ?C0063:
0000D5 7B00            3774             MOV     R3,#00H
0000D7 7A00            3775             MOV     R2,#00H
0000D9 7900            3776             MOV     R1,#00H
0000DB                 3777     ?C0064:
0000DB 850083     E    3778             MOV     DPH,?C_XBP
0000DE 850082     E    3779             MOV     DPL,?C_XBP+01H
0000E1 759300     E    3780             MOV     DPX,#?C?XDATASEG
0000E4 EB              3781             MOV     A,R3
0000E5 F0              3782             MOVX    @DPTR,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    61

0000E6 A3              3783             INC     DPTR
0000E7 EA              3784             MOV     A,R2
0000E8 F0              3785             MOVX    @DPTR,A
0000E9 A3              3786             INC     DPTR
0000EA E9              3787             MOV     A,R1
0000EB F0              3788             MOVX    @DPTR,A
0000EC 4A              3789             ORL     A,R2
0000ED 4B              3790             ORL     A,R3
0000EE 7003            3791             JNZ     $ + 5H
0000F0 010000     F    3792             AJMP    ?C0069
0000F3 850083     E    3793             MOV     DPH,?C_XBP
0000F6 850082     E    3794             MOV     DPL,?C_XBP+01H
0000F9 759300     E    3795             MOV     DPX,#?C?XDATASEG
0000FC E0              3796             MOVX    A,@DPTR
0000FD FB              3797             MOV     R3,A
0000FE A3              3798             INC     DPTR
0000FF E0              3799             MOVX    A,@DPTR
000100 FA              3800             MOV     R2,A
000101 A3              3801             INC     DPTR
000102 E0              3802             MOVX    A,@DPTR
000103 2419            3803             ADD     A,#019H
000105 F9              3804             MOV     R1,A
000106 E4              3805             CLR     A
000107 3A              3806             ADDC    A,R2
000108 FA              3807             MOV     R2,A
000109 12000000   E    3808             LCALL   ?C?LLDPTR
00010D 90000000   F    3809             MOV     DPTR,#xTickCount
000111 E0              3810             MOVX    A,@DPTR
000112 F8              3811             MOV     R0,A
000113 A3              3812             INC     DPTR
000114 E0              3813             MOVX    A,@DPTR
000115 F9              3814             MOV     R1,A
000116 A3              3815             INC     DPTR
000117 E0              3816             MOVX    A,@DPTR
000118 FA              3817             MOV     R2,A
000119 A3              3818             INC     DPTR
00011A E0              3819             MOVX    A,@DPTR
00011B FB              3820             MOV     R3,A
00011C C3              3821             CLR     C
00011D 12000000   E    3822             LCALL   ?C?ULCMP
000121 5003            3823             JNC     $ + 5H
000123 010000     F    3824             AJMP    ?C0069
000126                 3825     ?C0065:
000126 850083     E    3826             MOV     DPH,?C_XBP
000129 850082     E    3827             MOV     DPL,?C_XBP+01H
00012C 759300     E    3828             MOV     DPX,#?C?XDATASEG
00012F E0              3829             MOVX    A,@DPTR
000130 FB              3830             MOV     R3,A
000131 A3              3831             INC     DPTR
000132 E0              3832             MOVX    A,@DPTR
000133 FA              3833             MOV     R2,A
000134 A3              3834             INC     DPTR
000135 E0              3835             MOVX    A,@DPTR
000136 2419            3836             ADD     A,#019H
000138 F9              3837             MOV     R1,A
000139 E4              3838             CLR     A
00013A 3A              3839             ADDC    A,R2
00013B FA              3840             MOV     R2,A
00013C 12000000   E    3841             LCALL   _?vListRemove
000140 850083     E    3842             MOV     DPH,?C_XBP
000143 850082     E    3843             MOV     DPL,?C_XBP+01H
000146 759300     E    3844             MOV     DPX,#?C?XDATASEG
000149 E0              3845             MOVX    A,@DPTR
00014A FB              3846             MOV     R3,A
00014B A3              3847             INC     DPTR
00014C E0              3848             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    62

00014D FA              3849             MOV     R2,A
00014E A3              3850             INC     DPTR
00014F E0              3851             MOVX    A,@DPTR
000150 2436            3852             ADD     A,#036H
000152 F9              3853             MOV     R1,A
000153 E4              3854             CLR     A
000154 3A              3855             ADDC    A,R2
000155 FA              3856             MOV     R2,A
000156 12000000   E    3857             LCALL   ?C?PLDPTR
00015A EA              3858             MOV     A,R2
00015B 49              3859             ORL     A,R1
00015C 4B              3860             ORL     A,R3
00015D 601A            3861             JZ      ?C0066
00015F 850083     E    3862             MOV     DPH,?C_XBP
000162 850082     E    3863             MOV     DPL,?C_XBP+01H
000165 759300     E    3864             MOV     DPX,#?C?XDATASEG
000168 E0              3865             MOVX    A,@DPTR
000169 FB              3866             MOV     R3,A
00016A A3              3867             INC     DPTR
00016B E0              3868             MOVX    A,@DPTR
00016C FA              3869             MOV     R2,A
00016D A3              3870             INC     DPTR
00016E E0              3871             MOVX    A,@DPTR
00016F 2429            3872             ADD     A,#029H
000171 F9              3873             MOV     R1,A
000172 E4              3874             CLR     A
000173 3A              3875             ADDC    A,R2
000174 FA              3876             MOV     R2,A
000175 12000000   E    3877             LCALL   _?vListRemove
000179                 3878     ?C0066:
000179 E4              3879             CLR     A
00017A FF              3880             MOV     R7,A
00017B FE              3881             MOV     R6,A
00017C FD              3882             MOV     R5,A
00017D FC              3883             MOV     R4,A
00017E 850083     E    3884             MOV     DPH,?C_XBP
000181 850082     E    3885             MOV     DPL,?C_XBP+01H
000184 759300     E    3886             MOV     DPX,#?C?XDATASEG
000187 E0              3887             MOVX    A,@DPTR
000188 FB              3888             MOV     R3,A
000189 A3              3889             INC     DPTR
00018A E0              3890             MOVX    A,@DPTR
00018B FA              3891             MOV     R2,A
00018C A3              3892             INC     DPTR
00018D E0              3893             MOVX    A,@DPTR
00018E 2419            3894             ADD     A,#019H
000190 F9              3895             MOV     R1,A
000191 E4              3896             CLR     A
000192 3A              3897             ADDC    A,R2
000193 FA              3898             MOV     R2,A
000194 12000000   E    3899             LCALL   ?C?LSTPTR
000198 850083     E    3900             MOV     DPH,?C_XBP
00019B 850082     E    3901             MOV     DPL,?C_XBP+01H
00019E 759300     E    3902             MOV     DPX,#?C?XDATASEG
0001A1 E0              3903             MOVX    A,@DPTR
0001A2 FB              3904             MOV     R3,A
0001A3 A3              3905             INC     DPTR
0001A4 E0              3906             MOVX    A,@DPTR
0001A5 FA              3907             MOV     R2,A
0001A6 A3              3908             INC     DPTR
0001A7 E0              3909             MOVX    A,@DPTR
0001A8 2418            3910             ADD     A,#018H
0001AA F9              3911             MOV     R1,A
0001AB E4              3912             CLR     A
0001AC 3A              3913             ADDC    A,R2
0001AD FA              3914             MOV     R2,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    63

0001AE 12000000   E    3915             LCALL   ?C?CLDPTR
0001B2 FF              3916             MOV     R7,A
0001B3 90000000   F    3917             MOV     DPTR,#ucTopReadyPriority
0001B7 E0              3918             MOVX    A,@DPTR
0001B8 FE              3919             MOV     R6,A
0001B9 EF              3920             MOV     A,R7
0001BA D3              3921             SETB    C
0001BB 9E              3922             SUBB    A,R6
0001BC 4002            3923             JC      ?C0067
0001BE EF              3924             MOV     A,R7
0001BF F0              3925             MOVX    @DPTR,A
0001C0                 3926     ?C0067:
0001C0 850083     E    3927             MOV     DPH,?C_XBP
0001C3 850082     E    3928             MOV     DPL,?C_XBP+01H
0001C6 759300     E    3929             MOV     DPX,#?C?XDATASEG
0001C9 E0              3930             MOVX    A,@DPTR
0001CA FB              3931             MOV     R3,A
0001CB A3              3932             INC     DPTR
0001CC E0              3933             MOVX    A,@DPTR
0001CD FA              3934             MOV     R2,A
0001CE A3              3935             INC     DPTR
0001CF E0              3936             MOVX    A,@DPTR
0001D0 2419            3937             ADD     A,#019H
0001D2 F9              3938             MOV     R1,A
0001D3 E4              3939             CLR     A
0001D4 3A              3940             ADDC    A,R2
0001D5 FA              3941             MOV     R2,A
0001D6 9000FFFD        3942             MOV     DPTR,#0FFFDH
0001DA 12000000   E    3943             LCALL   ?C?ADDXBP
0001DE EB              3944             MOV     A,R3
0001DF F0              3945             MOVX    @DPTR,A
0001E0 A3              3946             INC     DPTR
0001E1 EA              3947             MOV     A,R2
0001E2 F0              3948             MOVX    @DPTR,A
0001E3 A3              3949             INC     DPTR
0001E4 E9              3950             MOV     A,R1
0001E5 F0              3951             MOVX    @DPTR,A
0001E6 EF              3952             MOV     A,R7
0001E7 75F018          3953             MOV     B,#018H
0001EA A4              3954             MUL     AB
0001EB 2400       F    3955             ADD     A,#LOW (pxReadyTasksLists)
0001ED F9              3956             MOV     R1,A
0001EE 7400       F    3957             MOV     A,#HIGH (pxReadyTasksLists)
0001F0 35F0            3958             ADDC    A,B
0001F2 FA              3959             MOV     R2,A
0001F3 7B00       F    3960             MOV     R3,#MBYTE (pxReadyTasksLists)
0001F5 12000000   E    3961             LCALL   _?vListInsertEnd
0001F9 010000     F    3962             AJMP    ?C0061
                       3963     ;       }
                       3964                             ; SOURCE LINE # 1062
0001FC                 3965     ?C0059:
                       3966     ;       else
                       3967     ;       {
                       3968                             ; SOURCE LINE # 1064
                       3969     ;               ++ucMissedTicks;
                       3970                             ; SOURCE LINE # 1065
0001FC 90000000   F    3971             MOV     DPTR,#ucMissedTicks
000200 E0              3972             MOVX    A,@DPTR
000201 04              3973             INC     A
000202 F0              3974             MOVX    @DPTR,A
                       3975     ;       }
                       3976                             ; SOURCE LINE # 1066
                       3977     ; 
                       3978     ;       #if ( configUSE_TICK_HOOK == 1 )
                       3979     ;       {
                       3980     ;               extern void vApplicationTickHook( void );
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    64

                       3981     ; 
                       3982     ;               vApplicationTickHook();
                       3983     ;       }
                       3984     ;       #endif
                       3985     ; 
                       3986     ; }
                       3987                             ; SOURCE LINE # 1076
000203                 3988     ?C0069:
000203 90000003        3989             MOV     DPTR,#03H
000207 02000000   E    3990             LJMP    ?C?ADDXBP
                       3991     ; END OF _?vTaskIncrementTick
                       3992     
                       3993     ; /*-----------------------------------------------------------*/
                       3994     ; 
                       3995     ; #if( ( INCLUDE_vTaskCleanUpResources == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
                       3996     ; 
                       3997     ;       void vTaskCleanUpResources( void ) reentrant
                       3998     ;       {
                       3999     ;       unsigned portSHORT usQueue;
                       4000     ;       volatile tskTCB *pxTCB;
                       4001     ; 
                       4002     ;               usQueue = ( unsigned portSHORT ) ucTopUsedPriority + ( unsigned portSHOR
                               T ) 1;
                       4003     ; 
                       4004     ;               /* Remove any TCB's from the ready queues. */
                       4005     ;               do
                       4006     ;               {
                       4007     ;                       usQueue--;
                       4008     ; 
                       4009     ;                       while( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ usQueue ] ) ) )
                       4010     ;                       {
                       4011     ;                               listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &( pxReadyTasksLists
                               [ usQueue ] ) )
                       4012     ;                               vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem 
                               ) );
                       4013     ; 
                       4014     ;                               prvDeleteTCB( ( tskTCB * ) pxTCB );
                       4015     ;                       }
                       4016     ;               }while( usQueue > ( unsigned portSHORT ) tskIDLE_PRIORITY );
                       4017     ; 
                       4018     ;               /* Remove any TCB's from the delayed queue. */
                       4019     ;               while( !listLIST_IS_EMPTY( &xDelayedTaskList1 ) )
                       4020     ;               {
                       4021     ;                       listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xDelayedTaskList1 );
                       4022     ;                       vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
                       4023     ; 
                       4024     ;                       prvDeleteTCB( ( tskTCB * ) pxTCB );
                       4025     ;               }
                       4026     ; 
                       4027     ;               /* Remove any TCB's from the overflow delayed queue. */
                       4028     ;               while( !listLIST_IS_EMPTY( &xDelayedTaskList2 ) )
                       4029     ;               {
                       4030     ;                       listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xDelayedTaskList2 );
                       4031     ;                       vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
                       4032     ; 
                       4033     ;                       prvDeleteTCB( ( tskTCB * ) pxTCB );
                       4034     ;               }
                       4035     ; 
                       4036     ;               while( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
                       4037     ;               {
                       4038     ;                       listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xSuspendedTaskList );
                       4039     ;                       vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
                       4040     ; 
                       4041     ;                       prvDeleteTCB( ( tskTCB * ) pxTCB );
                       4042     ;               }               
                       4043     ; 
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    65

                       4044     ;               while( !listLIST_IS_EMPTY( &xPendingReadyList ) )
                       4045     ;               {
                       4046     ;                       listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xPendingReadyList );
                       4047     ;                       vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
                       4048     ; 
                       4049     ;                       prvDeleteTCB( ( tskTCB * ) pxTCB );
                       4050     ;               }               
                       4051     ;       }
                       4052     ; 
                       4053     ; #endif
                       4054     ; /*-----------------------------------------------------------*/
                       4055     ; 
                       4056     ; inline void vTaskSwitchContext( void ) reentrant
                       4057     
------                 4058             RSEG  ?PR?_?vTaskSwitchContext?TASKS
000000                 4059     _?vTaskSwitchContext:
                       4060             USING   0
                       4061                             ; SOURCE LINE # 1140
                       4062     ; {
                       4063     ;       if( ucSchedulerSuspended != pdFALSE )
                       4064                             ; SOURCE LINE # 1142
000000 90000000   F    4065             MOV     DPTR,#ucSchedulerSuspended
000004 E0              4066             MOVX    A,@DPTR
000005 6003            4067             JZ      $ + 5H
000007 010000     F    4068             AJMP    ?C0071
                       4069     ;       {
                       4070                             ; SOURCE LINE # 1143
                       4071     ;               /* The scheduler is currently suspended - do not allow a context
                       4072     ;               switch. */
                       4073     ;               return;
                       4074     ;       }
                       4075                             ; SOURCE LINE # 1147
00000A                 4076     ?C0070:
00000A                 4077     ?C0072:
                       4078     ; 
                       4079     ;       /* Find the highest priority queue that contains ready tasks. */
                       4080     ;       while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ ucTopReadyPriority ] ) ) )
                       4081                             ; SOURCE LINE # 1150
00000A 90000000   F    4082             MOV     DPTR,#ucTopReadyPriority
00000E E0              4083             MOVX    A,@DPTR
00000F 75F018          4084             MOV     B,#018H
000012 A4              4085             MUL     AB
000013 2400       F    4086             ADD     A,#LOW (pxReadyTasksLists)
000015 F582            4087             MOV     DPL,A
000017 E5F0            4088             MOV     A,B
000019 3400       F    4089             ADDC    A,#HIGH (pxReadyTasksLists)
00001B F583            4090             MOV     DPH,A
00001D 759300     E    4091             MOV     DPX,#?C?XDATASEG
000020 E0              4092             MOVX    A,@DPTR
000021 FE              4093             MOV     R6,A
000022 A3              4094             INC     DPTR
000023 E0              4095             MOVX    A,@DPTR
000024 4E              4096             ORL     A,R6
000025 7009            4097             JNZ     ?C0073
                       4098     ;       {
                       4099                             ; SOURCE LINE # 1151
                       4100     ;               --ucTopReadyPriority;
                       4101                             ; SOURCE LINE # 1152
000027 90000000   F    4102             MOV     DPTR,#ucTopReadyPriority
00002B E0              4103             MOVX    A,@DPTR
00002C 14              4104             DEC     A
00002D F0              4105             MOVX    @DPTR,A
                       4106     ;       }
                       4107                             ; SOURCE LINE # 1153
00002E 80DA            4108             SJMP    ?C0072
000030                 4109     ?C0073:
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    66

                       4110     ; 
                       4111     ;       /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
                       4112     ;       same priority get an equal share of the processor time. */
                       4113     ;       listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ ucTopReadyPrior
                               ity ] ) );
                       4114                             ; SOURCE LINE # 1157
000030 90000000   F    4115             MOV     DPTR,#ucTopReadyPriority
000034 E0              4116             MOVX    A,@DPTR
000035 75F018          4117             MOV     B,#018H
000038 A4              4118             MUL     AB
000039 2400       F    4119             ADD     A,#LOW (pxReadyTasksLists+05H)
00003B F582            4120             MOV     DPL,A
00003D E5F0            4121             MOV     A,B
00003F 3400       F    4122             ADDC    A,#HIGH (pxReadyTasksLists+05H)
000041 F583            4123             MOV     DPH,A
000043 759300     E    4124             MOV     DPX,#?C?XDATASEG
000046 E0              4125             MOVX    A,@DPTR
000047 FB              4126             MOV     R3,A
000048 A3              4127             INC     DPTR
000049 E0              4128             MOVX    A,@DPTR
00004A FA              4129             MOV     R2,A
00004B A3              4130             INC     DPTR
00004C E0              4131             MOVX    A,@DPTR
00004D 2404            4132             ADD     A,#04H
00004F F9              4133             MOV     R1,A
000050 E4              4134             CLR     A
000051 3A              4135             ADDC    A,R2
000052 FA              4136             MOV     R2,A
000053 12000000   E    4137             LCALL   ?C?PLDPTR
000057 90000000   F    4138             MOV     DPTR,#ucTopReadyPriority
00005B E0              4139             MOVX    A,@DPTR
00005C 75F018          4140             MOV     B,#018H
00005F A4              4141             MUL     AB
000060 2400       F    4142             ADD     A,#LOW (pxReadyTasksLists+05H)
000062 F582            4143             MOV     DPL,A
000064 E5F0            4144             MOV     A,B
000066 3400       F    4145             ADDC    A,#HIGH (pxReadyTasksLists+05H)
000068 F583            4146             MOV     DPH,A
00006A 759300     E    4147             MOV     DPX,#?C?XDATASEG
00006D EB              4148             MOV     A,R3
00006E F0              4149             MOVX    @DPTR,A
00006F A3              4150             INC     DPTR
000070 EA              4151             MOV     A,R2
000071 F0              4152             MOVX    @DPTR,A
000072 A3              4153             INC     DPTR
000073 E9              4154             MOV     A,R1
000074 F0              4155             MOVX    @DPTR,A
000075 90000000   F    4156             MOV     DPTR,#ucTopReadyPriority
000079 E0              4157             MOVX    A,@DPTR
00007A 75F018          4158             MOV     B,#018H
00007D A4              4159             MUL     AB
00007E 2400       F    4160             ADD     A,#LOW (pxReadyTasksLists+02H)
000080 F582            4161             MOV     DPL,A
000082 E5F0            4162             MOV     A,B
000084 3400       F    4163             ADDC    A,#HIGH (pxReadyTasksLists+02H)
000086 F583            4164             MOV     DPH,A
000088 759300     E    4165             MOV     DPX,#?C?XDATASEG
00008B E0              4166             MOVX    A,@DPTR
00008C FB              4167             MOV     R3,A
00008D A3              4168             INC     DPTR
00008E E0              4169             MOVX    A,@DPTR
00008F FA              4170             MOV     R2,A
000090 A3              4171             INC     DPTR
000091 E0              4172             MOVX    A,@DPTR
000092 F9              4173             MOV     R1,A
000093 C003            4174             PUSH    AR3
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    67

000095 C002            4175             PUSH    AR2
000097 C001            4176             PUSH    AR1
000099 90000000   F    4177             MOV     DPTR,#ucTopReadyPriority
00009D E0              4178             MOVX    A,@DPTR
00009E 75F018          4179             MOV     B,#018H
0000A1 A4              4180             MUL     AB
0000A2 2400       F    4181             ADD     A,#LOW (pxReadyTasksLists+05H)
0000A4 F582            4182             MOV     DPL,A
0000A6 E5F0            4183             MOV     A,B
0000A8 3400       F    4184             ADDC    A,#HIGH (pxReadyTasksLists+05H)
0000AA F583            4185             MOV     DPH,A
0000AC 759300     E    4186             MOV     DPX,#?C?XDATASEG
0000AF E0              4187             MOVX    A,@DPTR
0000B0 FB              4188             MOV     R3,A
0000B1 A3              4189             INC     DPTR
0000B2 E0              4190             MOVX    A,@DPTR
0000B3 FA              4191             MOV     R2,A
0000B4 A3              4192             INC     DPTR
0000B5 E0              4193             MOVX    A,@DPTR
0000B6 F9              4194             MOV     R1,A
0000B7 D082            4195             POP     DPL
0000B9 D083            4196             POP     DPH
0000BB D0E0            4197             POP     ACC
0000BD 6B              4198             XRL     A,R3
0000BE 7008            4199             JNZ     ?C0116
0000C0 E9              4200             MOV     A,R1
0000C1 6582            4201             XRL     A,DPL
0000C3 7003            4202             JNZ     ?C0116
0000C5 EA              4203             MOV     A,R2
0000C6 6583            4204             XRL     A,DPH
0000C8                 4205     ?C0116:
0000C8 7045            4206             JNZ     ?C0074
0000CA 90000000   F    4207             MOV     DPTR,#ucTopReadyPriority
0000CE E0              4208             MOVX    A,@DPTR
0000CF 75F018          4209             MOV     B,#018H
0000D2 A4              4210             MUL     AB
0000D3 2400       F    4211             ADD     A,#LOW (pxReadyTasksLists+05H)
0000D5 F582            4212             MOV     DPL,A
0000D7 E5F0            4213             MOV     A,B
0000D9 3400       F    4214             ADDC    A,#HIGH (pxReadyTasksLists+05H)
0000DB F583            4215             MOV     DPH,A
0000DD 759300     E    4216             MOV     DPX,#?C?XDATASEG
0000E0 E0              4217             MOVX    A,@DPTR
0000E1 FB              4218             MOV     R3,A
0000E2 A3              4219             INC     DPTR
0000E3 E0              4220             MOVX    A,@DPTR
0000E4 FA              4221             MOV     R2,A
0000E5 A3              4222             INC     DPTR
0000E6 E0              4223             MOVX    A,@DPTR
0000E7 2404            4224             ADD     A,#04H
0000E9 F9              4225             MOV     R1,A
0000EA E4              4226             CLR     A
0000EB 3A              4227             ADDC    A,R2
0000EC FA              4228             MOV     R2,A
0000ED 12000000   E    4229             LCALL   ?C?PLDPTR
0000F1 90000000   F    4230             MOV     DPTR,#ucTopReadyPriority
0000F5 E0              4231             MOVX    A,@DPTR
0000F6 75F018          4232             MOV     B,#018H
0000F9 A4              4233             MUL     AB
0000FA 2400       F    4234             ADD     A,#LOW (pxReadyTasksLists+05H)
0000FC F582            4235             MOV     DPL,A
0000FE E5F0            4236             MOV     A,B
000100 3400       F    4237             ADDC    A,#HIGH (pxReadyTasksLists+05H)
000102 F583            4238             MOV     DPH,A
000104 759300     E    4239             MOV     DPX,#?C?XDATASEG
000107 EB              4240             MOV     A,R3
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    68

000108 F0              4241             MOVX    @DPTR,A
000109 A3              4242             INC     DPTR
00010A EA              4243             MOV     A,R2
00010B F0              4244             MOVX    @DPTR,A
00010C A3              4245             INC     DPTR
00010D E9              4246             MOV     A,R1
00010E F0              4247             MOVX    @DPTR,A
00010F                 4248     ?C0074:
00010F 90000000   F    4249             MOV     DPTR,#ucTopReadyPriority
000113 E0              4250             MOVX    A,@DPTR
000114 75F018          4251             MOV     B,#018H
000117 A4              4252             MUL     AB
000118 2400       F    4253             ADD     A,#LOW (pxReadyTasksLists+05H)
00011A F582            4254             MOV     DPL,A
00011C E5F0            4255             MOV     A,B
00011E 3400       F    4256             ADDC    A,#HIGH (pxReadyTasksLists+05H)
000120 F583            4257             MOV     DPH,A
000122 759300     E    4258             MOV     DPX,#?C?XDATASEG
000125 E0              4259             MOVX    A,@DPTR
000126 FB              4260             MOV     R3,A
000127 A3              4261             INC     DPTR
000128 E0              4262             MOVX    A,@DPTR
000129 FA              4263             MOV     R2,A
00012A A3              4264             INC     DPTR
00012B E0              4265             MOVX    A,@DPTR
00012C 240A            4266             ADD     A,#0AH
00012E F9              4267             MOV     R1,A
00012F E4              4268             CLR     A
000130 3A              4269             ADDC    A,R2
000131 FA              4270             MOV     R2,A
000132 12000000   E    4271             LCALL   ?C?PLDPTR
000136 90000000   F    4272             MOV     DPTR,#pxCurrentTCB
00013A EB              4273             MOV     A,R3
00013B F0              4274             MOVX    @DPTR,A
00013C A3              4275             INC     DPTR
00013D EA              4276             MOV     A,R2
00013E F0              4277             MOVX    @DPTR,A
00013F A3              4278             INC     DPTR
000140 E9              4279             MOV     A,R1
000141 F0              4280             MOVX    @DPTR,A
                       4281     ;       vWriteTraceToBuffer();
                       4282     ; }
                       4283                             ; SOURCE LINE # 1159
000142                 4284     ?C0071:
000142 22              4285             RET     
                       4286     ; END OF _?vTaskSwitchContext
                       4287     
                       4288     ; /*-----------------------------------------------------------*/
                       4289     ; 
                       4290     ; void vTaskPlaceOnEventList( xList *pxEventList, portTickType xTicksToWait ) reentrant
                       4291     
------                 4292             RSEG  ?PR?_?vTaskPlaceOnEventList?TASKS
000000                 4293     _?vTaskPlaceOnEventList:
                       4294             USING   0
                       4295                             ; SOURCE LINE # 1162
000000 9000FFFC        4296             MOV     DPTR,#0FFFCH
000004 12000000   E    4297             LCALL   ?C?ADDXBP
000008 12000000   E    4298             LCALL   ?C?LSTXDATA
00000C 9000FFFD        4299             MOV     DPTR,#0FFFDH
000010 12000000   E    4300             LCALL   ?C?ADDXBP
000014 EB              4301             MOV     A,R3
000015 F0              4302             MOVX    @DPTR,A
000016 A3              4303             INC     DPTR
000017 EA              4304             MOV     A,R2
000018 F0              4305             MOVX    @DPTR,A
000019 A3              4306             INC     DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    69

00001A E9              4307             MOV     A,R1
00001B F0              4308             MOVX    @DPTR,A
00001C 9000FFFC        4309             MOV     DPTR,#0FFFCH
000020 12000000   E    4310             LCALL   ?C?ADDXBP
                       4311     ; {
                       4312     ; portTickType xTimeToWake;
                       4313     ; 
                       4314     ;       /* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
                       4315     ;       SCHEDULER SUSPENDED. */
                       4316     ; 
                       4317     ;       /* Place the event list item of the TCB in the appropriate event list.
                       4318     ;       This is placed in the list in priority order so the highest priority task
                       4319     ;       is the first to be woken by the event. */
                       4320     ;       vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventLis
                               tItem ) );
                       4321                             ; SOURCE LINE # 1172
000024 90000000   F    4322             MOV     DPTR,#pxCurrentTCB
000028 E0              4323             MOVX    A,@DPTR
000029 FB              4324             MOV     R3,A
00002A A3              4325             INC     DPTR
00002B E0              4326             MOVX    A,@DPTR
00002C FA              4327             MOV     R2,A
00002D A3              4328             INC     DPTR
00002E E0              4329             MOVX    A,@DPTR
00002F 2429            4330             ADD     A,#029H
000031 F9              4331             MOV     R1,A
000032 E4              4332             CLR     A
000033 3A              4333             ADDC    A,R2
000034 FA              4334             MOV     R2,A
000035 9000FFFD        4335             MOV     DPTR,#0FFFDH
000039 12000000   E    4336             LCALL   ?C?ADDXBP
00003D EB              4337             MOV     A,R3
00003E F0              4338             MOVX    @DPTR,A
00003F A3              4339             INC     DPTR
000040 EA              4340             MOV     A,R2
000041 F0              4341             MOVX    @DPTR,A
000042 A3              4342             INC     DPTR
000043 E9              4343             MOV     A,R1
000044 F0              4344             MOVX    @DPTR,A
000045 90000007        4345             MOV     DPTR,#07H
000049 12000000   E    4346             LCALL   ?C?XBPOFF
00004D E0              4347             MOVX    A,@DPTR
00004E FB              4348             MOV     R3,A
00004F A3              4349             INC     DPTR
000050 E0              4350             MOVX    A,@DPTR
000051 FA              4351             MOV     R2,A
000052 A3              4352             INC     DPTR
000053 E0              4353             MOVX    A,@DPTR
000054 F9              4354             MOV     R1,A
000055 12000000   E    4355             LCALL   _?vListInsert
                       4356     ; 
                       4357     ;       /* Calculate the time at which the task should be woken if the event does
                       4358     ;       not occur.  This may overflow but this doesn't matter. */
                       4359     ;       xTimeToWake = xTickCount + xTicksToWait;
                       4360                             ; SOURCE LINE # 1176
000059 90000007        4361             MOV     DPTR,#07H
00005D 12000000   E    4362             LCALL   ?C?XBPOFF
000061 E0              4363             MOVX    A,@DPTR
000062 FC              4364             MOV     R4,A
000063 A3              4365             INC     DPTR
000064 E0              4366             MOVX    A,@DPTR
000065 FD              4367             MOV     R5,A
000066 A3              4368             INC     DPTR
000067 E0              4369             MOVX    A,@DPTR
000068 FE              4370             MOV     R6,A
000069 A3              4371             INC     DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    70

00006A E0              4372             MOVX    A,@DPTR
00006B FF              4373             MOV     R7,A
00006C 90000000   F    4374             MOV     DPTR,#xTickCount
000070 E0              4375             MOVX    A,@DPTR
000071 F8              4376             MOV     R0,A
000072 A3              4377             INC     DPTR
000073 E0              4378             MOVX    A,@DPTR
000074 F9              4379             MOV     R1,A
000075 A3              4380             INC     DPTR
000076 E0              4381             MOVX    A,@DPTR
000077 FA              4382             MOV     R2,A
000078 A3              4383             INC     DPTR
000079 E0              4384             MOVX    A,@DPTR
00007A 2F              4385             ADD     A,R7
00007B FF              4386             MOV     R7,A
00007C EA              4387             MOV     A,R2
00007D 3E              4388             ADDC    A,R6
00007E FE              4389             MOV     R6,A
00007F E9              4390             MOV     A,R1
000080 3D              4391             ADDC    A,R5
000081 FD              4392             MOV     R5,A
000082 E8              4393             MOV     A,R0
000083 3C              4394             ADDC    A,R4
000084 FC              4395             MOV     R4,A
000085 850083     E    4396             MOV     DPH,?C_XBP
000088 850082     E    4397             MOV     DPL,?C_XBP+01H
00008B 759300     E    4398             MOV     DPX,#?C?XDATASEG
00008E 12000000   E    4399             LCALL   ?C?LSTXDATA
                       4400     ; 
                       4401     ;       /* We must remove ourselves from the ready list before adding ourselves
                       4402     ;       to the blocked list as the same list item is used for both lists.  We have
                       4403     ;       exclusive access to the ready lists as the scheduler is locked. */
                       4404     ;       vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
                       4405                             ; SOURCE LINE # 1181
000092 90000000   F    4406             MOV     DPTR,#pxCurrentTCB
000096 E0              4407             MOVX    A,@DPTR
000097 FB              4408             MOV     R3,A
000098 A3              4409             INC     DPTR
000099 E0              4410             MOVX    A,@DPTR
00009A FA              4411             MOV     R2,A
00009B A3              4412             INC     DPTR
00009C E0              4413             MOVX    A,@DPTR
00009D 2419            4414             ADD     A,#019H
00009F F9              4415             MOV     R1,A
0000A0 E4              4416             CLR     A
0000A1 3A              4417             ADDC    A,R2
0000A2 FA              4418             MOV     R2,A
0000A3 12000000   E    4419             LCALL   _?vListRemove
                       4420     ; 
                       4421     ;       listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
                       4422                             ; SOURCE LINE # 1183
0000A7 850083     E    4423             MOV     DPH,?C_XBP
0000AA 850082     E    4424             MOV     DPL,?C_XBP+01H
0000AD 759300     E    4425             MOV     DPX,#?C?XDATASEG
0000B0 E0              4426             MOVX    A,@DPTR
0000B1 FC              4427             MOV     R4,A
0000B2 A3              4428             INC     DPTR
0000B3 E0              4429             MOVX    A,@DPTR
0000B4 FD              4430             MOV     R5,A
0000B5 A3              4431             INC     DPTR
0000B6 E0              4432             MOVX    A,@DPTR
0000B7 FE              4433             MOV     R6,A
0000B8 A3              4434             INC     DPTR
0000B9 E0              4435             MOVX    A,@DPTR
0000BA FF              4436             MOV     R7,A
0000BB 90000000   F    4437             MOV     DPTR,#pxCurrentTCB
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    71

0000BF E0              4438             MOVX    A,@DPTR
0000C0 FB              4439             MOV     R3,A
0000C1 A3              4440             INC     DPTR
0000C2 E0              4441             MOVX    A,@DPTR
0000C3 FA              4442             MOV     R2,A
0000C4 A3              4443             INC     DPTR
0000C5 E0              4444             MOVX    A,@DPTR
0000C6 2419            4445             ADD     A,#019H
0000C8 F9              4446             MOV     R1,A
0000C9 E4              4447             CLR     A
0000CA 3A              4448             ADDC    A,R2
0000CB FA              4449             MOV     R2,A
0000CC 12000000   E    4450             LCALL   ?C?LSTPTR
                       4451     ; 
                       4452     ;       if( xTimeToWake < xTickCount )
                       4453                             ; SOURCE LINE # 1185
0000D0 90000000   F    4454             MOV     DPTR,#xTickCount
0000D4 E0              4455             MOVX    A,@DPTR
0000D5 FC              4456             MOV     R4,A
0000D6 A3              4457             INC     DPTR
0000D7 E0              4458             MOVX    A,@DPTR
0000D8 FD              4459             MOV     R5,A
0000D9 A3              4460             INC     DPTR
0000DA E0              4461             MOVX    A,@DPTR
0000DB FE              4462             MOV     R6,A
0000DC A3              4463             INC     DPTR
0000DD E0              4464             MOVX    A,@DPTR
0000DE FF              4465             MOV     R7,A
0000DF 850083     E    4466             MOV     DPH,?C_XBP
0000E2 850082     E    4467             MOV     DPL,?C_XBP+01H
0000E5 759300     E    4468             MOV     DPX,#?C?XDATASEG
0000E8 E0              4469             MOVX    A,@DPTR
0000E9 F8              4470             MOV     R0,A
0000EA A3              4471             INC     DPTR
0000EB E0              4472             MOVX    A,@DPTR
0000EC F9              4473             MOV     R1,A
0000ED A3              4474             INC     DPTR
0000EE E0              4475             MOVX    A,@DPTR
0000EF FA              4476             MOV     R2,A
0000F0 A3              4477             INC     DPTR
0000F1 E0              4478             MOVX    A,@DPTR
0000F2 FB              4479             MOV     R3,A
0000F3 C3              4480             CLR     C
0000F4 12000000   E    4481             LCALL   ?C?ULCMP
0000F8 90000000   F    4482             MOV     DPTR,#pxCurrentTCB
0000FC E0              4483             MOVX    A,@DPTR
0000FD FB              4484             MOV     R3,A
0000FE 5021            4485             JNC     ?C0075
                       4486     ;       {
                       4487                             ; SOURCE LINE # 1186
                       4488     ;               /* Wake time has overflowed.  Place this item in the overflow list. */
                       4489     ;               vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( p
                               xCurrentTCB->xGenericListItem ) );
                       4490                             ; SOURCE LINE # 1188
000100 A3              4491             INC     DPTR
000101 E0              4492             MOVX    A,@DPTR
000102 FA              4493             MOV     R2,A
000103 A3              4494             INC     DPTR
000104 E0              4495             MOVX    A,@DPTR
000105 2419            4496             ADD     A,#019H
000107 F9              4497             MOV     R1,A
000108 E4              4498             CLR     A
000109 3A              4499             ADDC    A,R2
00010A FA              4500             MOV     R2,A
00010B 9000FFFD        4501             MOV     DPTR,#0FFFDH
00010F 12000000   E    4502             LCALL   ?C?ADDXBP
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    72

000113 EB              4503             MOV     A,R3
000114 F0              4504             MOVX    @DPTR,A
000115 A3              4505             INC     DPTR
000116 EA              4506             MOV     A,R2
000117 F0              4507             MOVX    @DPTR,A
000118 A3              4508             INC     DPTR
000119 E9              4509             MOV     A,R1
00011A F0              4510             MOVX    @DPTR,A
00011B 90000000   F    4511             MOV     DPTR,#pxOverflowDelayedTaskList
                       4512     ;       }
                       4513                             ; SOURCE LINE # 1189
00011F 801F            4514             SJMP    ?C0123
000121                 4515     ?C0075:
                       4516     ;       else
                       4517     ;       {
                       4518                             ; SOURCE LINE # 1191
                       4519     ;               /* The wake time has not overflowed, so we can use the current block lis
                               t. */
                       4520     ;               vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrent
                               TCB->xGenericListItem ) );
                       4521                             ; SOURCE LINE # 1193
000121 A3              4522             INC     DPTR
000122 E0              4523             MOVX    A,@DPTR
000123 FA              4524             MOV     R2,A
000124 A3              4525             INC     DPTR
000125 E0              4526             MOVX    A,@DPTR
000126 2419            4527             ADD     A,#019H
000128 F9              4528             MOV     R1,A
000129 E4              4529             CLR     A
00012A 3A              4530             ADDC    A,R2
00012B FA              4531             MOV     R2,A
00012C 9000FFFD        4532             MOV     DPTR,#0FFFDH
000130 12000000   E    4533             LCALL   ?C?ADDXBP
000134 EB              4534             MOV     A,R3
000135 F0              4535             MOVX    @DPTR,A
000136 A3              4536             INC     DPTR
000137 EA              4537             MOV     A,R2
000138 F0              4538             MOVX    @DPTR,A
000139 A3              4539             INC     DPTR
00013A E9              4540             MOV     A,R1
00013B F0              4541             MOVX    @DPTR,A
00013C 90000000   F    4542             MOV     DPTR,#pxDelayedTaskList
000140                 4543     ?C0123:
000140 E0              4544             MOVX    A,@DPTR
000141 FB              4545             MOV     R3,A
000142 A3              4546             INC     DPTR
000143 E0              4547             MOVX    A,@DPTR
000144 FA              4548             MOV     R2,A
000145 A3              4549             INC     DPTR
000146 E0              4550             MOVX    A,@DPTR
000147 F9              4551             MOV     R1,A
000148 12000000   E    4552             LCALL   _?vListInsert
                       4553     ;       }
                       4554                             ; SOURCE LINE # 1194
                       4555     ; }
                       4556                             ; SOURCE LINE # 1195
00014C                 4557     ?C0077:
00014C 9000000B        4558             MOV     DPTR,#0BH
000150 02000000   E    4559             LJMP    ?C?ADDXBP
                       4560     ; END OF _?vTaskPlaceOnEventList
                       4561     
                       4562     ; /*-----------------------------------------------------------*/
                       4563     ; 
                       4564     ; signed portCHAR cTaskRemoveFromEventList( const xList *pxEventList ) reentrant
                       4565     
------                 4566             RSEG  ?PR?_?cTaskRemoveFromEventList?TASKS
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    73

000000                 4567     _?cTaskRemoveFromEventList:
                       4568             USING   0
                       4569                             ; SOURCE LINE # 1198
000000 9000FFFD        4570             MOV     DPTR,#0FFFDH
000004 12000000   E    4571             LCALL   ?C?ADDXBP
000008 EB              4572             MOV     A,R3
000009 F0              4573             MOVX    @DPTR,A
00000A A3              4574             INC     DPTR
00000B EA              4575             MOV     A,R2
00000C F0              4576             MOVX    @DPTR,A
00000D A3              4577             INC     DPTR
00000E E9              4578             MOV     A,R1
00000F F0              4579             MOVX    @DPTR,A
000010 9000FFFD        4580             MOV     DPTR,#0FFFDH
000014 12000000   E    4581             LCALL   ?C?ADDXBP
                       4582     ; {
                       4583     ; tskTCB *pxUnblockedTCB;
                       4584     ; 
                       4585     ;       /* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
                       4586     ;       SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
                       4587     ; 
                       4588     ;       /* The event list is sorted in priority order, so we can remove the 
                       4589     ;       first in the list, remove the TCB from the delayed list, and add
                       4590     ;       it to the ready list. 
                       4591     ;       
                       4592     ;       If an event is for a queue that is locked then this function will never
                       4593     ;       get called - the lock count on the queue will get modified instead.  This
                       4594     ;       means we can always expect exclusive access to the event list here. */
                       4595     ;       pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
                       4596                             ; SOURCE LINE # 1212
000018 90000003        4597             MOV     DPTR,#03H
00001C 12000000   E    4598             LCALL   ?C?XBPOFF
000020 E0              4599             MOVX    A,@DPTR
000021 FB              4600             MOV     R3,A
000022 A3              4601             INC     DPTR
000023 E0              4602             MOVX    A,@DPTR
000024 FA              4603             MOV     R2,A
000025 A3              4604             INC     DPTR
000026 E0              4605             MOVX    A,@DPTR
000027 F9              4606             MOV     R1,A
000028 12000000   E    4607             LCALL   ?C?ILDPTR
00002C 45F0            4608             ORL     A,B
00002E 6023            4609             JZ      ?C0078
000030 E9              4610             MOV     A,R1
000031 2402            4611             ADD     A,#02H
000033 F9              4612             MOV     R1,A
000034 E4              4613             CLR     A
000035 3A              4614             ADDC    A,R2
000036 FA              4615             MOV     R2,A
000037 12000000   E    4616             LCALL   ?C?PLDPTR
00003B E9              4617             MOV     A,R1
00003C 2404            4618             ADD     A,#04H
00003E F9              4619             MOV     R1,A
00003F E4              4620             CLR     A
000040 3A              4621             ADDC    A,R2
000041 FA              4622             MOV     R2,A
000042 12000000   E    4623             LCALL   ?C?PLDPTR
000046 E9              4624             MOV     A,R1
000047 240A            4625             ADD     A,#0AH
000049 F9              4626             MOV     R1,A
00004A E4              4627             CLR     A
00004B 3A              4628             ADDC    A,R2
00004C FA              4629             MOV     R2,A
00004D 12000000   E    4630             LCALL   ?C?PLDPTR
000051 8006            4631             SJMP    ?C0079
000053                 4632     ?C0078:
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    74

000053 7B00            4633             MOV     R3,#00H
000055 7A00            4634             MOV     R2,#00H
000057 7900            4635             MOV     R1,#00H
000059                 4636     ?C0079:
000059 850083     E    4637             MOV     DPH,?C_XBP
00005C 850082     E    4638             MOV     DPL,?C_XBP+01H
00005F 759300     E    4639             MOV     DPX,#?C?XDATASEG
000062 EB              4640             MOV     A,R3
000063 F0              4641             MOVX    @DPTR,A
000064 A3              4642             INC     DPTR
000065 EA              4643             MOV     A,R2
000066 F0              4644             MOVX    @DPTR,A
000067 A3              4645             INC     DPTR
000068 E9              4646             MOV     A,R1
000069 F0              4647             MOVX    @DPTR,A
                       4648     ;       vListRemove( &( pxUnblockedTCB->xEventListItem ) );
                       4649                             ; SOURCE LINE # 1213
00006A 850083     E    4650             MOV     DPH,?C_XBP
00006D 850082     E    4651             MOV     DPL,?C_XBP+01H
000070 759300     E    4652             MOV     DPX,#?C?XDATASEG
000073 E0              4653             MOVX    A,@DPTR
000074 FB              4654             MOV     R3,A
000075 A3              4655             INC     DPTR
000076 E0              4656             MOVX    A,@DPTR
000077 FA              4657             MOV     R2,A
000078 A3              4658             INC     DPTR
000079 E0              4659             MOVX    A,@DPTR
00007A 2429            4660             ADD     A,#029H
00007C F9              4661             MOV     R1,A
00007D E4              4662             CLR     A
00007E 3A              4663             ADDC    A,R2
00007F FA              4664             MOV     R2,A
000080 12000000   E    4665             LCALL   _?vListRemove
                       4666     ; 
                       4667     ;       if( ucSchedulerSuspended == ( unsigned portCHAR ) pdFALSE )
                       4668                             ; SOURCE LINE # 1215
000084 90000000   F    4669             MOV     DPTR,#ucSchedulerSuspended
000088 E0              4670             MOVX    A,@DPTR
000089 6003            4671             JZ      $ + 5H
00008B 010000     F    4672             AJMP    ?C0080
                       4673     ;       {
                       4674                             ; SOURCE LINE # 1216
                       4675     ;               vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
                       4676                             ; SOURCE LINE # 1217
00008E 850083     E    4677             MOV     DPH,?C_XBP
000091 850082     E    4678             MOV     DPL,?C_XBP+01H
000094 759300     E    4679             MOV     DPX,#?C?XDATASEG
000097 E0              4680             MOVX    A,@DPTR
000098 FB              4681             MOV     R3,A
000099 A3              4682             INC     DPTR
00009A E0              4683             MOVX    A,@DPTR
00009B FA              4684             MOV     R2,A
00009C A3              4685             INC     DPTR
00009D E0              4686             MOVX    A,@DPTR
00009E 2419            4687             ADD     A,#019H
0000A0 F9              4688             MOV     R1,A
0000A1 E4              4689             CLR     A
0000A2 3A              4690             ADDC    A,R2
0000A3 FA              4691             MOV     R2,A
0000A4 12000000   E    4692             LCALL   _?vListRemove
                       4693     ;               prvAddTaskToReadyQueue( pxUnblockedTCB );
                       4694                             ; SOURCE LINE # 1218
0000A8 E4              4695             CLR     A
0000A9 FF              4696             MOV     R7,A
0000AA FE              4697             MOV     R6,A
0000AB FD              4698             MOV     R5,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    75

0000AC FC              4699             MOV     R4,A
0000AD 850083     E    4700             MOV     DPH,?C_XBP
0000B0 850082     E    4701             MOV     DPL,?C_XBP+01H
0000B3 759300     E    4702             MOV     DPX,#?C?XDATASEG
0000B6 E0              4703             MOVX    A,@DPTR
0000B7 FB              4704             MOV     R3,A
0000B8 A3              4705             INC     DPTR
0000B9 E0              4706             MOVX    A,@DPTR
0000BA FA              4707             MOV     R2,A
0000BB A3              4708             INC     DPTR
0000BC E0              4709             MOVX    A,@DPTR
0000BD 2419            4710             ADD     A,#019H
0000BF F9              4711             MOV     R1,A
0000C0 E4              4712             CLR     A
0000C1 3A              4713             ADDC    A,R2
0000C2 FA              4714             MOV     R2,A
0000C3 12000000   E    4715             LCALL   ?C?LSTPTR
0000C7 850083     E    4716             MOV     DPH,?C_XBP
0000CA 850082     E    4717             MOV     DPL,?C_XBP+01H
0000CD 759300     E    4718             MOV     DPX,#?C?XDATASEG
0000D0 E0              4719             MOVX    A,@DPTR
0000D1 FB              4720             MOV     R3,A
0000D2 A3              4721             INC     DPTR
0000D3 E0              4722             MOVX    A,@DPTR
0000D4 FA              4723             MOV     R2,A
0000D5 A3              4724             INC     DPTR
0000D6 E0              4725             MOVX    A,@DPTR
0000D7 2418            4726             ADD     A,#018H
0000D9 F9              4727             MOV     R1,A
0000DA E4              4728             CLR     A
0000DB 3A              4729             ADDC    A,R2
0000DC FA              4730             MOV     R2,A
0000DD 12000000   E    4731             LCALL   ?C?CLDPTR
0000E1 FF              4732             MOV     R7,A
0000E2 90000000   F    4733             MOV     DPTR,#ucTopReadyPriority
0000E6 E0              4734             MOVX    A,@DPTR
0000E7 FE              4735             MOV     R6,A
0000E8 EF              4736             MOV     A,R7
0000E9 D3              4737             SETB    C
0000EA 9E              4738             SUBB    A,R6
0000EB 4002            4739             JC      ?C0081
0000ED EF              4740             MOV     A,R7
0000EE F0              4741             MOVX    @DPTR,A
0000EF                 4742     ?C0081:
0000EF 850083     E    4743             MOV     DPH,?C_XBP
0000F2 850082     E    4744             MOV     DPL,?C_XBP+01H
0000F5 759300     E    4745             MOV     DPX,#?C?XDATASEG
0000F8 E0              4746             MOVX    A,@DPTR
0000F9 FB              4747             MOV     R3,A
0000FA A3              4748             INC     DPTR
0000FB E0              4749             MOVX    A,@DPTR
0000FC FA              4750             MOV     R2,A
0000FD A3              4751             INC     DPTR
0000FE E0              4752             MOVX    A,@DPTR
0000FF 2419            4753             ADD     A,#019H
000101 F9              4754             MOV     R1,A
000102 E4              4755             CLR     A
000103 3A              4756             ADDC    A,R2
000104 FA              4757             MOV     R2,A
000105 9000FFFD        4758             MOV     DPTR,#0FFFDH
000109 12000000   E    4759             LCALL   ?C?ADDXBP
00010D EB              4760             MOV     A,R3
00010E F0              4761             MOVX    @DPTR,A
00010F A3              4762             INC     DPTR
000110 EA              4763             MOV     A,R2
000111 F0              4764             MOVX    @DPTR,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    76

000112 A3              4765             INC     DPTR
000113 E9              4766             MOV     A,R1
000114 F0              4767             MOVX    @DPTR,A
000115 EF              4768             MOV     A,R7
000116 75F018          4769             MOV     B,#018H
000119 A4              4770             MUL     AB
00011A 2400       F    4771             ADD     A,#LOW (pxReadyTasksLists)
00011C F9              4772             MOV     R1,A
00011D 7400       F    4773             MOV     A,#HIGH (pxReadyTasksLists)
00011F 35F0            4774             ADDC    A,B
000121 FA              4775             MOV     R2,A
000122 7B00       F    4776             MOV     R3,#MBYTE (pxReadyTasksLists)
                       4777     ;       }
                       4778                             ; SOURCE LINE # 1219
000124 802C            4779             SJMP    ?C0124
000126                 4780     ?C0080:
                       4781     ;       else
                       4782     ;       {
                       4783                             ; SOURCE LINE # 1221
                       4784     ;               /* We cannot access the delayed or ready lists, so will hold this
                       4785     ;               task pending until the scheduler is resumed. */
                       4786     ;               vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->x
                               EventListItem ) );
                       4787                             ; SOURCE LINE # 1224
000126 850083     E    4788             MOV     DPH,?C_XBP
000129 850082     E    4789             MOV     DPL,?C_XBP+01H
00012C 759300     E    4790             MOV     DPX,#?C?XDATASEG
00012F E0              4791             MOVX    A,@DPTR
000130 FB              4792             MOV     R3,A
000131 A3              4793             INC     DPTR
000132 E0              4794             MOVX    A,@DPTR
000133 FA              4795             MOV     R2,A
000134 A3              4796             INC     DPTR
000135 E0              4797             MOVX    A,@DPTR
000136 2429            4798             ADD     A,#029H
000138 F9              4799             MOV     R1,A
000139 E4              4800             CLR     A
00013A 3A              4801             ADDC    A,R2
00013B FA              4802             MOV     R2,A
00013C 9000FFFD        4803             MOV     DPTR,#0FFFDH
000140 12000000   E    4804             LCALL   ?C?ADDXBP
000144 EB              4805             MOV     A,R3
000145 F0              4806             MOVX    @DPTR,A
000146 A3              4807             INC     DPTR
000147 EA              4808             MOV     A,R2
000148 F0              4809             MOVX    @DPTR,A
000149 A3              4810             INC     DPTR
00014A E9              4811             MOV     A,R1
00014B F0              4812             MOVX    @DPTR,A
00014C 7B00       F    4813             MOV     R3,#MBYTE (xPendingReadyList)
00014E 7A00       F    4814             MOV     R2,#HIGH (xPendingReadyList)
000150 7900       F    4815             MOV     R1,#LOW (xPendingReadyList)
000152                 4816     ?C0124:
000152 12000000   E    4817             LCALL   _?vListInsertEnd
                       4818     ;       }
                       4819                             ; SOURCE LINE # 1225
000156                 4820     ?C0082:
                       4821     ; 
                       4822     ;       if( pxUnblockedTCB->ucPriority > pxCurrentTCB->ucPriority )
                       4823                             ; SOURCE LINE # 1227
000156 90000000   F    4824             MOV     DPTR,#pxCurrentTCB
00015A E0              4825             MOVX    A,@DPTR
00015B FB              4826             MOV     R3,A
00015C A3              4827             INC     DPTR
00015D E0              4828             MOVX    A,@DPTR
00015E FA              4829             MOV     R2,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    77

00015F A3              4830             INC     DPTR
000160 E0              4831             MOVX    A,@DPTR
000161 2418            4832             ADD     A,#018H
000163 F9              4833             MOV     R1,A
000164 E4              4834             CLR     A
000165 3A              4835             ADDC    A,R2
000166 FA              4836             MOV     R2,A
000167 12000000   E    4837             LCALL   ?C?CLDPTR
00016B FF              4838             MOV     R7,A
00016C 850083     E    4839             MOV     DPH,?C_XBP
00016F 850082     E    4840             MOV     DPL,?C_XBP+01H
000172 759300     E    4841             MOV     DPX,#?C?XDATASEG
000175 E0              4842             MOVX    A,@DPTR
000176 FB              4843             MOV     R3,A
000177 A3              4844             INC     DPTR
000178 E0              4845             MOVX    A,@DPTR
000179 FA              4846             MOV     R2,A
00017A A3              4847             INC     DPTR
00017B E0              4848             MOVX    A,@DPTR
00017C 2418            4849             ADD     A,#018H
00017E F9              4850             MOV     R1,A
00017F E4              4851             CLR     A
000180 3A              4852             ADDC    A,R2
000181 FA              4853             MOV     R2,A
000182 12000000   E    4854             LCALL   ?C?CLDPTR
000186 D3              4855             SETB    C
000187 9F              4856             SUBB    A,R7
000188 7F00            4857             MOV     R7,#00H
00018A 4002            4858             JC      ?C0083
                       4859     ;       {
                       4860                             ; SOURCE LINE # 1228
                       4861     ;               /* Return true if the task removed from the event list has
                       4862     ;               a higher priority than the calling task.  This allows
                       4863     ;               the calling task to know if it should force a context 
                       4864     ;               switch now. */
                       4865     ;               return ( signed portCHAR ) pdTRUE;
                       4866                             ; SOURCE LINE # 1233
00018C 7F01            4867             MOV     R7,#01H
                       4868     ;       }
                       4869                             ; SOURCE LINE # 1234
00018E                 4870     ?C0083:
                       4871     ;       else
                       4872     ;       {
                       4873                             ; SOURCE LINE # 1236
                       4874     ;               return ( signed portCHAR ) pdFALSE;
                       4875                             ; SOURCE LINE # 1237
                       4876     ;       }
                       4877                             ; SOURCE LINE # 1238
                       4878     ; }
                       4879                             ; SOURCE LINE # 1239
00018E                 4880     ?C0084:
00018E 90000006        4881             MOV     DPTR,#06H
000192 02000000   E    4882             LJMP    ?C?ADDXBP
                       4883     ; END OF _?cTaskRemoveFromEventList
                       4884     
                       4885     ; 
                       4886     ; 
                       4887     ; 
                       4888     ; 
                       4889     ; 
                       4890     ; /*-----------------------------------------------------------
                       4891     ;  * The Idle task.
                       4892     ;  *----------------------------------------------------------*/
                       4893     ; 
                       4894     ; static void prvIdleTask( void *pvParameters ) reentrant
                       4895     
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    78

------                 4896             RSEG  ?PR?_?prvIdleTask?TASKS
000000                 4897     _?prvIdleTask:
                       4898             USING   0
                       4899                             ; SOURCE LINE # 1249
000000 9000FFFD        4900             MOV     DPTR,#0FFFDH
000004 12000000   E    4901             LCALL   ?C?ADDXBP
000008 EB              4902             MOV     A,R3
000009 F0              4903             MOVX    @DPTR,A
00000A A3              4904             INC     DPTR
00000B EA              4905             MOV     A,R2
00000C F0              4906             MOVX    @DPTR,A
00000D A3              4907             INC     DPTR
00000E E9              4908             MOV     A,R1
00000F F0              4909             MOVX    @DPTR,A
                       4910     ; {
                       4911     ;       /* Stop warnings. */
                       4912     ;       pvParameters = pvParameters;
                       4913                             ; SOURCE LINE # 1252
000010 850083     E    4914             MOV     DPH,?C_XBP
000013 850082     E    4915             MOV     DPL,?C_XBP+01H
000016 759300     E    4916             MOV     DPX,#?C?XDATASEG
000019 E0              4917             MOVX    A,@DPTR
00001A F9              4918             MOV     R1,A
00001B A3              4919             INC     DPTR
00001C E0              4920             MOVX    A,@DPTR
00001D FA              4921             MOV     R2,A
00001E A3              4922             INC     DPTR
00001F E0              4923             MOVX    A,@DPTR
000020 850083     E    4924             MOV     DPH,?C_XBP
000023 850082     E    4925             MOV     DPL,?C_XBP+01H
000026 759300     E    4926             MOV     DPX,#?C?XDATASEG
000029 C9              4927             XCH     A,R1
00002A F0              4928             MOVX    @DPTR,A
00002B A3              4929             INC     DPTR
00002C EA              4930             MOV     A,R2
00002D F0              4931             MOVX    @DPTR,A
00002E A3              4932             INC     DPTR
00002F E9              4933             MOV     A,R1
000030 F0              4934             MOVX    @DPTR,A
                       4935     ; 
                       4936     ;       for( ;; )
                       4937                             ; SOURCE LINE # 1254
000031                 4938     ?C0086:
                       4939     ;       {
                       4940                             ; SOURCE LINE # 1255
                       4941     ;               /* See if any tasks have been deleted. */
                       4942     ;               prvCheckTasksWaitingTermination();
                       4943                             ; SOURCE LINE # 1257
000031 12000000   F    4944             LCALL   _?prvCheckTasksWaitingTermination
                       4945     ; 
                       4946     ;               if( sUsingPreemption == pdFALSE )
                       4947                             ; SOURCE LINE # 1259
000035 90000000   F    4948             MOV     DPTR,#sUsingPreemption
000039 E0              4949             MOVX    A,@DPTR
00003A 7002            4950             JNZ     ?C0117
00003C A3              4951             INC     DPTR
00003D E0              4952             MOVX    A,@DPTR
00003E                 4953     ?C0117:
00003E 70F1            4954             JNZ     ?C0086
                       4955     ;               {
                       4956                             ; SOURCE LINE # 1260
                       4957     ;                       /* If we are not using preemption we keep forcing a task switch 
                               to
                       4958     ;                       see if any other task has become available.  If we are using 
                       4959     ;                       preemption we don't need to do this as any task becoming availab
                               le
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    79

                       4960     ;                       will automatically get the processor anyway. */
                       4961     ;                       taskYIELD();    
                       4962                             ; SOURCE LINE # 1265
000040 12000000   E    4963             LCALL   _?vPortYield
                       4964     ;               }
                       4965                             ; SOURCE LINE # 1266
                       4966     ;       }
                       4967                             ; SOURCE LINE # 1267
000044 80EB            4968             SJMP    ?C0086
                       4969     ; END OF _?prvIdleTask
                       4970     
                       4971     ; } /*lint !e715 pvParameters is not accessed but all task functions require the same pr
                               ototype. */
                       4972     ; 
                       4973     ; 
                       4974     ; 
                       4975     ; 
                       4976     ; 
                       4977     ; 
                       4978     ; 
                       4979     ; /*-----------------------------------------------------------
                       4980     ;  * File private functions documented at the top of the file.
                       4981     ;  *----------------------------------------------------------*/
                       4982     ; 
                       4983     ; 
                       4984     ; 
                       4985     ; static void prvInitialiseTCBVariables( tskTCB *pxTCB, unsigned portSHORT usStackDepth,
                                const signed portCHAR * const pcName, unsigned portCHAR ucPriority ) reentrant
                       4986     
------                 4987             RSEG  ?PR?_?prvInitialiseTCBVariables?TASKS
000000                 4988     _?prvInitialiseTCBVariables:
                       4989             USING   0
                       4990                             ; SOURCE LINE # 1282
000000 9000FFFE        4991             MOV     DPTR,#0FFFEH
000004 12000000   E    4992             LCALL   ?C?ADDXBP
000008 EC              4993             MOV     A,R4
000009 F0              4994             MOVX    @DPTR,A
00000A A3              4995             INC     DPTR
00000B ED              4996             MOV     A,R5
00000C F0              4997             MOVX    @DPTR,A
00000D 9000FFFD        4998             MOV     DPTR,#0FFFDH
000011 12000000   E    4999             LCALL   ?C?ADDXBP
000015 EB              5000             MOV     A,R3
000016 F0              5001             MOVX    @DPTR,A
000017 A3              5002             INC     DPTR
000018 EA              5003             MOV     A,R2
000019 F0              5004             MOVX    @DPTR,A
00001A A3              5005             INC     DPTR
00001B E9              5006             MOV     A,R1
00001C F0              5007             MOVX    @DPTR,A
                       5008     ; {
                       5009     ;       pxTCB->usStackDepth = usStackDepth;
                       5010                             ; SOURCE LINE # 1284
00001D 90000003        5011             MOV     DPTR,#03H
000021 12000000   E    5012             LCALL   ?C?XBPOFF
000025 E0              5013             MOVX    A,@DPTR
000026 FE              5014             MOV     R6,A
000027 A3              5015             INC     DPTR
000028 E0              5016             MOVX    A,@DPTR
000029 FF              5017             MOV     R7,A
00002A 850083     E    5018             MOV     DPH,?C_XBP
00002D 850082     E    5019             MOV     DPL,?C_XBP+01H
000030 759300     E    5020             MOV     DPX,#?C?XDATASEG
000033 E0              5021             MOVX    A,@DPTR
000034 FB              5022             MOV     R3,A
000035 A3              5023             INC     DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    80

000036 E0              5024             MOVX    A,@DPTR
000037 FA              5025             MOV     R2,A
000038 A3              5026             INC     DPTR
000039 E0              5027             MOVX    A,@DPTR
00003A 2406            5028             ADD     A,#06H
00003C F9              5029             MOV     R1,A
00003D E4              5030             CLR     A
00003E 3A              5031             ADDC    A,R2
00003F FA              5032             MOV     R2,A
000040 EE              5033             MOV     A,R6
000041 8FF0            5034             MOV     B,R7
000043 12000000   E    5035             LCALL   ?C?ISTPTR
                       5036     ; 
                       5037     ;       /* Make sure the name is not too long before copying it into the TCB. */
                       5038     ;       if( strlen( pcName ) < ( unsigned portSHORT ) tskMAX_TASK_NAME_LEN )
                       5039                             ; SOURCE LINE # 1287
000047 90000005        5040             MOV     DPTR,#05H
00004B 12000000   E    5041             LCALL   ?C?XBPOFF
00004F E0              5042             MOVX    A,@DPTR
000050 FB              5043             MOV     R3,A
000051 A3              5044             INC     DPTR
000052 E0              5045             MOVX    A,@DPTR
000053 FA              5046             MOV     R2,A
000054 A3              5047             INC     DPTR
000055 E0              5048             MOVX    A,@DPTR
000056 F9              5049             MOV     R1,A
000057 12000000   E    5050             LCALL   _strlen
00005B C3              5051             CLR     C
00005C EF              5052             MOV     A,R7
00005D 9410            5053             SUBB    A,#010H
00005F EE              5054             MOV     A,R6
000060 9400            5055             SUBB    A,#00H
000062 5046            5056             JNC     ?C0090
                       5057     ;       {
                       5058                             ; SOURCE LINE # 1288
                       5059     ;               portENTER_CRITICAL();
000064 A2AFC2AF        5060              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
000068 C0D0                     
                       5061     ;                       strcpy( pxTCB->pcTaskName, pcName );
                       5062                             ; SOURCE LINE # 1290
00006A 90000005        5063             MOV     DPTR,#05H
00006E 12000000   E    5064             LCALL   ?C?XBPOFF
000072 E0              5065             MOVX    A,@DPTR
000073 FB              5066             MOV     R3,A
000074 A3              5067             INC     DPTR
000075 E0              5068             MOVX    A,@DPTR
000076 FA              5069             MOV     R2,A
000077 A3              5070             INC     DPTR
000078 E0              5071             MOVX    A,@DPTR
000079 F9              5072             MOV     R1,A
00007A C003            5073             PUSH    AR3
00007C C002            5074             PUSH    AR2
00007E C001            5075             PUSH    AR1
000080 850083     E    5076             MOV     DPH,?C_XBP
000083 850082     E    5077             MOV     DPL,?C_XBP+01H
000086 759300     E    5078             MOV     DPX,#?C?XDATASEG
000089 E0              5079             MOVX    A,@DPTR
00008A FB              5080             MOV     R3,A
00008B A3              5081             INC     DPTR
00008C E0              5082             MOVX    A,@DPTR
00008D FA              5083             MOV     R2,A
00008E A3              5084             INC     DPTR
00008F E0              5085             MOVX    A,@DPTR
000090 2408            5086             ADD     A,#08H
000092 F9              5087             MOV     R1,A
000093 E4              5088             CLR     A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    81

000094 3A              5089             ADDC    A,R2
000095 A801            5090             MOV     R0,AR1
000097 FC              5091             MOV     R4,A
000098 AD03            5092             MOV     R5,AR3
00009A D001            5093             POP     AR1
00009C D002            5094             POP     AR2
00009E D003            5095             POP     AR3
0000A0 12000000   E    5096             LCALL   ?C?STRCPY
                       5097     ;               portEXIT_CRITICAL();
0000A4 D0D092AF        5098              DB 0D0H, 0D0H, 092H, 0AFH;
                       5099     ;       }
                       5100                             ; SOURCE LINE # 1292
0000A8 806D            5101             SJMP    ?C0091
0000AA                 5102     ?C0090:
                       5103     ;       else
                       5104     ;       {
                       5105                             ; SOURCE LINE # 1294
                       5106     ;               portENTER_CRITICAL();
0000AA A2AFC2AF        5107              DB 0A2H, 0AFH, 0C2H, 0AFH, 0C0H, 0D0H;
0000AE C0D0                     
                       5108     ;                       strncpy( pxTCB->pcTaskName, pcName, ( unsigned portSHORT ) tskMA
                               X_TASK_NAME_LEN );
                       5109                             ; SOURCE LINE # 1296
0000B0 850083     E    5110             MOV     DPH,?C_XBP
0000B3 850082     E    5111             MOV     DPL,?C_XBP+01H
0000B6 759300     E    5112             MOV     DPX,#?C?XDATASEG
0000B9 E0              5113             MOVX    A,@DPTR
0000BA FB              5114             MOV     R3,A
0000BB A3              5115             INC     DPTR
0000BC E0              5116             MOVX    A,@DPTR
0000BD FA              5117             MOV     R2,A
0000BE A3              5118             INC     DPTR
0000BF E0              5119             MOVX    A,@DPTR
0000C0 2408            5120             ADD     A,#08H
0000C2 F9              5121             MOV     R1,A
0000C3 E4              5122             CLR     A
0000C4 3A              5123             ADDC    A,R2
0000C5 FA              5124             MOV     R2,A
0000C6 C003            5125             PUSH    AR3
0000C8 C002            5126             PUSH    AR2
0000CA C001            5127             PUSH    AR1
0000CC 90000005        5128             MOV     DPTR,#05H
0000D0 12000000   E    5129             LCALL   ?C?XBPOFF
0000D4 E0              5130             MOVX    A,@DPTR
0000D5 F9              5131             MOV     R1,A
0000D6 A3              5132             INC     DPTR
0000D7 E0              5133             MOVX    A,@DPTR
0000D8 FA              5134             MOV     R2,A
0000D9 A3              5135             INC     DPTR
0000DA E0              5136             MOVX    A,@DPTR
0000DB 90000000   E    5137             MOV     DPTR,#?_strncpy?BYTE+03H
0000DF C9              5138             XCH     A,R1
0000E0 F0              5139             MOVX    @DPTR,A
0000E1 A3              5140             INC     DPTR
0000E2 EA              5141             MOV     A,R2
0000E3 F0              5142             MOVX    @DPTR,A
0000E4 A3              5143             INC     DPTR
0000E5 E9              5144             MOV     A,R1
0000E6 F0              5145             MOVX    @DPTR,A
0000E7 A3              5146             INC     DPTR
0000E8 E4              5147             CLR     A
0000E9 F0              5148             MOVX    @DPTR,A
0000EA A3              5149             INC     DPTR
0000EB 7410            5150             MOV     A,#010H
0000ED F0              5151             MOVX    @DPTR,A
0000EE D001            5152             POP     AR1
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    82

0000F0 D002            5153             POP     AR2
0000F2 D003            5154             POP     AR3
0000F4 12000000   E    5155             LCALL   _strncpy
                       5156     ;               portEXIT_CRITICAL();
0000F8 D0D092AF        5157              DB 0D0H, 0D0H, 092H, 0AFH;
                       5158     ;               pxTCB->pcTaskName[ ( unsigned portSHORT ) tskMAX_TASK_NAME_LEN - ( unsig
                               ned portSHORT ) 1 ] = '\0';
                       5159                             ; SOURCE LINE # 1298
0000FC 850083     E    5160             MOV     DPH,?C_XBP
0000FF 850082     E    5161             MOV     DPL,?C_XBP+01H
000102 759300     E    5162             MOV     DPX,#?C?XDATASEG
000105 E0              5163             MOVX    A,@DPTR
000106 FB              5164             MOV     R3,A
000107 A3              5165             INC     DPTR
000108 E0              5166             MOVX    A,@DPTR
000109 FA              5167             MOV     R2,A
00010A A3              5168             INC     DPTR
00010B E0              5169             MOVX    A,@DPTR
00010C 2417            5170             ADD     A,#017H
00010E F9              5171             MOV     R1,A
00010F E4              5172             CLR     A
000110 3A              5173             ADDC    A,R2
000111 FA              5174             MOV     R2,A
000112 E4              5175             CLR     A
000113 12000000   E    5176             LCALL   ?C?CSTPTR
                       5177     ;       }
                       5178                             ; SOURCE LINE # 1299
000117                 5179     ?C0091:
                       5180     ; 
                       5181     ;       /* This is used as an array index so must ensure it's not too large. */
                       5182     ;       if( ucPriority >= ( unsigned portCHAR ) portMAX_PRIORITIES )
                       5183                             ; SOURCE LINE # 1302
000117 90000008        5184             MOV     DPTR,#08H
00011B 12000000   E    5185             LCALL   ?C?XBPOFF
00011F E0              5186             MOVX    A,@DPTR
000120 C3              5187             CLR     C
000121 940F            5188             SUBB    A,#0FH
000123 400B            5189             JC      ?C0092
                       5190     ;       {
                       5191                             ; SOURCE LINE # 1303
                       5192     ;               ucPriority = ( unsigned portCHAR ) portMAX_PRIORITIES - ( unsigned portC
                               HAR ) 1;
                       5193                             ; SOURCE LINE # 1304
000125 90000008        5194             MOV     DPTR,#08H
000129 12000000   E    5195             LCALL   ?C?XBPOFF
00012D 740E            5196             MOV     A,#0EH
00012F F0              5197             MOVX    @DPTR,A
                       5198     ;       }
                       5199                             ; SOURCE LINE # 1305
000130                 5200     ?C0092:
                       5201     ;       pxTCB->ucPriority = ucPriority;
                       5202                             ; SOURCE LINE # 1306
000130 90000008        5203             MOV     DPTR,#08H
000134 12000000   E    5204             LCALL   ?C?XBPOFF
000138 E0              5205             MOVX    A,@DPTR
000139 FF              5206             MOV     R7,A
00013A 850083     E    5207             MOV     DPH,?C_XBP
00013D 850082     E    5208             MOV     DPL,?C_XBP+01H
000140 759300     E    5209             MOV     DPX,#?C?XDATASEG
000143 E0              5210             MOVX    A,@DPTR
000144 FB              5211             MOV     R3,A
000145 A3              5212             INC     DPTR
000146 E0              5213             MOVX    A,@DPTR
000147 FA              5214             MOV     R2,A
000148 A3              5215             INC     DPTR
000149 E0              5216             MOVX    A,@DPTR
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    83

00014A 2418            5217             ADD     A,#018H
00014C F9              5218             MOV     R1,A
00014D E4              5219             CLR     A
00014E 3A              5220             ADDC    A,R2
00014F FA              5221             MOV     R2,A
000150 EF              5222             MOV     A,R7
000151 12000000   E    5223             LCALL   ?C?CSTPTR
                       5224     ; 
                       5225     ;       vListInitialiseItem( &( pxTCB->xGenericListItem ) );
                       5226                             ; SOURCE LINE # 1308
000155 850083     E    5227             MOV     DPH,?C_XBP
000158 850082     E    5228             MOV     DPL,?C_XBP+01H
00015B 759300     E    5229             MOV     DPX,#?C?XDATASEG
00015E E0              5230             MOVX    A,@DPTR
00015F FB              5231             MOV     R3,A
000160 A3              5232             INC     DPTR
000161 E0              5233             MOVX    A,@DPTR
000162 FA              5234             MOV     R2,A
000163 A3              5235             INC     DPTR
000164 E0              5236             MOVX    A,@DPTR
000165 2419            5237             ADD     A,#019H
000167 F9              5238             MOV     R1,A
000168 E4              5239             CLR     A
000169 3A              5240             ADDC    A,R2
00016A FA              5241             MOV     R2,A
00016B 12000000   E    5242             LCALL   _?vListInitialiseItem
                       5243     ;       vListInitialiseItem( &( pxTCB->xEventListItem ) );
                       5244                             ; SOURCE LINE # 1309
00016F 850083     E    5245             MOV     DPH,?C_XBP
000172 850082     E    5246             MOV     DPL,?C_XBP+01H
000175 759300     E    5247             MOV     DPX,#?C?XDATASEG
000178 E0              5248             MOVX    A,@DPTR
000179 FB              5249             MOV     R3,A
00017A A3              5250             INC     DPTR
00017B E0              5251             MOVX    A,@DPTR
00017C FA              5252             MOV     R2,A
00017D A3              5253             INC     DPTR
00017E E0              5254             MOVX    A,@DPTR
00017F 2429            5255             ADD     A,#029H
000181 F9              5256             MOV     R1,A
000182 E4              5257             CLR     A
000183 3A              5258             ADDC    A,R2
000184 FA              5259             MOV     R2,A
000185 12000000   E    5260             LCALL   _?vListInitialiseItem
                       5261     ; 
                       5262     ;       /* Set the pxTCB as a link back from the xListItem.  This is so we can get 
                       5263     ;       back to the containing TCB from a generic item in a list. */
                       5264     ;       listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
                       5265                             ; SOURCE LINE # 1313
000189 850083     E    5266             MOV     DPH,?C_XBP
00018C 850082     E    5267             MOV     DPL,?C_XBP+01H
00018F 759300     E    5268             MOV     DPX,#?C?XDATASEG
000192 E0              5269             MOVX    A,@DPTR
000193 FB              5270             MOV     R3,A
000194 A3              5271             INC     DPTR
000195 E0              5272             MOVX    A,@DPTR
000196 FA              5273             MOV     R2,A
000197 A3              5274             INC     DPTR
000198 E0              5275             MOVX    A,@DPTR
000199 F9              5276             MOV     R1,A
00019A C003            5277             PUSH    AR3
00019C C002            5278             PUSH    AR2
00019E C001            5279             PUSH    AR1
0001A0 850083     E    5280             MOV     DPH,?C_XBP
0001A3 850082     E    5281             MOV     DPL,?C_XBP+01H
0001A6 759300     E    5282             MOV     DPX,#?C?XDATASEG
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    84

0001A9 E0              5283             MOVX    A,@DPTR
0001AA FB              5284             MOV     R3,A
0001AB A3              5285             INC     DPTR
0001AC E0              5286             MOVX    A,@DPTR
0001AD FA              5287             MOV     R2,A
0001AE A3              5288             INC     DPTR
0001AF E0              5289             MOVX    A,@DPTR
0001B0 2419            5290             ADD     A,#019H
0001B2 F9              5291             MOV     R1,A
0001B3 E4              5292             CLR     A
0001B4 3A              5293             ADDC    A,R2
0001B5 FA              5294             MOV     R2,A
0001B6 E9              5295             MOV     A,R1
0001B7 240A            5296             ADD     A,#0AH
0001B9 F9              5297             MOV     R1,A
0001BA E4              5298             CLR     A
0001BB 3A              5299             ADDC    A,R2
0001BC FA              5300             MOV     R2,A
0001BD 12000000   E    5301             LCALL   ?C?PSTPTR
                       5302     ; 
                       5303     ;       /* Event lists are always in priority order. */
                       5304     ;       listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) ucPriority
                                );
                       5305                             ; SOURCE LINE # 1316
0001C1 90000008        5306             MOV     DPTR,#08H
0001C5 12000000   E    5307             LCALL   ?C?XBPOFF
0001C9 E0              5308             MOVX    A,@DPTR
0001CA FF              5309             MOV     R7,A
0001CB E4              5310             CLR     A
0001CC FC              5311             MOV     R4,A
0001CD FD              5312             MOV     R5,A
0001CE FE              5313             MOV     R6,A
0001CF 850083     E    5314             MOV     DPH,?C_XBP
0001D2 850082     E    5315             MOV     DPL,?C_XBP+01H
0001D5 759300     E    5316             MOV     DPX,#?C?XDATASEG
0001D8 E0              5317             MOVX    A,@DPTR
0001D9 FB              5318             MOV     R3,A
0001DA A3              5319             INC     DPTR
0001DB E0              5320             MOVX    A,@DPTR
0001DC FA              5321             MOV     R2,A
0001DD A3              5322             INC     DPTR
0001DE E0              5323             MOVX    A,@DPTR
0001DF 2429            5324             ADD     A,#029H
0001E1 F9              5325             MOV     R1,A
0001E2 E4              5326             CLR     A
0001E3 3A              5327             ADDC    A,R2
0001E4 FA              5328             MOV     R2,A
0001E5 12000000   E    5329             LCALL   ?C?LSTPTR
                       5330     ;       listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
                       5331                             ; SOURCE LINE # 1317
0001E9 850083     E    5332             MOV     DPH,?C_XBP
0001EC 850082     E    5333             MOV     DPL,?C_XBP+01H
0001EF 759300     E    5334             MOV     DPX,#?C?XDATASEG
0001F2 E0              5335             MOVX    A,@DPTR
0001F3 FB              5336             MOV     R3,A
0001F4 A3              5337             INC     DPTR
0001F5 E0              5338             MOVX    A,@DPTR
0001F6 FA              5339             MOV     R2,A
0001F7 A3              5340             INC     DPTR
0001F8 E0              5341             MOVX    A,@DPTR
0001F9 F9              5342             MOV     R1,A
0001FA C003            5343             PUSH    AR3
0001FC C002            5344             PUSH    AR2
0001FE C001            5345             PUSH    AR1
000200 850083     E    5346             MOV     DPH,?C_XBP
000203 850082     E    5347             MOV     DPL,?C_XBP+01H
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    85

000206 759300     E    5348             MOV     DPX,#?C?XDATASEG
000209 E0              5349             MOVX    A,@DPTR
00020A FB              5350             MOV     R3,A
00020B A3              5351             INC     DPTR
00020C E0              5352             MOVX    A,@DPTR
00020D FA              5353             MOV     R2,A
00020E A3              5354             INC     DPTR
00020F E0              5355             MOVX    A,@DPTR
000210 2429            5356             ADD     A,#029H
000212 F9              5357             MOV     R1,A
000213 E4              5358             CLR     A
000214 3A              5359             ADDC    A,R2
000215 FA              5360             MOV     R2,A
000216 E9              5361             MOV     A,R1
000217 240A            5362             ADD     A,#0AH
000219 F9              5363             MOV     R1,A
00021A E4              5364             CLR     A
00021B 3A              5365             ADDC    A,R2
00021C FA              5366             MOV     R2,A
00021D 12000000   E    5367             LCALL   ?C?PSTPTR
                       5368     ; }
                       5369                             ; SOURCE LINE # 1318
000221 90000009        5370             MOV     DPTR,#09H
000225 02000000   E    5371             LJMP    ?C?ADDXBP
                       5372     ; END OF _?prvInitialiseTCBVariables
                       5373     
                       5374     ; /*-----------------------------------------------------------*/
                       5375     ; 
                       5376     ; static portSHORT prvInitialiseTaskLists( void ) reentrant
                       5377     
------                 5378             RSEG  ?PR?_?prvInitialiseTaskLists?TASKS
000000                 5379     _?prvInitialiseTaskLists:
                       5380             USING   0
                       5381                             ; SOURCE LINE # 1321
000000 9000FFFD        5382             MOV     DPTR,#0FFFDH
000004 12000000   E    5383             LCALL   ?C?ADDXBP
                       5384     ; {
                       5385     ; register unsigned portCHAR ucPriority;
                       5386     ; portSHORT sReturn;
                       5387     ; 
                       5388     ;       for( ucPriority = ( unsigned portCHAR) 0; ucPriority < ( unsigned portCHAR ) por
                               tMAX_PRIORITIES; ucPriority++ )
                       5389                             ; SOURCE LINE # 1326
000008 850083     E    5390             MOV     DPH,?C_XBP
00000B 850082     E    5391             MOV     DPL,?C_XBP+01H
00000E 759300     E    5392             MOV     DPX,#?C?XDATASEG
000011 E4              5393             CLR     A
000012 F0              5394             MOVX    @DPTR,A
000013                 5395     ?C0094:
000013 850083     E    5396             MOV     DPH,?C_XBP
000016 850082     E    5397             MOV     DPL,?C_XBP+01H
000019 759300     E    5398             MOV     DPX,#?C?XDATASEG
00001C E0              5399             MOVX    A,@DPTR
00001D FF              5400             MOV     R7,A
00001E C3              5401             CLR     C
00001F 940F            5402             SUBB    A,#0FH
000021 5021            5403             JNC     ?C0095
                       5404     ;       {
                       5405                             ; SOURCE LINE # 1327
                       5406     ;               vListInitialise( ( xList * ) &( pxReadyTasksLists[ ucPriority ] ) );
                       5407                             ; SOURCE LINE # 1328
000023 EF              5408             MOV     A,R7
000024 75F018          5409             MOV     B,#018H
000027 A4              5410             MUL     AB
000028 2400       F    5411             ADD     A,#LOW (pxReadyTasksLists)
00002A F9              5412             MOV     R1,A
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    86

00002B 7400       F    5413             MOV     A,#HIGH (pxReadyTasksLists)
00002D 35F0            5414             ADDC    A,B
00002F FA              5415             MOV     R2,A
000030 7B00       F    5416             MOV     R3,#MBYTE (pxReadyTasksLists)
000032 12000000   E    5417             LCALL   _?vListInitialise
                       5418     ;       }
                       5419                             ; SOURCE LINE # 1329
000036 850083     E    5420             MOV     DPH,?C_XBP
000039 850082     E    5421             MOV     DPL,?C_XBP+01H
00003C 759300     E    5422             MOV     DPX,#?C?XDATASEG
00003F E0              5423             MOVX    A,@DPTR
000040 04              5424             INC     A
000041 F0              5425             MOVX    @DPTR,A
000042 80CF            5426             SJMP    ?C0094
000044                 5427     ?C0095:
                       5428     ; 
                       5429     ;       vListInitialise( ( xList * ) &xDelayedTaskList1 );
                       5430                             ; SOURCE LINE # 1331
000044 7B00       F    5431             MOV     R3,#MBYTE (xDelayedTaskList1)
000046 7A00       F    5432             MOV     R2,#HIGH (xDelayedTaskList1)
000048 7900       F    5433             MOV     R1,#LOW (xDelayedTaskList1)
00004A 12000000   E    5434             LCALL   _?vListInitialise
                       5435     ;       vListInitialise( ( xList * ) &xDelayedTaskList2 );
                       5436                             ; SOURCE LINE # 1332
00004E 7B00       F    5437             MOV     R3,#MBYTE (xDelayedTaskList2)
000050 7A00       F    5438             MOV     R2,#HIGH (xDelayedTaskList2)
000052 7900       F    5439             MOV     R1,#LOW (xDelayedTaskList2)
000054 12000000   E    5440             LCALL   _?vListInitialise
                       5441     ;       vListInitialise( ( xList * ) &xPendingReadyList );
                       5442                             ; SOURCE LINE # 1333
000058 7B00       F    5443             MOV     R3,#MBYTE (xPendingReadyList)
00005A 7A00       F    5444             MOV     R2,#HIGH (xPendingReadyList)
00005C 7900       F    5445             MOV     R1,#LOW (xPendingReadyList)
00005E 12000000   E    5446             LCALL   _?vListInitialise
                       5447     ; 
                       5448     ;       #if( INCLUDE_vTaskDelete == 1 )
                       5449     ;       {
                       5450     ;               vListInitialise( ( xList * ) &xTasksWaitingTermination );
                       5451     ;       }
                       5452     ;       #endif
                       5453     ; 
                       5454     ;       #if( INCLUDE_vTaskSuspend == 1 )
                       5455     ;       {
                       5456                             ; SOURCE LINE # 1342
                       5457     ;               vListInitialise( ( xList * ) &xSuspendedTaskList );
                       5458                             ; SOURCE LINE # 1343
000062 7B00       F    5459             MOV     R3,#MBYTE (xSuspendedTaskList)
000064 7A00       F    5460             MOV     R2,#HIGH (xSuspendedTaskList)
000066 7900       F    5461             MOV     R1,#LOW (xSuspendedTaskList)
000068 12000000   E    5462             LCALL   _?vListInitialise
                       5463     ;       }
                       5464                             ; SOURCE LINE # 1344
                       5465     ;       #endif
                       5466     ; 
                       5467     ;       /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList 
                       5468     ;       using list2. */
                       5469     ;       pxDelayedTaskList = &xDelayedTaskList1;
                       5470                             ; SOURCE LINE # 1349
00006C 90000000   F    5471             MOV     DPTR,#pxDelayedTaskList
000070 7400       F    5472             MOV     A,#MBYTE (xDelayedTaskList1)
000072 F0              5473             MOVX    @DPTR,A
000073 A3              5474             INC     DPTR
000074 7400       F    5475             MOV     A,#HIGH (xDelayedTaskList1)
000076 F0              5476             MOVX    @DPTR,A
000077 A3              5477             INC     DPTR
000078 7400       F    5478             MOV     A,#LOW (xDelayedTaskList1)
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    87

00007A F0              5479             MOVX    @DPTR,A
                       5480     ;       pxOverflowDelayedTaskList = &xDelayedTaskList2;
                       5481                             ; SOURCE LINE # 1350
00007B 90000000   F    5482             MOV     DPTR,#pxOverflowDelayedTaskList
00007F 7400       F    5483             MOV     A,#MBYTE (xDelayedTaskList2)
000081 F0              5484             MOVX    @DPTR,A
000082 A3              5485             INC     DPTR
000083 7400       F    5486             MOV     A,#HIGH (xDelayedTaskList2)
000085 F0              5487             MOVX    @DPTR,A
000086 A3              5488             INC     DPTR
000087 7400       F    5489             MOV     A,#LOW (xDelayedTaskList2)
000089 F0              5490             MOVX    @DPTR,A
                       5491     ; 
                       5492     ;       /* Add the idle task at the lowest priority. */
                       5493     ;       sReturn = sTaskCreate( prvIdleTask, ( const portCHAR * const ) "IDLE", tskIDLE_S
                               TACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, ( xTaskHandle * ) NULL );
                       5494                             ; SOURCE LINE # 1353
00008A 7B00            5495             MOV     R3,#00H
00008C 7A00            5496             MOV     R2,#00H
00008E 7900            5497             MOV     R1,#00H
000090 9000FFFD        5498             MOV     DPTR,#0FFFDH
000094 12000000   E    5499             LCALL   ?C?ADDXBP
000098 EB              5500             MOV     A,R3
000099 F0              5501             MOVX    @DPTR,A
00009A A3              5502             INC     DPTR
00009B EA              5503             MOV     A,R2
00009C F0              5504             MOVX    @DPTR,A
00009D A3              5505             INC     DPTR
00009E E9              5506             MOV     A,R1
00009F F0              5507             MOVX    @DPTR,A
0000A0 9000FFFF        5508             MOV     DPTR,#0FFFFH
0000A4 12000000   E    5509             LCALL   ?C?ADDXBP
0000A8 E4              5510             CLR     A
0000A9 F0              5511             MOVX    @DPTR,A
0000AA FB              5512             MOV     R3,A
0000AB FA              5513             MOV     R2,A
0000AC F9              5514             MOV     R1,A
0000AD 9000FFFD        5515             MOV     DPTR,#0FFFDH
0000B1 12000000   E    5516             LCALL   ?C?ADDXBP
0000B5 EB              5517             MOV     A,R3
0000B6 F0              5518             MOVX    @DPTR,A
0000B7 A3              5519             INC     DPTR
0000B8 EA              5520             MOV     A,R2
0000B9 F0              5521             MOVX    @DPTR,A
0000BA A3              5522             INC     DPTR
0000BB E9              5523             MOV     A,R1
0000BC F0              5524             MOVX    @DPTR,A
0000BD C3              5525             CLR     C
0000BE E4              5526             CLR     A
0000BF 9400       E    5527             SUBB    A,#LOW (STACK_START)
0000C1 FF              5528             MOV     R7,A
0000C2 7404            5529             MOV     A,#04H
0000C4 9400       E    5530             SUBB    A,#HIGH (STACK_START)
0000C6 FE              5531             MOV     R6,A
0000C7 9000FFFE        5532             MOV     DPTR,#0FFFEH
0000CB 12000000   E    5533             LCALL   ?C?ADDXBP
0000CF EE              5534             MOV     A,R6
0000D0 F0              5535             MOVX    @DPTR,A
0000D1 A3              5536             INC     DPTR
0000D2 EF              5537             MOV     A,R7
0000D3 F0              5538             MOVX    @DPTR,A
0000D4 7B00       F    5539             MOV     R3,#MBYTE (?SC_0)
0000D6 7A00       F    5540             MOV     R2,#HIGH (?SC_0)
0000D8 7900       F    5541             MOV     R1,#LOW (?SC_0)
0000DA 9000FFFD        5542             MOV     DPTR,#0FFFDH
0000DE 12000000   E    5543             LCALL   ?C?ADDXBP
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    88

0000E2 EB              5544             MOV     A,R3
0000E3 F0              5545             MOVX    @DPTR,A
0000E4 A3              5546             INC     DPTR
0000E5 EA              5547             MOV     A,R2
0000E6 F0              5548             MOVX    @DPTR,A
0000E7 A3              5549             INC     DPTR
0000E8 E9              5550             MOV     A,R1
0000E9 F0              5551             MOVX    @DPTR,A
0000EA 7B00       F    5552             MOV     R3,#MBYTE (_?prvIdleTask)
0000EC 7A00       F    5553             MOV     R2,#HIGH (_?prvIdleTask)
0000EE 7900       F    5554             MOV     R1,#LOW (_?prvIdleTask)
0000F0 12000000   F    5555             LCALL   _?sTaskCreate
0000F4 850083     E    5556             MOV     DPH,?C_XBP
0000F7 850082     E    5557             MOV     DPL,?C_XBP+01H
0000FA A3              5558             INC     DPTR
0000FB 759300     E    5559             MOV     DPX,#?C?XDATASEG
0000FE EE              5560             MOV     A,R6
0000FF F0              5561             MOVX    @DPTR,A
000100 A3              5562             INC     DPTR
000101 EF              5563             MOV     A,R7
000102 F0              5564             MOVX    @DPTR,A
                       5565     ; 
                       5566     ;       return sReturn;
                       5567                             ; SOURCE LINE # 1355
000103 850083     E    5568             MOV     DPH,?C_XBP
000106 850082     E    5569             MOV     DPL,?C_XBP+01H
000109 A3              5570             INC     DPTR
00010A 759300     E    5571             MOV     DPX,#?C?XDATASEG
00010D E0              5572             MOVX    A,@DPTR
00010E FE              5573             MOV     R6,A
00010F A3              5574             INC     DPTR
000110 E0              5575             MOVX    A,@DPTR
000111 FF              5576             MOV     R7,A
                       5577     ; }
                       5578                             ; SOURCE LINE # 1356
000112                 5579     ?C0097:
000112 90000003        5580             MOV     DPTR,#03H
000116 02000000   E    5581             LJMP    ?C?ADDXBP
                       5582     ; END OF _?prvInitialiseTaskLists
                       5583     
                       5584     ; /*-----------------------------------------------------------*/
                       5585     ; 
                       5586     ; static void prvCheckTasksWaitingTermination( void ) reentrant
                       5587     
------                 5588             RSEG  ?PR?_?prvCheckTasksWaitingTermination?TASKS
000000                 5589     _?prvCheckTasksWaitingTermination:
                       5590             USING   0
                       5591                             ; SOURCE LINE # 1359
                       5592     ; {                                                     
                       5593     ;       #if( INCLUDE_vTaskDelete == 1 )
                       5594     ;       {                               
                       5595     ;               portSHORT sListIsEmpty;
                       5596     ; 
                       5597     ;               vTaskSuspendAll();
                       5598     ;                       sListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
                       5599     ;               cTaskResumeAll();
                       5600     ; 
                       5601     ;               if( !sListIsEmpty )
                       5602     ;               {
                       5603     ;                       tskTCB *pxTCB;
                       5604     ; 
                       5605     ;                       portENTER_CRITICAL();
                       5606     ;                       {                       
                       5607     ;                               pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xL
                               ist * ) &xTasksWaitingTermination ) );
                       5608     ;                               vListRemove( &( pxTCB->xGenericListItem ) );
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    89

                       5609     ;                               --usCurrentNumberOfTasks;
                       5610     ;                       }
                       5611     ;                       portEXIT_CRITICAL();
                       5612     ; 
                       5613     ;                       prvDeleteTCB( pxTCB );
                       5614     ;               }
                       5615     ;       }
                       5616     ;       #endif
                       5617     ; }
                       5618                             ; SOURCE LINE # 1385
000000 22              5619             RET     
                       5620     ; END OF _?prvCheckTasksWaitingTermination
                       5621     
                       5622     ; /*-----------------------------------------------------------*/
                       5623     ; 
                       5624     ; static tskTCB *prvAllocateTCBAndStack( unsigned portSHORT usStackDepth ) reentrant
                       5625     
------                 5626             RSEG  ?PR?_?prvAllocateTCBAndStack?TASKS
000000                 5627     _?prvAllocateTCBAndStack:
                       5628             USING   0
                       5629                             ; SOURCE LINE # 1388
000000 9000FFFE        5630             MOV     DPTR,#0FFFEH
000004 12000000   E    5631             LCALL   ?C?ADDXBP
000008 EE              5632             MOV     A,R6
000009 F0              5633             MOVX    @DPTR,A
00000A A3              5634             INC     DPTR
00000B EF              5635             MOV     A,R7
00000C F0              5636             MOVX    @DPTR,A
00000D 9000FFFD        5637             MOV     DPTR,#0FFFDH
000011 12000000   E    5638             LCALL   ?C?ADDXBP
                       5639     ; {
                       5640     ; tskTCB *pxNewTCB;
                       5641     ; 
                       5642     ;       /* Allocate space for the TCB.  Where the memory comes from depends on
                       5643     ;       the implementation of the port malloc function. */
                       5644     ;       pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
                       5645                             ; SOURCE LINE # 1394
000015 7E00            5646             MOV     R6,#00H
000017 7F3A            5647             MOV     R7,#03AH
000019 12000000   E    5648             LCALL   _?pvPortMalloc
00001D 850083     E    5649             MOV     DPH,?C_XBP
000020 850082     E    5650             MOV     DPL,?C_XBP+01H
000023 759300     E    5651             MOV     DPX,#?C?XDATASEG
000026 EB              5652             MOV     A,R3
000027 F0              5653             MOVX    @DPTR,A
000028 A3              5654             INC     DPTR
000029 EA              5655             MOV     A,R2
00002A F0              5656             MOVX    @DPTR,A
00002B A3              5657             INC     DPTR
00002C E9              5658             MOV     A,R1
00002D F0              5659             MOVX    @DPTR,A
                       5660     ; 
                       5661     ;       if( pxNewTCB != NULL )
                       5662                             ; SOURCE LINE # 1396
00002E 850083     E    5663             MOV     DPH,?C_XBP
000031 850082     E    5664             MOV     DPL,?C_XBP+01H
000034 759300     E    5665             MOV     DPX,#?C?XDATASEG
000037 E0              5666             MOVX    A,@DPTR
000038 FB              5667             MOV     R3,A
000039 A3              5668             INC     DPTR
00003A E0              5669             MOVX    A,@DPTR
00003B FA              5670             MOV     R2,A
00003C A3              5671             INC     DPTR
00003D E0              5672             MOVX    A,@DPTR
00003E 4A              5673             ORL     A,R2
00003F 4B              5674             ORL     A,R3
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    90

000040 7003            5675             JNZ     $ + 5H
000042 010000     F    5676             AJMP    ?C0099
                       5677     ;       {
                       5678                             ; SOURCE LINE # 1397
                       5679     ;               /* Allocate space for the stack used by the task being created.  
                       5680     ;               The base of the stack memory stored in the TCB so the task can 
                       5681     ;               be deleted later if required. */
                       5682     ;               pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMalloc( usStackDepth * si
                               zeof( portSTACK_TYPE ) );
                       5683                             ; SOURCE LINE # 1401
000045 90000003        5684             MOV     DPTR,#03H
000049 12000000   E    5685             LCALL   ?C?XBPOFF
00004D E0              5686             MOVX    A,@DPTR
00004E FE              5687             MOV     R6,A
00004F A3              5688             INC     DPTR
000050 E0              5689             MOVX    A,@DPTR
000051 FF              5690             MOV     R7,A
000052 12000000   E    5691             LCALL   _?pvPortMalloc
000056 C003            5692             PUSH    AR3
000058 C002            5693             PUSH    AR2
00005A C001            5694             PUSH    AR1
00005C 850083     E    5695             MOV     DPH,?C_XBP
00005F 850082     E    5696             MOV     DPL,?C_XBP+01H
000062 759300     E    5697             MOV     DPX,#?C?XDATASEG
000065 E0              5698             MOVX    A,@DPTR
000066 FB              5699             MOV     R3,A
000067 A3              5700             INC     DPTR
000068 E0              5701             MOVX    A,@DPTR
000069 FA              5702             MOV     R2,A
00006A A3              5703             INC     DPTR
00006B E0              5704             MOVX    A,@DPTR
00006C 2403            5705             ADD     A,#03H
00006E F9              5706             MOV     R1,A
00006F E4              5707             CLR     A
000070 3A              5708             ADDC    A,R2
000071 FA              5709             MOV     R2,A
000072 12000000   E    5710             LCALL   ?C?PSTPTR
                       5711     ; 
                       5712     ;               if( pxNewTCB->pxStack == NULL )
                       5713                             ; SOURCE LINE # 1403
000076 850083     E    5714             MOV     DPH,?C_XBP
000079 850082     E    5715             MOV     DPL,?C_XBP+01H
00007C 759300     E    5716             MOV     DPX,#?C?XDATASEG
00007F E0              5717             MOVX    A,@DPTR
000080 FB              5718             MOV     R3,A
000081 A3              5719             INC     DPTR
000082 E0              5720             MOVX    A,@DPTR
000083 FA              5721             MOV     R2,A
000084 A3              5722             INC     DPTR
000085 E0              5723             MOVX    A,@DPTR
000086 2403            5724             ADD     A,#03H
000088 F9              5725             MOV     R1,A
000089 E4              5726             CLR     A
00008A 3A              5727             ADDC    A,R2
00008B FA              5728             MOV     R2,A
00008C 12000000   E    5729             LCALL   ?C?PLDPTR
000090 E9              5730             MOV     A,R1
000091 4A              5731             ORL     A,R2
000092 4B              5732             ORL     A,R3
000093 7026            5733             JNZ     ?C0100
                       5734     ;               {
                       5735                             ; SOURCE LINE # 1404
                       5736     ;                       /* Could not allocate the stack.  Delete the allocated TCB. */
                       5737     ;                       vPortFree( pxNewTCB );                  
                       5738                             ; SOURCE LINE # 1406
000095 850083     E    5739             MOV     DPH,?C_XBP
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    91

000098 850082     E    5740             MOV     DPL,?C_XBP+01H
00009B 759300     E    5741             MOV     DPX,#?C?XDATASEG
00009E E0              5742             MOVX    A,@DPTR
00009F FB              5743             MOV     R3,A
0000A0 A3              5744             INC     DPTR
0000A1 E0              5745             MOVX    A,@DPTR
0000A2 FA              5746             MOV     R2,A
0000A3 A3              5747             INC     DPTR
0000A4 E0              5748             MOVX    A,@DPTR
0000A5 F9              5749             MOV     R1,A
0000A6 12000000   E    5750             LCALL   _?vPortFree
                       5751     ;                       pxNewTCB = NULL;                        
                       5752                             ; SOURCE LINE # 1407
0000AA 850083     E    5753             MOV     DPH,?C_XBP
0000AD 850082     E    5754             MOV     DPL,?C_XBP+01H
0000B0 759300     E    5755             MOV     DPX,#?C?XDATASEG
0000B3 E4              5756             CLR     A
0000B4 F0              5757             MOVX    @DPTR,A
0000B5 A3              5758             INC     DPTR
0000B6 F0              5759             MOVX    @DPTR,A
0000B7 A3              5760             INC     DPTR
0000B8 F0              5761             MOVX    @DPTR,A
                       5762     ;               }               
                       5763                             ; SOURCE LINE # 1408
0000B9 802D            5764             SJMP    ?C0099
0000BB                 5765     ?C0100:
                       5766     ;               else
                       5767     ;               {
                       5768                             ; SOURCE LINE # 1410
                       5769     ;                       /* Just to help debugging. */
                       5770     ;                       memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * si
                               zeof( portSTACK_TYPE ) );
                       5771                             ; SOURCE LINE # 1412
0000BB 90000003        5772             MOV     DPTR,#03H
0000BF 12000000   E    5773             LCALL   ?C?XBPOFF
0000C3 E0              5774             MOVX    A,@DPTR
0000C4 FE              5775             MOV     R6,A
0000C5 A3              5776             INC     DPTR
0000C6 E0              5777             MOVX    A,@DPTR
0000C7 FF              5778             MOV     R7,A
0000C8 7DA5            5779             MOV     R5,#0A5H
0000CA 850083     E    5780             MOV     DPH,?C_XBP
0000CD 850082     E    5781             MOV     DPL,?C_XBP+01H
0000D0 759300     E    5782             MOV     DPX,#?C?XDATASEG
0000D3 E0              5783             MOVX    A,@DPTR
0000D4 FB              5784             MOV     R3,A
0000D5 A3              5785             INC     DPTR
0000D6 E0              5786             MOVX    A,@DPTR
0000D7 FA              5787             MOV     R2,A
0000D8 A3              5788             INC     DPTR
0000D9 E0              5789             MOVX    A,@DPTR
0000DA 2403            5790             ADD     A,#03H
0000DC F9              5791             MOV     R1,A
0000DD E4              5792             CLR     A
0000DE 3A              5793             ADDC    A,R2
0000DF FA              5794             MOV     R2,A
0000E0 12000000   E    5795             LCALL   ?C?PLDPTR
0000E4 12000000   E    5796             LCALL   ?C?MEMSET
                       5797     ;               }
                       5798                             ; SOURCE LINE # 1413
                       5799     ;       }
                       5800                             ; SOURCE LINE # 1414
0000E8                 5801     ?C0099:
                       5802     ; 
                       5803     ;       return pxNewTCB;
                       5804                             ; SOURCE LINE # 1416
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    92

0000E8 850083     E    5805             MOV     DPH,?C_XBP
0000EB 850082     E    5806             MOV     DPL,?C_XBP+01H
0000EE 759300     E    5807             MOV     DPX,#?C?XDATASEG
0000F1 E0              5808             MOVX    A,@DPTR
0000F2 FB              5809             MOV     R3,A
0000F3 A3              5810             INC     DPTR
0000F4 E0              5811             MOVX    A,@DPTR
0000F5 FA              5812             MOV     R2,A
0000F6 A3              5813             INC     DPTR
0000F7 E0              5814             MOVX    A,@DPTR
0000F8 F9              5815             MOV     R1,A
                       5816     ; }
                       5817                             ; SOURCE LINE # 1417
0000F9                 5818     ?C0102:
0000F9 90000005        5819             MOV     DPTR,#05H
0000FD 02000000   E    5820             LJMP    ?C?ADDXBP
                       5821     ; END OF _?prvAllocateTCBAndStack
                       5822     
                       5823     ; /*-----------------------------------------------------------*/
                       5824     ; 
                       5825     ; #if( USE_TRACE_FACILITY == 1 )
                       5826     ; 
                       5827     ;       static void prvListTaskWithinSingleList( signed portCHAR *pcWriteBuffer, xList *
                               pxList, signed portCHAR cStatus )reentrant
                       5828     ;       {
                       5829     ;       volatile tskTCB *pxNextTCB, *pxFirstTCB;
                       5830     ;       static signed portCHAR pcStatusString[ 50 ];
                       5831     ;       unsigned portSHORT usStackRemaining;
                       5832     ; 
                       5833     ;               /* Write the details of all the TCB's in pxList into the buffer. */
                       5834     ;               listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
                       5835     ;               do
                       5836     ;               {
                       5837     ;                       listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
                       5838     ;                       usStackRemaining = usPortCheckFreeStackSpace( ( unsigned portCHA
                               R * ) pxNextTCB->pxStack, tskSTACK_FILL_BYTE );
                       5839     ;                       sprintf( pcStatusString, "%s\t\t%c\t%u\t%u\t%d\r\n", pxNextTCB->
                               pcTaskName, cStatus, pxNextTCB->ucPriority, usStackRemaining, pxNextTCB->ucTCBNumber );
                       5840     ;                       strcat( pcWriteBuffer, pcStatusString );
                       5841     ; 
                       5842     ;               } while( pxNextTCB != pxFirstTCB );
                       5843     ;       }
                       5844     ; 
                       5845     ; #endif
                       5846     ; /*-----------------------------------------------------------*/
                       5847     ; 
                       5848     ; #if( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )
                       5849     ; 
                       5850     ;       static void prvDeleteTCB( tskTCB *pxTCB ) reentrant
                       5851     ;       {
                       5852     ;               /* Free up the memory allocated by the scheduler for the task.  It is up
                                to
                       5853     ;               the task to free any memory allocated at the application level. */
                       5854     ;               vPortFree( pxTCB->pxStack );
                       5855     ;               vPortFree( pxTCB );
                       5856     ;       }
                       5857     ; 
                       5858     ; #endif
                       5859     ; 
                       5860     ; void prvGetCurrentTCB_XBP() reentrant
                       5861     
------                 5862             RSEG  ?PR?_?prvGetCurrentTCB_XBP?TASKS
000000                 5863     _?prvGetCurrentTCB_XBP:
                       5864             USING   0
                       5865                             ; SOURCE LINE # 1455
                       5866     ; {
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    93

                       5867     ;       pxCurrentTCB->pxTopOfStack = C_XBP;
                       5868                             ; SOURCE LINE # 1457
000000 AA00       E    5869             MOV     R2,C_XBP
000002 A900       E    5870             MOV     R1,C_XBP+01H
000004 7B00       E    5871             MOV     R3,#?C?XDATAMTYPE
000006 C003            5872             PUSH    AR3
000008 C002            5873             PUSH    AR2
00000A C001            5874             PUSH    AR1
00000C 90000000   F    5875             MOV     DPTR,#pxCurrentTCB
000010 E0              5876             MOVX    A,@DPTR
000011 FB              5877             MOV     R3,A
000012 A3              5878             INC     DPTR
000013 E0              5879             MOVX    A,@DPTR
000014 FA              5880             MOV     R2,A
000015 A3              5881             INC     DPTR
000016 E0              5882             MOVX    A,@DPTR
000017 F9              5883             MOV     R1,A
000018 12000000   E    5884             LCALL   ?C?PSTPTR
                       5885     ; }
                       5886                             ; SOURCE LINE # 1458
00001C 22              5887             RET     
                       5888     ; END OF _?prvGetCurrentTCB_XBP
                       5889     
                       5890     ; 
                       5891     ; 
                       5892     ; void prvSetCurrentTCB_XBP() reentrant
                       5893     
------                 5894             RSEG  ?PR?_?prvSetCurrentTCB_XBP?TASKS
000000                 5895     _?prvSetCurrentTCB_XBP:
                       5896             USING   0
                       5897                             ; SOURCE LINE # 1461
                       5898     ; {
                       5899     ;       C_XBP=pxCurrentTCB->pxTopOfStack;
                       5900                             ; SOURCE LINE # 1463
000000 90000000   F    5901             MOV     DPTR,#pxCurrentTCB
000004 E0              5902             MOVX    A,@DPTR
000005 FB              5903             MOV     R3,A
000006 A3              5904             INC     DPTR
000007 E0              5905             MOVX    A,@DPTR
000008 FA              5906             MOV     R2,A
000009 A3              5907             INC     DPTR
00000A E0              5908             MOVX    A,@DPTR
00000B F9              5909             MOV     R1,A
00000C 12000000   E    5910             LCALL   ?C?PLDPTR
000010 AF01            5911             MOV     R7,AR1
000012 8A00       E    5912             MOV     C_XBP,R2
000014 8F00       E    5913             MOV     C_XBP+01H,R7
                       5914     ; }
                       5915                             ; SOURCE LINE # 1464
000016 22              5916             RET     
                       5917     ; END OF _?prvSetCurrentTCB_XBP
                       5918     
                       5919             END
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    94

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E     ATTRIBUTES

?_STRNCPY?BYTE. . . . . . . . . . . . .    X  ADDR  -------       EXT
?C0001. . . . . . . . . . . . . . . . .    EC ADDR  0320H     R   SEG=?PR?_?STASKCREATE?TASKS
?C0002. . . . . . . . . . . . . . . . .    EC ADDR  01E8H     R   SEG=?PR?_?STASKCREATE?TASKS
?C0003. . . . . . . . . . . . . . . . .    EC ADDR  0240H     R   SEG=?PR?_?STASKCREATE?TASKS
?C0006. . . . . . . . . . . . . . . . .    EC ADDR  026AH     R   SEG=?PR?_?STASKCREATE?TASKS
?C0007. . . . . . . . . . . . . . . . .    EC ADDR  02DFH     R   SEG=?PR?_?STASKCREATE?TASKS
?C0008. . . . . . . . . . . . . . . . .    EC ADDR  032EH     R   SEG=?PR?_?STASKCREATE?TASKS
?C0009. . . . . . . . . . . . . . . . .    EC ADDR  03B0H     R   SEG=?PR?_?STASKCREATE?TASKS
?C0010. . . . . . . . . . . . . . . . .    EC ADDR  0380H     R   SEG=?PR?_?STASKCREATE?TASKS
?C0013. . . . . . . . . . . . . . . . .    EC ADDR  03BEH     R   SEG=?PR?_?STASKCREATE?TASKS
?C0014. . . . . . . . . . . . . . . . .    EC ADDR  00F7H     R   SEG=?PR?_?VTASKDELAYUNTIL?TASKS
?C0016. . . . . . . . . . . . . . . . .    EC ADDR  015BH     R   SEG=?PR?_?VTASKDELAYUNTIL?TASKS
?C0018. . . . . . . . . . . . . . . . .    EC ADDR  0150H     R   SEG=?PR?_?VTASKDELAYUNTIL?TASKS
?C0019. . . . . . . . . . . . . . . . .    EC ADDR  024BH     R   SEG=?PR?_?VTASKDELAYUNTIL?TASKS
?C0020. . . . . . . . . . . . . . . . .    EC ADDR  0220H     R   SEG=?PR?_?VTASKDELAYUNTIL?TASKS
?C0023. . . . . . . . . . . . . . . . .    EC ADDR  0268H     R   SEG=?PR?_?VTASKDELAYUNTIL?TASKS
?C0024. . . . . . . . . . . . . . . . .    EC ADDR  0144H     R   SEG=?PR?_?VTASKDELAY?TASKS
?C0025. . . . . . . . . . . . . . . . .    EC ADDR  010BH     R   SEG=?PR?_?VTASKDELAY?TASKS
?C0026. . . . . . . . . . . . . . . . .    EC ADDR  0136H     R   SEG=?PR?_?VTASKDELAY?TASKS
?C0028. . . . . . . . . . . . . . . . .    EC ADDR  0153H     R   SEG=?PR?_?VTASKDELAY?TASKS
?C0029. . . . . . . . . . . . . . . . .    EC ADDR  003FH     R   SEG=?PR?_?VTASKSUSPEND?TASKS
?C0030. . . . . . . . . . . . . . . . .    EC ADDR  004FH     R   SEG=?PR?_?VTASKSUSPEND?TASKS
?C0031. . . . . . . . . . . . . . . . .    EC ADDR  00B3H     R   SEG=?PR?_?VTASKSUSPEND?TASKS
?C0033. . . . . . . . . . . . . . . . .    EC ADDR  00FEH     R   SEG=?PR?_?VTASKSUSPEND?TASKS
?C0035. . . . . . . . . . . . . . . . .    EC ADDR  008FH     R   SEG=?PR?_?VTASKRESUME?TASKS
?C0036. . . . . . . . . . . . . . . . .    EC ADDR  0091H     R   SEG=?PR?_?VTASKRESUME?TASKS
?C0037. . . . . . . . . . . . . . . . .    EC ADDR  00FFH     R   SEG=?PR?_?VTASKRESUME?TASKS
?C0039. . . . . . . . . . . . . . . . .    EC ADDR  014FH     R   SEG=?PR?_?VTASKRESUME?TASKS
?C0041. . . . . . . . . . . . . . . . .    EC ADDR  0051H     R   SEG=?PR?_?VTASKSTARTSCHEDULER?TASKS
?C0043. . . . . . . . . . . . . . . . .    EC ADDR  0051H     R   SEG=?PR?_?VTASKSTARTSCHEDULER?TASKS
?C0046. . . . . . . . . . . . . . . . .    EC ADDR  016BH     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0048. . . . . . . . . . . . . . . . .    EC ADDR  0039H     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0049. . . . . . . . . . . . . . . . .    EC ADDR  013BH     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0050. . . . . . . . . . . . . . . . .    EC ADDR  0066H     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0051. . . . . . . . . . . . . . . . .    EC ADDR  006CH     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0052. . . . . . . . . . . . . . . . .    EC ADDR  00FFH     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0054. . . . . . . . . . . . . . . . .    EC ADDR  0145H     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0055. . . . . . . . . . . . . . . . .    EC ADDR  015CH     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0056. . . . . . . . . . . . . . . . .    EC ADDR  0179H     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0057. . . . . . . . . . . . . . . . .    EC ADDR  0042H     R   SEG=?PR?_?XTASKGETTICKCOUNT?TASKS
?C0058. . . . . . . . . . . . . . . . .    EC ADDR  0036H     R   SEG=?PR?_?USTASKGETNUMBEROFTASKS?TASKS
?C0059. . . . . . . . . . . . . . . . .    EC ADDR  01FCH     R   SEG=?PR?_?VTASKINCREMENTTICK?TASKS
?C0061. . . . . . . . . . . . . . . . .    EC ADDR  009EH     R   SEG=?PR?_?VTASKINCREMENTTICK?TASKS
?C0063. . . . . . . . . . . . . . . . .    EC ADDR  00D5H     R   SEG=?PR?_?VTASKINCREMENTTICK?TASKS
?C0064. . . . . . . . . . . . . . . . .    EC ADDR  00DBH     R   SEG=?PR?_?VTASKINCREMENTTICK?TASKS
?C0065. . . . . . . . . . . . . . . . .    EC ADDR  0126H     R   SEG=?PR?_?VTASKINCREMENTTICK?TASKS
?C0066. . . . . . . . . . . . . . . . .    EC ADDR  0179H     R   SEG=?PR?_?VTASKINCREMENTTICK?TASKS
?C0067. . . . . . . . . . . . . . . . .    EC ADDR  01C0H     R   SEG=?PR?_?VTASKINCREMENTTICK?TASKS
?C0069. . . . . . . . . . . . . . . . .    EC ADDR  0203H     R   SEG=?PR?_?VTASKINCREMENTTICK?TASKS
?C0070. . . . . . . . . . . . . . . . .    EC ADDR  000AH     R   SEG=?PR?_?VTASKSWITCHCONTEXT?TASKS
?C0071. . . . . . . . . . . . . . . . .    EC ADDR  0142H     R   SEG=?PR?_?VTASKSWITCHCONTEXT?TASKS
?C0072. . . . . . . . . . . . . . . . .    EC ADDR  000AH     R   SEG=?PR?_?VTASKSWITCHCONTEXT?TASKS
?C0073. . . . . . . . . . . . . . . . .    EC ADDR  0030H     R   SEG=?PR?_?VTASKSWITCHCONTEXT?TASKS
?C0074. . . . . . . . . . . . . . . . .    EC ADDR  010FH     R   SEG=?PR?_?VTASKSWITCHCONTEXT?TASKS
?C0075. . . . . . . . . . . . . . . . .    EC ADDR  0121H     R   SEG=?PR?_?VTASKPLACEONEVENTLIST?TASKS
?C0077. . . . . . . . . . . . . . . . .    EC ADDR  014CH     R   SEG=?PR?_?VTASKPLACEONEVENTLIST?TASKS
?C0078. . . . . . . . . . . . . . . . .    EC ADDR  0053H     R   SEG=?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS
?C0079. . . . . . . . . . . . . . . . .    EC ADDR  0059H     R   SEG=?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS
?C0080. . . . . . . . . . . . . . . . .    EC ADDR  0126H     R   SEG=?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS
?C0081. . . . . . . . . . . . . . . . .    EC ADDR  00EFH     R   SEG=?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    95

?C0082. . . . . . . . . . . . . . . . .    EC ADDR  0156H     R   SEG=?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS
?C0083. . . . . . . . . . . . . . . . .    EC ADDR  018EH     R   SEG=?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS
?C0084. . . . . . . . . . . . . . . . .    EC ADDR  018EH     R   SEG=?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS
?C0086. . . . . . . . . . . . . . . . .    EC ADDR  0031H     R   SEG=?PR?_?PRVIDLETASK?TASKS
?C0090. . . . . . . . . . . . . . . . .    EC ADDR  00AAH     R   SEG=?PR?_?PRVINITIALISETCBVARIABLES?TASKS
?C0091. . . . . . . . . . . . . . . . .    EC ADDR  0117H     R   SEG=?PR?_?PRVINITIALISETCBVARIABLES?TASKS
?C0092. . . . . . . . . . . . . . . . .    EC ADDR  0130H     R   SEG=?PR?_?PRVINITIALISETCBVARIABLES?TASKS
?C0094. . . . . . . . . . . . . . . . .    EC ADDR  0013H     R   SEG=?PR?_?PRVINITIALISETASKLISTS?TASKS
?C0095. . . . . . . . . . . . . . . . .    EC ADDR  0044H     R   SEG=?PR?_?PRVINITIALISETASKLISTS?TASKS
?C0097. . . . . . . . . . . . . . . . .    EC ADDR  0112H     R   SEG=?PR?_?PRVINITIALISETASKLISTS?TASKS
?C0099. . . . . . . . . . . . . . . . .    EC ADDR  00E8H     R   SEG=?PR?_?PRVALLOCATETCBANDSTACK?TASKS
?C0100. . . . . . . . . . . . . . . . .    EC ADDR  00BBH     R   SEG=?PR?_?PRVALLOCATETCBANDSTACK?TASKS
?C0102. . . . . . . . . . . . . . . . .    EC ADDR  00F9H     R   SEG=?PR?_?PRVALLOCATETCBANDSTACK?TASKS
?C0106. . . . . . . . . . . . . . . . .    EC ADDR  01A9H     R   SEG=?PR?_?STASKCREATE?TASKS
?C0107. . . . . . . . . . . . . . . . .    EC ADDR  01B4H     R   SEG=?PR?_?STASKCREATE?TASKS
?C0113. . . . . . . . . . . . . . . . .    EC ADDR  0042H     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
?C0116. . . . . . . . . . . . . . . . .    EC ADDR  00C8H     R   SEG=?PR?_?VTASKSWITCHCONTEXT?TASKS
?C0117. . . . . . . . . . . . . . . . .    EC ADDR  003EH     R   SEG=?PR?_?PRVIDLETASK?TASKS
?C0120. . . . . . . . . . . . . . . . .    EC ADDR  023FH     R   SEG=?PR?_?VTASKDELAYUNTIL?TASKS
?C0121. . . . . . . . . . . . . . . . .    EC ADDR  0150H     R   SEG=?PR?_?VTASKDELAYUNTIL?TASKS
?C0122. . . . . . . . . . . . . . . . .    EC ADDR  012AH     R   SEG=?PR?_?VTASKDELAY?TASKS
?C0123. . . . . . . . . . . . . . . . .    EC ADDR  0140H     R   SEG=?PR?_?VTASKPLACEONEVENTLIST?TASKS
?C0124. . . . . . . . . . . . . . . . .    EC ADDR  0152H     R   SEG=?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS
?C?ADDXBP . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?CLDPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?CSTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ILDPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ISTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?LLDPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?LSTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?LSTXDATA . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?MEMSET . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?PLDPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?PSTPTR . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?STRCPY . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ULCMP. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XBPOFF . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XDATAMTYPE . . . . . . . . . . . . .    N  NUMB  -------       EXT
?C?XDATASEG . . . . . . . . . . . . . .    N  NUMB  -------       EXT
?C_INITSEG. . . . . . . . . . . . . . .    C  SEG   00002FH       REL=UNIT, ALN=BYTE
?C_XBP. . . . . . . . . . . . . . . . .    D  ADDR  -------       EXT
?CO?TASKS . . . . . . . . . . . . . . .    C  SEG   000005H       REL=UNIT, ALN=BYTE
?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS. .    EC SEG   000196H       REL=INSEG, ALN=BYTE
?PR?_?CTASKRESUMEALL?TASKS. . . . . . .    EC SEG   000181H       REL=INSEG, ALN=BYTE
?PR?_?PRVALLOCATETCBANDSTACK?TASKS. . .    EC SEG   000101H       REL=INSEG, ALN=BYTE
?PR?_?PRVCHECKTASKSWAITINGTERMINATION?TASKSEC SEG   000001H       REL=INSEG, ALN=BYTE
?PR?_?PRVGETCURRENTTCB_XBP?TASKS. . . .    EC SEG   00001DH       REL=INSEG, ALN=BYTE
?PR?_?PRVIDLETASK?TASKS . . . . . . . .    EC SEG   000046H       REL=INSEG, ALN=BYTE
?PR?_?PRVINITIALISETASKLISTS?TASKS. . .    EC SEG   00011AH       REL=INSEG, ALN=BYTE
?PR?_?PRVINITIALISETCBVARIABLES?TASKS .    EC SEG   000229H       REL=INSEG, ALN=BYTE
?PR?_?PRVSETCURRENTTCB_XBP?TASKS. . . .    EC SEG   000017H       REL=INSEG, ALN=BYTE
?PR?_?STASKCREATE?TASKS . . . . . . . .    EC SEG   0003C6H       REL=INSEG, ALN=BYTE
?PR?_?USTASKGETNUMBEROFTASKS?TASKS. . .    EC SEG   00003EH       REL=INSEG, ALN=BYTE
?PR?_?VTASKDELAY?TASKS. . . . . . . . .    EC SEG   00015BH       REL=INSEG, ALN=BYTE
?PR?_?VTASKDELAYUNTIL?TASKS . . . . . .    EC SEG   000270H       REL=INSEG, ALN=BYTE
?PR?_?VTASKENDSCHEDULER?TASKS . . . . .    EC SEG   00000CH       REL=INSEG, ALN=BYTE
?PR?_?VTASKINCREMENTTICK?TASKS. . . . .    EC SEG   00020BH       REL=INSEG, ALN=BYTE
?PR?_?VTASKPLACEONEVENTLIST?TASKS . . .    EC SEG   000154H       REL=INSEG, ALN=BYTE
?PR?_?VTASKRESUME?TASKS . . . . . . . .    EC SEG   000157H       REL=INSEG, ALN=BYTE
?PR?_?VTASKSTARTSCHEDULER?TASKS . . . .    EC SEG   000059H       REL=INSEG, ALN=BYTE
?PR?_?VTASKSUSPEND?TASKS. . . . . . . .    EC SEG   000106H       REL=INSEG, ALN=BYTE
?PR?_?VTASKSUSPENDALL?TASKS . . . . . .    EC SEG   000012H       REL=INSEG, ALN=BYTE
?PR?_?VTASKSWITCHCONTEXT?TASKS. . . . .    EC SEG   000143H       REL=INSEG, ALN=BYTE
?PR?_?XTASKGETTICKCOUNT?TASKS . . . . .    EC SEG   00004AH       REL=INSEG, ALN=BYTE
?SC_0 . . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?CO?TASKS
?XD?TASKS . . . . . . . . . . . . . . .    X  SEG   0001DFH       REL=UNIT, ALN=BYTE
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    96

_?CTASKREMOVEFROMEVENTLIST. . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?CTASKREMOVEFROMEVENTLIST?TASKS
_?CTASKRESUMEALL. . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?CTASKRESUMEALL?TASKS
_?PRVALLOCATETCBANDSTACK. . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVALLOCATETCBANDSTACK?TASKS
_?PRVCHECKTASKSWAITINGTERMINATION . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVCHECKTASKSWAITINGTERMINATION?TASKS
_?PRVGETCURRENTTCB_XBP. . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVGETCURRENTTCB_XBP?TASKS
_?PRVIDLETASK . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVIDLETASK?TASKS
_?PRVINITIALISETASKLISTS. . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVINITIALISETASKLISTS?TASKS
_?PRVINITIALISETCBVARIABLES . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVINITIALISETCBVARIABLES?TASKS
_?PRVSETCURRENTTCB_XBP. . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PRVSETCURRENTTCB_XBP?TASKS
_?PVPORTMALLOC. . . . . . . . . . . . .    C  ADDR  -------       EXT
_?PXPORTINITIALISESTACK . . . . . . . .    C  ADDR  -------       EXT
_?SPORTSTARTSCHEDULER . . . . . . . . .    C  ADDR  -------       EXT
_?STASKCREATE . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?STASKCREATE?TASKS
_?USTASKGETNUMBEROFTASKS. . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?USTASKGETNUMBEROFTASKS?TASKS
_?VLISTINITIALISE . . . . . . . . . . .    C  ADDR  -------       EXT
_?VLISTINITIALISEITEM . . . . . . . . .    C  ADDR  -------       EXT
_?VLISTINSERT . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?VLISTINSERTEND. . . . . . . . . . . .    C  ADDR  -------       EXT
_?VLISTREMOVE . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?VPORTENDSCHEDULER . . . . . . . . . .    C  ADDR  -------       EXT
_?VPORTFREE . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?VPORTYIELD. . . . . . . . . . . . . .    C  ADDR  -------       EXT
_?VTASKDELAY. . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKDELAY?TASKS
_?VTASKDELAYUNTIL . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKDELAYUNTIL?TASKS
_?VTASKENDSCHEDULER . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKENDSCHEDULER?TASKS
_?VTASKINCREMENTTICK. . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKINCREMENTTICK?TASKS
_?VTASKPLACEONEVENTLIST . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKPLACEONEVENTLIST?TASKS
_?VTASKRESUME . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKRESUME?TASKS
_?VTASKSTARTSCHEDULER . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKSTARTSCHEDULER?TASKS
_?VTASKSUSPEND. . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKSUSPEND?TASKS
_?VTASKSUSPENDALL . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKSUSPENDALL?TASKS
_?VTASKSWITCHCONTEXT. . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VTASKSWITCHCONTEXT?TASKS
_?XTASKGETTICKCOUNT . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?XTASKGETTICKCOUNT?TASKS
_STRLEN . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_STRNCPY. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
AC. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.6   A   
ACC . . . . . . . . . . . . . . . . . .    D  ADDR  00E0H     A   
ACON. . . . . . . . . . . . . . . . . .    D  ADDR  009DH     A   
AR1 . . . . . . . . . . . . . . . . . .    D  ADDR  0001H     A   
AR2 . . . . . . . . . . . . . . . . . .    D  ADDR  0002H     A   
AR3 . . . . . . . . . . . . . . . . . .    D  ADDR  0003H     A   
ARCON . . . . . . . . . . . . . . . . .    D  ADDR  00FFH     A   
B . . . . . . . . . . . . . . . . . . .    D  ADDR  00F0H     A   
C_XBP . . . . . . . . . . . . . . . . .    D  ADDR  -------       EXT
CANCIR. . . . . . . . . . . . . . . . .    D  ADDR  00DEH     A   
CANDR . . . . . . . . . . . . . . . . .    D  ADDR  00DFH     A   
CCAPH0. . . . . . . . . . . . . . . . .    D  ADDR  00B9H     A   
CCAPH1. . . . . . . . . . . . . . . . .    D  ADDR  00BAH     A   
CCAPH2. . . . . . . . . . . . . . . . .    D  ADDR  00BBH     A   
CCAPH3. . . . . . . . . . . . . . . . .    D  ADDR  00BCH     A   
CCAPH4. . . . . . . . . . . . . . . . .    D  ADDR  00BDH     A   
CCAPL0. . . . . . . . . . . . . . . . .    D  ADDR  00B1H     A   
CCAPL1. . . . . . . . . . . . . . . . .    D  ADDR  00B2H     A   
CCAPL2. . . . . . . . . . . . . . . . .    D  ADDR  00B3H     A   
CCAPL3. . . . . . . . . . . . . . . . .    D  ADDR  00B4H     A   
CCAPL4. . . . . . . . . . . . . . . . .    D  ADDR  00B5H     A   
CCAPM0. . . . . . . . . . . . . . . . .    D  ADDR  00D1H     A   
CCAPM1. . . . . . . . . . . . . . . . .    D  ADDR  00D2H     A   
CCAPM2. . . . . . . . . . . . . . . . .    D  ADDR  00D3H     A   
CCAPM3. . . . . . . . . . . . . . . . .    D  ADDR  00D4H     A   
CCAPM4. . . . . . . . . . . . . . . . .    D  ADDR  00D5H     A   
CCON. . . . . . . . . . . . . . . . . .    D  ADDR  00C3H     A   
CH. . . . . . . . . . . . . . . . . . .    D  ADDR  00C5H     A   
CKCON . . . . . . . . . . . . . . . . .    D  ADDR  008EH     A   
CL. . . . . . . . . . . . . . . . . . .    D  ADDR  00C4H     A   
CMOD. . . . . . . . . . . . . . . . . .    D  ADDR  00C2H     A   
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    97

CPRL2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CSCHEDULERRUNNING . . . . . . . . . . .    X  ADDR  01DDH     R   SEG=?XD?TASKS
CSREPR. . . . . . . . . . . . . . . . .    D  ADDR  008FH     A   
CT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CY. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.7   A   
DBAR. . . . . . . . . . . . . . . . . .    D  ADDR  009AH     A   
DCIR. . . . . . . . . . . . . . . . . .    D  ADDR  009BH     A   
DDR . . . . . . . . . . . . . . . . . .    D  ADDR  009CH     A   
DMAHR . . . . . . . . . . . . . . . . .    D  ADDR  00ADH     A   
DMALR . . . . . . . . . . . . . . . . .    D  ADDR  00ABH     A   
DMAMR . . . . . . . . . . . . . . . . .    D  ADDR  00ACH     A   
DPH . . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH0. . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH1. . . . . . . . . . . . . . . . . .    D  ADDR  0085H     A   
DPL . . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL0. . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL1. . . . . . . . . . . . . . . . . .    D  ADDR  0084H     A   
DPS . . . . . . . . . . . . . . . . . .    D  ADDR  0086H     A   
DPX . . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX0. . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX1. . . . . . . . . . . . . . . . . .    D  ADDR  0095H     A   
EA. . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.7   A   
EIE . . . . . . . . . . . . . . . . . .    D  ADDR  00E8H     A   
EIF . . . . . . . . . . . . . . . . . .    D  ADDR  0091H     A   
EINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.0   A   
EINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.1   A   
EINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.2   A   
EINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.3   A   
EINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.4   A   
EIP . . . . . . . . . . . . . . . . . .    D  ADDR  00F8H     A   
EPCR. . . . . . . . . . . . . . . . . .    D  ADDR  00BEH     A   
EPDR. . . . . . . . . . . . . . . . . .    D  ADDR  00BFH     A   
ES0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.4   A   
ES1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.6   A   
ET0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.1   A   
ET1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.3   A   
ET2 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.5   A   
EWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.5   A   
EWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.1   A   
EX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.0   A   
EX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.2   A   
EXEN2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.3   A   
EXF2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.6   A   
F0. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.5   A   
F1. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.1   A   
I2CCIR. . . . . . . . . . . . . . . . .    D  ADDR  0096H     A   
I2CDR . . . . . . . . . . . . . . . . .    D  ADDR  0097H     A   
IE. . . . . . . . . . . . . . . . . . .    D  ADDR  00A8H     A   
IE0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.1   A   
IE1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.3   A   
INT0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
INT1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
IP. . . . . . . . . . . . . . . . . . .    D  ADDR  00B8H     A   
IT0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.0   A   
IT1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.2   A   
LCR . . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LDAHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
LDALR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
LDCSR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
LDHR. . . . . . . . . . . . . . . . . .    D  ADDR  00AAH     A   
LDLR. . . . . . . . . . . . . . . . . .    D  ADDR  00A9H     A   
LMSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSAIER. . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSCR. . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LSR . . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
LSSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    98

MCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00B6H     A   
MD0 . . . . . . . . . . . . . . . . . .    D  ADDR  00F9H     A   
MD1 . . . . . . . . . . . . . . . . . .    D  ADDR  00FAH     A   
MD2 . . . . . . . . . . . . . . . . . .    D  ADDR  00FBH     A   
MD3 . . . . . . . . . . . . . . . . . .    D  ADDR  00FCH     A   
MD4 . . . . . . . . . . . . . . . . . .    D  ADDR  00FDH     A   
MD5 . . . . . . . . . . . . . . . . . .    D  ADDR  00FEH     A   
MDR . . . . . . . . . . . . . . . . . .    D  ADDR  00B7H     A   
MXAX. . . . . . . . . . . . . . . . . .    D  ADDR  00EAH     A   
OV. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.2   A   
OWCIR . . . . . . . . . . . . . . . . .    D  ADDR  00D6H     A   
OWDR. . . . . . . . . . . . . . . . . .    D  ADDR  00D7H     A   
P . . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.0   A   
P0. . . . . . . . . . . . . . . . . . .    D  ADDR  0080H     A   
P0_0. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
P0_1. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
P0_2. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
P0_3. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
P0_4. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
P0_5. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
P0_6. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
P0_7. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
P1. . . . . . . . . . . . . . . . . . .    D  ADDR  0090H     A   
P1_0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
P1_1. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
P1_2. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
P1_3. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.3   A   
P1_4. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.4   A   
P1_5. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.5   A   
P1_6. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.6   A   
P1_7. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.7   A   
P2. . . . . . . . . . . . . . . . . . .    D  ADDR  00A0H     A   
P2_0. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.0   A   
P2_1. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.1   A   
P2_2. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.2   A   
P2_3. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.3   A   
P2_4. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.4   A   
P2_5. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.5   A   
P2_6. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
P2_7. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.7   A   
P3. . . . . . . . . . . . . . . . . . .    D  ADDR  00B0H     A   
P3_0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
P3_1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
P3_2. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
P3_3. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
P3_4. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
P3_5. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
P3_6. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
P3_7. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
PCON. . . . . . . . . . . . . . . . . .    D  ADDR  0087H     A   
PINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.0   A   
PINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.1   A   
PINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.2   A   
PINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.3   A   
PINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.4   A   
PISSR1. . . . . . . . . . . . . . . . .    D  ADDR  009EH     A   
PISSR2. . . . . . . . . . . . . . . . .    D  ADDR  009FH     A   
PS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.4   A   
PS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.6   A   
PSW . . . . . . . . . . . . . . . . . .    D  ADDR  00D0H     A   
PT0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.1   A   
PT1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.3   A   
PT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.5   A   
PWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.5   A   
PX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.0   A   
PX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.2   A   
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE    99

PXCURRENTTCB. . . . . . . . . . . . . .    X  ADDR  01A2H     R   SEG=?XD?TASKS
PXDELAYEDTASKLIST . . . . . . . . . . .    X  ADDR  01C2H     R   SEG=?XD?TASKS
PXOVERFLOWDELAYEDTASKLIST . . . . . . .    X  ADDR  01A6H     R   SEG=?XD?TASKS
PXREADYTASKSLISTS . . . . . . . . . . .    X  ADDR  0001H     R   SEG=?XD?TASKS
RB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.2   A   
RB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.2   A   
RCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.5   A   
RD. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
REN0. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.4   A   
REN1. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.4   A   
RI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.0   A   
RI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.0   A   
RLDH. . . . . . . . . . . . . . . . . .    D  ADDR  00CBH     A   
RLDL. . . . . . . . . . . . . . . . . .    D  ADDR  00CAH     A   
RS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.3   A   
RS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.4   A   
RWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.0   A   
RXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
SBUF0 . . . . . . . . . . . . . . . . .    D  ADDR  0099H     A   
SBUF1 . . . . . . . . . . . . . . . . .    D  ADDR  00C1H     A   
SCON0 . . . . . . . . . . . . . . . . .    D  ADDR  0098H     A   
SCON1 . . . . . . . . . . . . . . . . .    D  ADDR  00C0H     A   
SDSTSR. . . . . . . . . . . . . . . . .    D  ADDR  0094H     A   
SM00. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.7   A   
SM01. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.6   A   
SM02. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.5   A   
SM10. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.7   A   
SM11. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.6   A   
SM12. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.5   A   
SP. . . . . . . . . . . . . . . . . . .    D  ADDR  0081H     A   
SPICIR. . . . . . . . . . . . . . . . .    D  ADDR  00CEH     A   
SPIDR . . . . . . . . . . . . . . . . .    D  ADDR  00CFH     A   
STACK_START . . . . . . . . . . . . . .    I  ADDR  -------       EXT
STATUS. . . . . . . . . . . . . . . . .    D  ADDR  00E9H     A   
SUSINGPREEMPTION. . . . . . . . . . . .    X  ADDR  01A0H     R   SEG=?XD?TASKS
T0. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
T1. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
T2CON . . . . . . . . . . . . . . . . .    D  ADDR  00C8H     A   
T2IF. . . . . . . . . . . . . . . . . .    D  ADDR  00C9H     A   
TA. . . . . . . . . . . . . . . . . . .    D  ADDR  00EBH     A   
TASKS . . . . . . . . . . . . . . . . .    -- ----  -------       
TB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.3   A   
TB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.3   A   
TCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00AEH     A   
TCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.4   A   
TCON. . . . . . . . . . . . . . . . . .    D  ADDR  0088H     A   
TDR . . . . . . . . . . . . . . . . . .    D  ADDR  00AFH     A   
TF0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.5   A   
TF1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.7   A   
TF2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.7   A   
TH0 . . . . . . . . . . . . . . . . . .    D  ADDR  008CH     A   
TH1 . . . . . . . . . . . . . . . . . .    D  ADDR  008DH     A   
TH2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CDH     A   
TI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.1   A   
TI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.1   A   
TL0 . . . . . . . . . . . . . . . . . .    D  ADDR  008AH     A   
TL1 . . . . . . . . . . . . . . . . . .    D  ADDR  008BH     A   
TL2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CCH     A   
TMOD. . . . . . . . . . . . . . . . . .    D  ADDR  0089H     A   
TR0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.4   A   
TR1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.6   A   
TR2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.2   A   
TXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
UCMISSEDTICKS . . . . . . . . . . . . .    X  ADDR  01A9H     R   SEG=?XD?TASKS
UCSCHEDULERSUSPENDED. . . . . . . . . .    X  ADDR  01A5H     R   SEG=?XD?TASKS
UCTASKNUMBER. . . . . . . . . . . . . .    X  ADDR  0000H     R   SEG=?XD?TASKS
AX51 MACRO ASSEMBLER  TASKS                                                                 05/28/13 16:07:30 PAGE   100

UCTOPREADYPRIORITY. . . . . . . . . . .    X  ADDR  01DEH     R   SEG=?XD?TASKS
UCTOPUSEDPRIORITY . . . . . . . . . . .    X  ADDR  016BH     R   SEG=?XD?TASKS
UR2_DLH . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_DLL . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
UR2_FCR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_IER . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_IIR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_LCR . . . . . . . . . . . . . . . .    D  ADDR  00E4H     A   
UR2_LSR . . . . . . . . . . . . . . . .    D  ADDR  00E6H     A   
UR2_MCR . . . . . . . . . . . . . . . .    D  ADDR  00E5H     A   
UR2_MSR . . . . . . . . . . . . . . . .    D  ADDR  00E7H     A   
UR2_RBR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
UR2_THR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
USCURRENTNUMBEROFTASKS. . . . . . . . .    X  ADDR  0169H     R   SEG=?XD?TASKS
WDCON . . . . . . . . . . . . . . . . .    D  ADDR  00D8H     A   
WDIF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.3   A   
WR. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
WTRF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.2   A   
WTST. . . . . . . . . . . . . . . . . .    D  ADDR  0092H     A   
XDELAYEDTASKLIST1 . . . . . . . . . . .    X  ADDR  0170H     R   SEG=?XD?TASKS
XDELAYEDTASKLIST2 . . . . . . . . . . .    X  ADDR  0188H     R   SEG=?XD?TASKS
XMRHR . . . . . . . . . . . . . . . . .    D  ADDR  00A7H     A   
XMRLR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
XMWHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
XMWLR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
XPENDINGREADYLIST . . . . . . . . . . .    X  ADDR  01AAH     R   SEG=?XD?TASKS
XSUSPENDEDTASKLIST. . . . . . . . . . .    X  ADDR  01C5H     R   SEG=?XD?TASKS
XTICKCOUNT. . . . . . . . . . . . . . .    X  ADDR  016CH     R   SEG=?XD?TASKS


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).

C51 COMPILER V9.06   WHOIS                                                                 03/29/2013 16:57:08 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE WHOIS
OBJECT MODULE PLACED IN .\whois.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\bacnet\whois.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) 
                    -INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;.
                    -.\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\b
                    -uffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..
                    -\Src\FreeRTOSSource\include\;..\Src\schedule\;..\src\bacnet;..\src\include;..\src\LCD;..\src\version) DEFINE(KEIL_AX1100
                    -0) VARBANKING DEBUG PRINT(.\whois.lst) OBJECT(.\whois.obj)

line level    source

   1          /*####COPYRIGHTBEGIN####
   2           -------------------------------------------
   3           Copyright (C) 2005 Steve Karg
   4          
   5           This program is free software; you can redistribute it and/or
   6           modify it under the terms of the GNU General Public License
   7           as published by the Free Software Foundation; either version 2
   8           of the License, or (at your option) any later version.
   9          
  10           This program is distributed in the hope that it will be useful,
  11           but WITHOUT ANY WARRANTY; without even the implied warranty of
  12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13           GNU General Public License for more details.
  14          
  15           You should have received a copy of the GNU General Public License
  16           along with this program; if not, write to:
  17           The Free Software Foundation, Inc.
  18           59 Temple Place - Suite 330
  19           Boston, MA  02111-1307, USA.
  20          
  21           As a special exception, if other files instantiate templates or
  22           use macros or inline functions from this file, or you compile
  23           this file and link it with other works to produce a work based
  24           on this file, this file does not by itself cause the resulting
  25           work to be covered by the GNU General Public License. However
  26           the source code for this file must still be made available in
  27           accordance with section (3) of the GNU General Public License.
  28          
  29           This exception does not invalidate any other reasons why a work
  30           based on this file might be covered by the GNU General Public
  31           License.
  32           -------------------------------------------
  33          ####COPYRIGHTEND####*/
  34          #include <stdint.h>
  35          #include "../include/bacenum.h"
  36          #include "../include/bacdcode.h"
  37          #include "../include/bacdef.h"
  38          #include "../include/whois.h"
  39          
  40          /** @file whois.c  Encode/Decode Who-Is requests  */
  41          
  42          /* encode I-Am service  - use -1 for limit if you want unlimited */
  43          int whois_encode_apdu(
  44              uint8_t * apdu,
  45              int32_t low_limit,
  46              int32_t high_limit)
  47          {
  48   1          int len = 0;        /* length of each encoding */
  49   1          int apdu_len = 0;   /* total length of the apdu, return value */
  50   1      
C51 COMPILER V9.06   WHOIS                                                                 03/29/2013 16:57:08 PAGE 2   

  51   1          if (apdu) {
  52   2              apdu[0] = PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST;
  53   2              apdu[1] = SERVICE_UNCONFIRMED_WHO_IS;   /* service choice */
  54   2              apdu_len = 2;
  55   2              /* optional limits - must be used as a pair */
  56   2              if ((low_limit >= 0) && (low_limit <= BACNET_MAX_INSTANCE) &&
  57   2                  (high_limit >= 0) && (high_limit <= BACNET_MAX_INSTANCE)) {
  58   3                  len = encode_context_unsigned(&apdu[apdu_len], 0, low_limit);
  59   3                  apdu_len += len;
  60   3                  len = encode_context_unsigned(&apdu[apdu_len], 1, high_limit);
  61   3                  apdu_len += len;
  62   3              }
  63   2          }
  64   1      
  65   1          return apdu_len;
  66   1      }
  67          
  68          /* decode the service request only */
  69          int whois_decode_service_request(
  70              uint8_t * apdu,
  71              unsigned apdu_len,
  72              int32_t * pLow_limit,
  73              int32_t * pHigh_limit)
  74          {
  75   1          int len = 0;
  76   1          uint8_t tag_number = 0;
  77   1          uint32_t len_value = 0;
  78   1          uint32_t decoded_value = 0;
  79   1      
  80   1          /* optional limits - must be used as a pair */
  81   1          if (apdu_len) {
  82   2              len +=
  83   2                  decode_tag_number_and_value(&apdu[len], &tag_number, &len_value);
  84   2              if (tag_number != 0)
  85   2                  return -1;
  86   2              len += decode_unsigned(&apdu[len], len_value, &decoded_value);
  87   2              if (decoded_value <= BACNET_MAX_INSTANCE) {
  88   3                  if (pLow_limit)
  89   3                      *pLow_limit = decoded_value;
  90   3              }
  91   2              len +=
  92   2                  decode_tag_number_and_value(&apdu[len], &tag_number, &len_value);
  93   2              if (tag_number != 1)
  94   2                  return -1;
  95   2              len += decode_unsigned(&apdu[len], len_value, &decoded_value);
  96   2              if (decoded_value <= BACNET_MAX_INSTANCE) {
  97   3                  if (pHigh_limit)
  98   3                      *pHigh_limit = decoded_value;
  99   3              }
 100   2          }
 101   1      
 102   1          return len;
 103   1      }
 104          
 105          #ifdef TEST
              #include <assert.h>
              #include <string.h>
              #include "ctest.h"
              
              int whois_decode_apdu(
                  uint8_t * apdu,
                  unsigned apdu_len,
C51 COMPILER V9.06   WHOIS                                                                 03/29/2013 16:57:08 PAGE 3   

                  int32_t * pLow_limit,
                  int32_t * pHigh_limit)
              {
                  int len = 0;
              
                  if (!apdu)
                      return -1;
                  /* optional checking - most likely was already done prior to this call */
                  if (apdu[0] != PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST)
                      return -1;
                  if (apdu[1] != SERVICE_UNCONFIRMED_WHO_IS)
                      return -1;
                  /* optional limits - must be used as a pair */
                  if (apdu_len > 2) {
                      len =
                          whois_decode_service_request(&apdu[2], apdu_len - 2, pLow_limit,
                          pHigh_limit);
                  }
              
                  return len;
              }
              
              void testWhoIs(
                  Test * pTest)
              {
                  uint8_t apdu[480] = { 0 };
                  int len = 0;
                  int apdu_len = 0;
                  int32_t low_limit = -1;
                  int32_t high_limit = -1;
                  int32_t test_low_limit = -1;
                  int32_t test_high_limit = -1;
              
                  len = whois_encode_apdu(&apdu[0], low_limit, high_limit);
                  ct_test(pTest, len != 0);
                  apdu_len = len;
              
                  len =
                      whois_decode_apdu(&apdu[0], apdu_len, &test_low_limit,
                      &test_high_limit);
                  ct_test(pTest, len != -1);
                  ct_test(pTest, test_low_limit == low_limit);
                  ct_test(pTest, test_high_limit == high_limit);
              
                  for (low_limit = 0; low_limit <= BACNET_MAX_INSTANCE;
                      low_limit += (BACNET_MAX_INSTANCE / 4)) {
                      for (high_limit = 0; high_limit <= BACNET_MAX_INSTANCE;
                          high_limit += (BACNET_MAX_INSTANCE / 4)) {
                          len = whois_encode_apdu(&apdu[0], low_limit, high_limit);
                          apdu_len = len;
                          ct_test(pTest, len != 0);
                          len =
                              whois_decode_apdu(&apdu[0], apdu_len, &test_low_limit,
                              &test_high_limit);
                          ct_test(pTest, len != -1);
                          ct_test(pTest, test_low_limit == low_limit);
                          ct_test(pTest, test_high_limit == high_limit);
                      }
                  }
              }
              
              #ifdef TEST_WHOIS
C51 COMPILER V9.06   WHOIS                                                                 03/29/2013 16:57:08 PAGE 4   

              int main(
                  void)
              {
                  Test *pTest;
                  bool rc;
              
                  pTest = ct_create("BACnet Who-Is", NULL);
                  /* individual tests */
                  rc = ct_addTestFunction(pTest, testWhoIs);
                  assert(rc);
              
                  ct_setStream(pTest, stdout);
                  ct_run(pTest);
                  (void) ct_report(pTest);
                  ct_destroy(pTest);
              
                  return 0;
              }
              #endif /* TEST_WHOIS */
              #endif /* TEST */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    880    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

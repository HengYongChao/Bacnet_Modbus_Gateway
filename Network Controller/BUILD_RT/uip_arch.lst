C51 COMPILER V9.06   UIP_ARCH                                                              03/13/2013 09:32:23 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE UIP_ARCH
OBJECT MODULE PLACED IN .\uip_arch.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\tcpip\uip_arch.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020
                    -) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\
                    -;..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC
                    -\buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;
                    -..\Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\uip_arch.lst) OBJECT(.\ui
                    -p_arch.obj)

line level    source

   1          /*
   2           * Copyright (c) 2001, Adam Dunkels.
   3           * All rights reserved. 
   4           *
   5           * Redistribution and use in source and binary forms, with or without 
   6           * modification, are permitted provided that the following conditions 
   7           * are met: 
   8           * 1. Redistributions of source code must retain the above copyright 
   9           *    notice, this list of conditions and the following disclaimer. 
  10           * 2. Redistributions in binary form must reproduce the above copyright 
  11           *    notice, this list of conditions and the following disclaimer in the 
  12           *    documentation and/or other materials provided with the distribution. 
  13           * 3. The name of the author may not be used to endorse or promote
  14           *    products derived from this software without specific prior
  15           *    written permission.  
  16           *
  17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
  18           * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  19           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  21           * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  23           * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  25           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  26           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  27           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  28           *
  29           * This file is part of the uIP TCP/IP stack.
  30           *
  31           * $Id: uip_arch.c,v$
  32           *
  33           */
  34          
  35          /*       浜様様様様様様様様様様様様様様様様様様様様様様様様様様様様融
  36                   ?   TITLE:  Keil C51 v7.00 port of Adam Dunkels' uIP v0.9 
  37                   ?REVISION:  VER 0.0                                       
  38                   ?REV.DATE:  14-01-05                                      
  39                   ? ARCHIVE:                                                
  40                   ?  AUTHOR:  Murray R. Van Luyn, 2005.                     
  41                   藩様様様様様様様様様様様様様様様様様様様様様様様様様様様様夕        */
  42          
  43          #include "uip.h"
  44          #include "uip_arch.h"
  45          
  46          #define BUF_TRANSP ((uip_tcpip_hdr *)&uip_buf[UIP_LLH_LEN])
  47          #define BUF ((uip_tcpip_hdr *)&uip_buf[0])
  48          #define IP_PROTO_TCP    6
  49          
  50          /*-----------------------------------------------------------------------------------*/
C51 COMPILER V9.06   UIP_ARCH                                                              03/13/2013 09:32:23 PAGE 2   

  51          void
  52          uip_add32(U8_T *op32, U16_T op16)
  53          {
  54   1        
  55   1        uip_acc32[3] = op32[3] + (op16 & 0xff);
  56   1        uip_acc32[2] = op32[2] + (op16 >> 8);
  57   1        uip_acc32[1] = op32[1];
  58   1        uip_acc32[0] = op32[0];
  59   1        
  60   1        if(uip_acc32[2] < (op16 >> 8)) {
  61   2          ++uip_acc32[1];    
  62   2          if(uip_acc32[1] == 0) {
  63   3            ++uip_acc32[0];
  64   3          }
  65   2        }
  66   1        
  67   1        
  68   1        if(uip_acc32[3] < (op16 & 0xff)) {
  69   2          ++uip_acc32[2];  
  70   2          if(uip_acc32[2] == 0) {
  71   3            ++uip_acc32[1];    
  72   3            if(uip_acc32[1] == 0) {
  73   4              ++uip_acc32[0];
  74   4            }
  75   3          }
  76   2        }
  77   1      }
  78          /*-----------------------------------------------------------------------------------*/
  79          #if (!CHECKSUM_OFFLOAD)
              U16_T
              uip_chksum(U16_T *sdata, U16_T len)
              {
                U16_T acc;
                
                for(acc = 0; len > 1; len -= 2) {
                  acc += *sdata;
                  if(acc < *sdata) {
                    /* Overflow, so we add the carry to acc (i.e., increase by
                       one). */
                    ++acc;
                  }
                  ++sdata;
                }
              
                /* add up any odd byte */
                if(len == 1) {
                  acc += htons(((U16_T)(*(U8_T *)sdata)) << 8);
                  if(acc < htons(((U16_T)(*(U8_T *)sdata)) << 8)) {
                    ++acc;
                  }
                }
              
                return acc;
              }
              #endif
 106          /*-----------------------------------------------------------------------------------*/
 107          #if (!CHECKSUM_OFFLOAD)
              U16_T
              uip_ipchksum(void)
              {
                return uip_chksum((U16_T *)&uip_buf[TCPIP_EthHeadLen], 20);
              }
C51 COMPILER V9.06   UIP_ARCH                                                              03/13/2013 09:32:23 PAGE 3   

              #endif
 114          /*-----------------------------------------------------------------------------------*/
 115          #if (!CHECKSUM_OFFLOAD)
              U16_T
              uip_tcpchksum(void)
              {
                U16_T hsum, sum;
              
                
                /* Compute the checksum of the TCP header. */
                hsum = uip_chksum((U16_T *)&uip_buf[20 + TCPIP_EthHeadLen], 20);
              
                /* Compute the checksum of the data in the TCP packet and add it to
                   the TCP header checksum. */
                if (TCPIP_EthHeadLen)
                {
                      sum = uip_chksum((U16_T *)uip_appdata,
                        (U16_T)(((((U16_T)(BUF_TRANSP->len[0]) << 8) + BUF_TRANSP->len[1]) - 40)));
                }
                else
                {
                      sum = uip_chksum((U16_T *)uip_appdata,
                        (U16_T)(((((U16_T)(BUF->len[0]) << 8) + BUF->len[1]) - 40)));
                }
              
                if((sum += hsum) < hsum) {
                  ++sum;
                }
              
                if (TCPIP_EthHeadLen)
                {
                      if((sum += BUF_TRANSP->srcipaddr[0]) < BUF_TRANSP->srcipaddr[0]) {
                              ++sum;
                      }
                      if((sum += BUF_TRANSP->srcipaddr[1]) < BUF_TRANSP->srcipaddr[1]) {
                      ++sum;
                      }
                      if((sum += BUF_TRANSP->destipaddr[0]) < BUF_TRANSP->destipaddr[0]) {
                      ++sum;
                      }
                      if((sum += BUF_TRANSP->destipaddr[1]) < BUF_TRANSP->destipaddr[1]) {
                      ++sum;
                      }
                }
                else
                {  
                      if((sum += BUF->srcipaddr[0]) < BUF->srcipaddr[0]) {
                              ++sum;
                      }
                      if((sum += BUF->srcipaddr[1]) < BUF->srcipaddr[1]) {
                      ++sum;
                      }
                      if((sum += BUF->destipaddr[0]) < BUF->destipaddr[0]) {
                      ++sum;
                      }
                      if((sum += BUF->destipaddr[1]) < BUF->destipaddr[1]) {
                      ++sum;
                      }
                }
                if((sum += (U16_T)htons((U16_T)IP_PROTO_TCP)) < (U16_T)htons((U16_T)IP_PROTO_TCP)) {
                  ++sum;
                }
C51 COMPILER V9.06   UIP_ARCH                                                              03/13/2013 09:32:23 PAGE 4   

              
                if (TCPIP_EthHeadLen)
                {
                      hsum = (U16_T)htons((((U16_T)(BUF_TRANSP->len[0]) << 8) + BUF_TRANSP->len[1]) - 20);
                }
                else
                {
                      hsum = (U16_T)htons((((U16_T)(BUF->len[0]) << 8) + BUF->len[1]) - 20);
                }
                
                if((sum += hsum) < hsum) {
                  ++sum;
                }
                
                return sum;
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    197    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

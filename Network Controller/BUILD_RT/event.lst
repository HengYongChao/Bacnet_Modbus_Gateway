C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE EVENT
OBJECT MODULE PLACED IN .\event.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\bacnet\event.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) 
                    -INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;.
                    -.\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\b
                    -uffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..
                    -\Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\event.lst) OBJECT(.\event.o
                    -bj)

line level    source

   1          /*####COPYRIGHTBEGIN####
   2           -------------------------------------------
   3           Copyright (C) 2008 John Minack
   4          
   5           This program is free software; you can redistribute it and/or
   6           modify it under the terms of the GNU General Public License
   7           as published by the Free Software Foundation; either version 2
   8           of the License, or (at your option) any later version.
   9          
  10           This program is distributed in the hope that it will be useful,
  11           but WITHOUT ANY WARRANTY; without even the implied warranty of
  12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13           GNU General Public License for more details.
  14          
  15           You should have received a copy of the GNU General Public License
  16           along with this program; if not, write to:
  17           The Free Software Foundation, Inc.
  18           59 Temple Place - Suite 330
  19           Boston, MA  02111-1307, USA.
  20          
  21           As a special exception, if other files instantiate templates or
  22           use macros or inline functions from this file, or you compile
  23           this file and link it with other works to produce a work based
  24           on this file, this file does not by itself cause the resulting
  25           work to be covered by the GNU General Public License. However
  26           the source code for this file must still be made available in
  27           accordance with section (3) of the GNU General Public License.
  28          
  29           This exception does not invalidate any other reasons why a work
  30           based on this file might be covered by the GNU General Public
  31           License.
  32           -------------------------------------------
  33          ####COPYRIGHTEND####*/
  34          #include <assert.h>
  35          #include "../include/event.h"
  36          #include "../include/bacdcode.h"
  37          #include "../include/npdu.h"
  38          #include "../include/device.h"
  39          #include "../include/timestamp.h"
  40          
  41          /** @file event.c  Encode/Decode Event Notifications */
  42          
  43          int uevent_notify_encode_apdu(
  44              uint8_t * apdu,
  45              BACNET_EVENT_NOTIFICATION_DATA * data)
*** ERROR C141 IN LINE 45 OF ..\src\bacnet\event.c: syntax error near ')'
  46          {
*** ERROR C236 IN LINE 46 OF ..\src\bacnet\event.c: '_uevent_notify_encode_apdu': different length of parameter lists
  47   1          int len = 0;        /* length of each encoding */
  48   1          int apdu_len = 0;   /* total length of the apdu, return value */
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 2   

  49   1      
  50   1      
  51   1          if (apdu) {
  52   2              apdu[0] = PDU_TYPE_UNCONFIRMED_SERVICE_REQUEST;
  53   2              apdu[1] = SERVICE_UNCONFIRMED_EVENT_NOTIFICATION;       /* service choice */
  54   2              apdu_len = 2;
  55   2      
  56   2              len += event_notify_encode_service_request(&apdu[apdu_len], data);
  57   2      
  58   2              if (len > 0) {
  59   3                  apdu_len += len;
  60   3              } else {
  61   3                  apdu_len = 0;
  62   3              }
  63   2          }
  64   1      
  65   1          return apdu_len;
  66   1      }
  67          
  68          int cevent_notify_encode_apdu(
  69              uint8_t * apdu,
  70              uint8_t invoke_id,
  71              BACNET_EVENT_NOTIFICATION_DATA * data)
  72          {
*** ERROR C236 IN LINE 72 OF ..\src\bacnet\event.c: '_cevent_notify_encode_apdu': different length of parameter lists
  73   1          int len = 0;        /* length of each encoding */
  74   1          int apdu_len = 0;   /* total length of the apdu, return value */
  75   1      
  76   1          if (apdu) {
  77   2              apdu[0] = PDU_TYPE_CONFIRMED_SERVICE_REQUEST;
  78   2              apdu[1] = encode_max_segs_max_apdu(0, MAX_APDU);
  79   2              apdu[2] = invoke_id;
  80   2              apdu[3] = SERVICE_CONFIRMED_EVENT_NOTIFICATION; /* service choice */
  81   2              apdu_len = 4;
  82   2      
  83   2              len += event_notify_encode_service_request(&apdu[apdu_len], data);
  84   2      
  85   2              if (len > 0) {
  86   3                  apdu_len += len;
  87   3              } else {
  88   3                  apdu_len = 0;
  89   3              }
  90   2          }
  91   1      
  92   1          return apdu_len;
  93   1      }
  94          
  95          int event_notify_encode_service_request(
  96              uint8_t * apdu,
  97              BACNET_EVENT_NOTIFICATION_DATA * data)
  98          {
*** ERROR C236 IN LINE 98 OF ..\src\bacnet\event.c: '_event_notify_encode_service_request': different length of paramete
             -r lists
  99   1          int len = 0;        /* length of each encoding */
 100   1          int apdu_len = 0;   /* total length of the apdu, return value */
 101   1      
 102   1          if (apdu) {
 103   2              /* tag 0 - processIdentifier */
 104   2              len =
 105   2                  encode_context_unsigned(&apdu[apdu_len], 0,
 106   2                  data->processIdentifier);
 107   2              apdu_len += len;
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 3   

 108   2              /* tag 1 - initiatingObjectIdentifier */
 109   2              len =
 110   2                  encode_context_object_id(&apdu[apdu_len], 1,
 111   2                  (int) data->initiatingObjectIdentifier.type,
 112   2                  data->initiatingObjectIdentifier.instance);
 113   2              apdu_len += len;
 114   2      
 115   2              /* tag 2 - eventObjectIdentifier */
 116   2              len =
 117   2                  encode_context_object_id(&apdu[apdu_len], 2,
 118   2                  (int) data->eventObjectIdentifier.type,
 119   2                  data->eventObjectIdentifier.instance);
 120   2              apdu_len += len;
 121   2      
 122   2              /* tag 3 - timeStamp */
 123   2      
 124   2              len =
 125   2                  bacapp_encode_context_timestamp(&apdu[apdu_len], 3,
 126   2                  &data->timeStamp);
 127   2              apdu_len += len;
 128   2      
 129   2              /* tag 4 - noticicationClass */
 130   2      
 131   2              len =
 132   2                  encode_context_unsigned(&apdu[apdu_len], 4,
 133   2                  data->notificationClass);
 134   2              apdu_len += len;
 135   2      
 136   2              /* tag 5 - priority */
 137   2      
 138   2              len = encode_context_unsigned(&apdu[apdu_len], 5, data->priority);
 139   2              apdu_len += len;
 140   2      
 141   2              /* tag 6 - eventType */
 142   2              len = encode_context_enumerated(&apdu[apdu_len], 6, data->eventType);
 143   2              apdu_len += len;
 144   2      
 145   2              /* tag 7 - messageText */
 146   2              if (data->messageText) {
 147   3                  len =
 148   3                      encode_context_character_string(&apdu[apdu_len], 7,
 149   3                      data->messageText);
 150   3                  apdu_len += len;
 151   3              }
 152   2              /* tag 8 - notifyType */
 153   2              len = encode_context_enumerated(&apdu[apdu_len], 8, data->notifyType);
 154   2              apdu_len += len;
 155   2      
 156   2              switch (data->notifyType) {
 157   3                  case NOTIFY_ALARM:
 158   3                  case NOTIFY_EVENT:
 159   3                      /* tag 9 - ackRequired */
 160   3      
 161   3                      len =
 162   3                          encode_context_boolean(&apdu[apdu_len], 9,
 163   3                          data->ackRequired);
 164   3                      apdu_len += len;
 165   3      
 166   3                      /* tag 10 - fromState */
 167   3                      len =
 168   3                          encode_context_enumerated(&apdu[apdu_len], 10,
 169   3                          data->fromState);
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 4   

 170   3                      apdu_len += len;
 171   3                      break;
 172   3      
 173   3                  default:
 174   3                      break;
 175   3              }
 176   2      
 177   2              /* tag 11 - toState */
 178   2              len = encode_context_enumerated(&apdu[apdu_len], 11, data->toState);
 179   2              apdu_len += len;
 180   2      
 181   2              switch (data->notifyType) {
 182   3                  case NOTIFY_ALARM:
 183   3                  case NOTIFY_EVENT:
 184   3                      /* tag 12 - event values */
 185   3                      len = encode_opening_tag(&apdu[apdu_len], 12);
 186   3                      apdu_len += len;
 187   3      
 188   3                      switch (data->eventType) {
 189   4                          case EVENT_CHANGE_OF_BITSTRING:
 190   4                              len = encode_opening_tag(&apdu[apdu_len], 0);
 191   4                              apdu_len += len;
 192   4      
 193   4                              len =
 194   4                                  encode_context_bitstring(&apdu[apdu_len], 0,
 195   4                                  &data->notificationParams.changeOfBitstring.
 196   4                                  referencedBitString);
 197   4                              apdu_len += len;
 198   4      
 199   4                              len =
 200   4                                  encode_context_bitstring(&apdu[apdu_len], 1,
 201   4                                  &data->notificationParams.changeOfBitstring.
 202   4                                  statusFlags);
 203   4                              apdu_len += len;
 204   4      
 205   4                              len = encode_closing_tag(&apdu[apdu_len], 0);
 206   4                              apdu_len += len;
 207   4                              break;
 208   4      
 209   4                          case EVENT_CHANGE_OF_STATE:
 210   4                              len = encode_opening_tag(&apdu[apdu_len], 1);
 211   4                              apdu_len += len;
 212   4      
 213   4                              len = encode_opening_tag(&apdu[apdu_len], 0);
 214   4                              apdu_len += len;
 215   4      
 216   4                              len =
 217   4                                  bacapp_encode_property_state(&apdu[apdu_len],
 218   4                                  &data->notificationParams.changeOfState.newState);
 219   4                              apdu_len += len;
 220   4      
 221   4                              len = encode_closing_tag(&apdu[apdu_len], 0);
 222   4                              apdu_len += len;
 223   4      
 224   4                              len =
 225   4                                  encode_context_bitstring(&apdu[apdu_len], 1,
 226   4                                  &data->notificationParams.changeOfState.
 227   4                                  statusFlags);
 228   4                              apdu_len += len;
 229   4      
 230   4                              len = encode_closing_tag(&apdu[apdu_len], 1);
 231   4                              apdu_len += len;
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 5   

 232   4                              break;
 233   4      
 234   4                          case EVENT_CHANGE_OF_VALUE:
 235   4                              len = encode_opening_tag(&apdu[apdu_len], 2);
 236   4                              apdu_len += len;
 237   4      
 238   4                              len = encode_opening_tag(&apdu[apdu_len], 0);
 239   4                              apdu_len += len;
 240   4      
 241   4                              switch (data->notificationParams.changeOfValue.tag) {
 242   5                                  case CHANGE_OF_VALUE_REAL:
 243   5                                      len =
 244   5                                          encode_context_real(&apdu[apdu_len], 1,
 245   5                                          data->notificationParams.changeOfValue.
 246   5                                          newValue.changeValue);
 247   5                                      apdu_len += len;
 248   5                                      break;
 249   5      
 250   5                                  case CHANGE_OF_VALUE_BITS:
 251   5                                      len =
 252   5                                          encode_context_bitstring(&apdu[apdu_len],
 253   5                                          0,
 254   5                                          &data->notificationParams.changeOfValue.
 255   5                                          newValue.changedBits);
 256   5                                      apdu_len += len;
 257   5                                      break;
 258   5      
 259   5                                  default:
 260   5                                      return 0;
 261   5                              }
 262   4      
 263   4                              len = encode_closing_tag(&apdu[apdu_len], 0);
 264   4                              apdu_len += len;
 265   4      
 266   4                              len =
 267   4                                  encode_context_bitstring(&apdu[apdu_len], 1,
 268   4                                  &data->notificationParams.changeOfValue.
 269   4                                  statusFlags);
 270   4                              apdu_len += len;
 271   4      
 272   4                              len = encode_closing_tag(&apdu[apdu_len], 2);
 273   4                              apdu_len += len;
 274   4                              break;
 275   4      
 276   4      
 277   4                          case EVENT_FLOATING_LIMIT:
 278   4                              len = encode_opening_tag(&apdu[apdu_len], 4);
 279   4                              apdu_len += len;
 280   4      
 281   4                              len =
 282   4                                  encode_context_real(&apdu[apdu_len], 0,
 283   4                                  data->notificationParams.floatingLimit.
 284   4                                  referenceValue);
 285   4                              apdu_len += len;
 286   4      
 287   4                              len =
 288   4                                  encode_context_bitstring(&apdu[apdu_len], 1,
 289   4                                  &data->notificationParams.floatingLimit.
 290   4                                  statusFlags);
 291   4                              apdu_len += len;
 292   4      
 293   4                              len =
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 6   

 294   4                                  encode_context_real(&apdu[apdu_len], 2,
 295   4                                  data->notificationParams.floatingLimit.
 296   4                                  setPointValue);
 297   4                              apdu_len += len;
 298   4      
 299   4                              len =
 300   4                                  encode_context_real(&apdu[apdu_len], 3,
 301   4                                  data->notificationParams.floatingLimit.errorLimit);
 302   4                              apdu_len += len;
 303   4      
 304   4                              len = encode_closing_tag(&apdu[apdu_len], 4);
 305   4                              apdu_len += len;
 306   4                              break;
 307   4      
 308   4      
 309   4                          case EVENT_OUT_OF_RANGE:
 310   4                              len = encode_opening_tag(&apdu[apdu_len], 5);
 311   4                              apdu_len += len;
 312   4      
 313   4                              len =
 314   4                                  encode_context_real(&apdu[apdu_len], 0,
 315   4                                  data->notificationParams.outOfRange.
 316   4                                  exceedingValue);
 317   4                              apdu_len += len;
 318   4      
 319   4                              len =
 320   4                                  encode_context_bitstring(&apdu[apdu_len], 1,
 321   4                                  &data->notificationParams.outOfRange.statusFlags);
 322   4                              apdu_len += len;
 323   4      
 324   4                              len =
 325   4                                  encode_context_real(&apdu[apdu_len], 2,
 326   4                                  data->notificationParams.outOfRange.deadband);
 327   4                              apdu_len += len;
 328   4      
 329   4                              len =
 330   4                                  encode_context_real(&apdu[apdu_len], 3,
 331   4                                  data->notificationParams.outOfRange.exceededLimit);
 332   4                              apdu_len += len;
 333   4      
 334   4                              len = encode_closing_tag(&apdu[apdu_len], 5);
 335   4                              apdu_len += len;
 336   4                              break;
 337   4      
 338   4                          case EVENT_CHANGE_OF_LIFE_SAFETY:
 339   4                              len = encode_opening_tag(&apdu[apdu_len], 8);
 340   4                              apdu_len += len;
 341   4      
 342   4                              len =
 343   4                                  encode_context_enumerated(&apdu[apdu_len], 0,
 344   4                                  data->notificationParams.changeOfLifeSafety.
 345   4                                  newState);
 346   4                              apdu_len += len;
 347   4      
 348   4                              len =
 349   4                                  encode_context_enumerated(&apdu[apdu_len], 1,
 350   4                                  data->notificationParams.changeOfLifeSafety.
 351   4                                  newMode);
 352   4                              apdu_len += len;
 353   4      
 354   4                              len =
 355   4                                  encode_context_bitstring(&apdu[apdu_len], 2,
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 7   

 356   4                                  &data->notificationParams.changeOfLifeSafety.
 357   4                                  statusFlags);
 358   4                              apdu_len += len;
 359   4      
 360   4                              len =
 361   4                                  encode_context_enumerated(&apdu[apdu_len], 3,
 362   4                                  data->notificationParams.changeOfLifeSafety.
 363   4                                  operationExpected);
 364   4                              apdu_len += len;
 365   4      
 366   4                              len = encode_closing_tag(&apdu[apdu_len], 8);
 367   4                              apdu_len += len;
 368   4                              break;
 369   4      
 370   4                          case EVENT_BUFFER_READY:
 371   4                              len = encode_opening_tag(&apdu[apdu_len], 10);
 372   4                              apdu_len += len;
 373   4      
 374   4                              len =
 375   4                                  bacapp_encode_context_device_obj_property_ref(&apdu
 376   4                                  [apdu_len], 0,
 377   4                                  &data->notificationParams.bufferReady.
 378   4                                  bufferProperty);
 379   4                              apdu_len += len;
 380   4      
 381   4                              len =
 382   4                                  encode_context_unsigned(&apdu[apdu_len], 1,
 383   4                                  data->notificationParams.bufferReady.
 384   4                                  previousNotification);
 385   4                              apdu_len += len;
 386   4      
 387   4                              len =
 388   4                                  encode_context_unsigned(&apdu[apdu_len], 2,
 389   4                                  data->notificationParams.bufferReady.
 390   4                                  currentNotification);
 391   4                              apdu_len += len;
 392   4      
 393   4                              len = encode_closing_tag(&apdu[apdu_len], 10);
 394   4                              apdu_len += len;
 395   4                              break;
 396   4                          case EVENT_UNSIGNED_RANGE:
 397   4                              len = encode_opening_tag(&apdu[apdu_len], 11);
 398   4                              apdu_len += len;
 399   4      
 400   4                              len =
 401   4                                  encode_context_unsigned(&apdu[apdu_len], 0,
 402   4                                  data->notificationParams.unsignedRange.
 403   4                                  exceedingValue);
 404   4                              apdu_len += len;
 405   4      
 406   4                              len =
 407   4                                  encode_context_bitstring(&apdu[apdu_len], 1,
 408   4                                  &data->notificationParams.unsignedRange.
 409   4                                  statusFlags);
 410   4                              apdu_len += len;
 411   4      
 412   4                              len =
 413   4                                  encode_context_unsigned(&apdu[apdu_len], 2,
 414   4                                  data->notificationParams.unsignedRange.
 415   4                                  exceededLimit);
 416   4                              apdu_len += len;
 417   4      
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 8   

 418   4                              len = encode_closing_tag(&apdu[apdu_len], 11);
 419   4                              apdu_len += len;
 420   4                              break;
 421   4                          case EVENT_EXTENDED:
 422   4                          case EVENT_COMMAND_FAILURE:
 423   4                          default:
 424   4                              assert(0);
 425   4                              break;
 426   4                      }
 427   3                      len = encode_closing_tag(&apdu[apdu_len], 12);
 428   3                      apdu_len += len;
 429   3                      break;
 430   3                  case NOTIFY_ACK_NOTIFICATION:
 431   3                      /* FIXME: handle this case */
 432   3                  default:
 433   3                      break;
 434   3              }
 435   2          }
 436   1          return apdu_len;
 437   1      }
 438          
 439          int event_notify_decode_service_request(
 440              uint8_t * apdu,
 441              unsigned apdu_len,
 442              BACNET_EVENT_NOTIFICATION_DATA * data)
 443          {
*** ERROR C236 IN LINE 443 OF ..\src\bacnet\event.c: '_event_notify_decode_service_request': different length of paramet
             -er lists
 444   1          int len = 0;        /* return value */
 445   1          int section_length = 0;
 446   1          uint32_t value = 0;
 447   1      
 448   1          if (apdu_len && data) {
*** ERROR C141 IN LINE 448 OF ..\src\bacnet\event.c: syntax error near 'data'
 449   2              /* tag 0 - processIdentifier */
 450   2              if ((section_length =
 451   2                      decode_context_unsigned(&apdu[len], 0,
 452   2                          &data->processIdentifier)) == -1) {
 453   3                  return -1;
 454   3              } else {
 455   3                  len += section_length;
 456   3              }
 457   2      
 458   2              /* tag 1 - initiatingObjectIdentifier */
 459   2              if ((section_length =
 460   2                      decode_context_object_id(&apdu[len], 1,
 461   2                          &data->initiatingObjectIdentifier.type,
 462   2                          &data->initiatingObjectIdentifier.instance)) == -1) {
 463   3                  return -1;
 464   3              } else {
 465   3                  len += section_length;
 466   3              }
 467   2              /* tag 2 - eventObjectIdentifier */
 468   2              if ((section_length =
 469   2                      decode_context_object_id(&apdu[len], 2,
 470   2                          &data->eventObjectIdentifier.type,
 471   2                          &data->eventObjectIdentifier.instance)) == -1) {
 472   3                  return -1;
 473   3              } else {
 474   3                  len += section_length;
 475   3              }
 476   2              /* tag 3 - timeStamp */
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 9   

 477   2              if ((section_length =
 478   2                      bacapp_decode_context_timestamp(&apdu[len], 3,
 479   2                          &data->timeStamp)) == -1) {
 480   3                  return -1;
 481   3              } else {
 482   3                  len += section_length;
 483   3              }
 484   2              /* tag 4 - noticicationClass */
 485   2              if ((section_length =
 486   2                      decode_context_unsigned(&apdu[len], 4,
 487   2                          &data->notificationClass)) == -1) {
 488   3                  return -1;
 489   3              } else {
 490   3                  len += section_length;
 491   3              }
 492   2              /* tag 5 - priority */
 493   2              if ((section_length =
 494   2                      decode_context_unsigned(&apdu[len], 5, &value)) == -1) {
 495   3                  return -1;
 496   3              } else {
 497   3                  if (value > 0xff) {
 498   4                      return -1;
 499   4                  } else {
 500   4                      data->priority = (uint8_t) value;
 501   4                      len += section_length;
 502   4                  }
 503   3              }
 504   2              /* tag 6 - eventType */
 505   2              if ((section_length =
 506   2                      decode_context_enumerated(&apdu[len], 6, &value)) == -1) {
 507   3                  return -1;
 508   3              } else {
 509   3                  data->eventType = (BACNET_EVENT_TYPE) value;
 510   3                  len += section_length;
 511   3              }
 512   2              /* tag 7 - messageText */
 513   2      
 514   2              if (decode_is_context_tag(&apdu[len], 7)) {
 515   3                  if (data->messageText != NULL) {
 516   4                      if ((section_length =
 517   4                              decode_context_character_string(&apdu[len], 7,
 518   4                                  data->messageText)) == -1) {
 519   5                          /*FIXME This is an optional parameter */
 520   5                          return -1;
 521   5                      } else {
 522   5                          len += section_length;
 523   5                      }
 524   4                  } else {
 525   4                      return -1;
 526   4                  }
 527   3              } else {
 528   3                  if (data->messageText != NULL) {
 529   4                      characterstring_init_ansi(data->messageText, "");
 530   4                  }
 531   3              }
 532   2      
 533   2              /* tag 8 - notifyType */
 534   2              if ((section_length =
 535   2                      decode_context_enumerated(&apdu[len], 8, &value)) == -1) {
 536   3                  return -1;
 537   3              } else {
 538   3                  data->notifyType = (BACNET_NOTIFY_TYPE) value;
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 10  

 539   3                  len += section_length;
 540   3              }
 541   2              switch (data->notifyType) {
 542   3                  case NOTIFY_ALARM:
 543   3                  case NOTIFY_EVENT:
 544   3                      /* tag 9 - ackRequired */
 545   3                      section_length =
 546   3                          decode_context_boolean2(&apdu[len], 9, &data->ackRequired);
 547   3                      if (section_length == -1) {
 548   4                          return -1;
 549   4                      }
 550   3                      len += section_length;
 551   3      
 552   3                      /* tag 10 - fromState */
 553   3                      if ((section_length =
 554   3                              decode_context_enumerated(&apdu[len], 10,
 555   3                                  &value)) == -1) {
 556   4                          return -1;
 557   4                      } else {
 558   4                          data->fromState = (BACNET_EVENT_STATE) value;
 559   4                          len += section_length;
 560   4                      }
 561   3                      break;
 562   3                      /* In cases other than alarm and event
 563   3                         there's no data, so do not return an error
 564   3                         but continue normally */
 565   3                  case NOTIFY_ACK_NOTIFICATION:
 566   3                  default:
 567   3                      break;
 568   3      
 569   3              }
 570   2              /* tag 11 - toState */
 571   2              if ((section_length =
 572   2                      decode_context_enumerated(&apdu[len], 11, &value)) == -1) {
 573   3                  return -1;
 574   3              } else {
 575   3                  data->toState = (BACNET_EVENT_STATE) value;
 576   3                  len += section_length;
 577   3              }
 578   2              /* tag 12 - eventValues */
 579   2              switch (data->notifyType) {
 580   3                  case NOTIFY_ALARM:
 581   3                  case NOTIFY_EVENT:
 582   3                      if (decode_is_opening_tag_number(&apdu[len], 12)) {
 583   4                          len++;
 584   4                      } else {
 585   4                          return -1;
 586   4                      }
 587   3                      if (decode_is_opening_tag_number(&apdu[len],
 588   3                              (uint8_t) data->eventType)) {
 589   4                          len++;
 590   4                      } else {
 591   4                          return -1;
 592   4                      }
 593   3      
 594   3                      switch (data->eventType) {
 595   4                          case EVENT_CHANGE_OF_BITSTRING:
 596   4                              if (-1 == (section_length =
 597   4                                      decode_context_bitstring(&apdu[len], 0,
 598   4                                          &data->notificationParams.
 599   4                                          changeOfBitstring.referencedBitString))) {
 600   5                                  return -1;
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 11  

 601   5                              }
 602   4                              len += section_length;
 603   4      
 604   4                              if (-1 == (section_length =
 605   4                                      decode_context_bitstring(&apdu[len], 1,
 606   4                                          &data->notificationParams.
 607   4                                          changeOfBitstring.statusFlags))) {
 608   5                                  return -1;
 609   5                              }
 610   4                              len += section_length;
 611   4      
 612   4                              break;
 613   4      
 614   4                          case EVENT_CHANGE_OF_STATE:
 615   4                              if (-1 == (section_length =
 616   4                                      bacapp_decode_context_property_state(&apdu
 617   4                                          [len], 0,
 618   4                                          &data->notificationParams.changeOfState.
 619   4                                          newState))) {
 620   5                                  return -1;
 621   5                              }
 622   4                              len += section_length;
 623   4      
 624   4                              if (-1 == (section_length =
 625   4                                      decode_context_bitstring(&apdu[len], 1,
 626   4                                          &data->notificationParams.changeOfState.
 627   4                                          statusFlags))) {
 628   5                                  return -1;
 629   5                              }
 630   4                              len += section_length;
 631   4      
 632   4                              break;
 633   4      
 634   4                          case EVENT_CHANGE_OF_VALUE:
 635   4                              if (!decode_is_opening_tag_number(&apdu[len], 0)) {
 636   5                                  return -1;
 637   5                              }
 638   4                              len++;
 639   4      
 640   4                              if (decode_is_context_tag(&apdu[len],
 641   4                                      CHANGE_OF_VALUE_BITS)) {
 642   5      
 643   5                                  if (-1 == (section_length =
 644   5                                          decode_context_bitstring(&apdu[len], 0,
 645   5                                              &data->notificationParams.
 646   5                                              changeOfValue.newValue.changedBits))) {
 647   6                                      return -1;
 648   6                                  }
 649   5      
 650   5                                  len += section_length;
 651   5                                  data->notificationParams.changeOfValue.tag =
 652   5                                      CHANGE_OF_VALUE_BITS;
 653   5                              } else if (decode_is_context_tag(&apdu[len],
 654   4                                      CHANGE_OF_VALUE_REAL)) {
 655   5                                  if (-1 == (section_length =
 656   5                                          decode_context_real(&apdu[len], 1,
 657   5                                              &data->notificationParams.
 658   5                                              changeOfValue.newValue.changeValue))) {
 659   6                                      return -1;
 660   6                                  }
 661   5      
 662   5                                  len += section_length;
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 12  

 663   5                                  data->notificationParams.changeOfValue.tag =
 664   5                                      CHANGE_OF_VALUE_REAL;
 665   5                              } else {
 666   5                                  return -1;
 667   5                              }
 668   4                              if (!decode_is_closing_tag_number(&apdu[len], 0)) {
 669   5                                  return -1;
 670   5                              }
 671   4                              len++;
 672   4      
 673   4      
 674   4                              if (-1 == (section_length =
 675   4                                      decode_context_bitstring(&apdu[len], 1,
 676   4                                          &data->notificationParams.changeOfValue.
 677   4                                          statusFlags))) {
 678   5                                  return -1;
 679   5                              }
 680   4                              len += section_length;
 681   4                              break;
 682   4      
 683   4                          case EVENT_FLOATING_LIMIT:
 684   4                              if (-1 == (section_length =
 685   4                                      decode_context_real(&apdu[len], 0,
 686   4                                          &data->notificationParams.floatingLimit.
 687   4                                          referenceValue))) {
 688   5                                  return -1;
 689   5                              }
 690   4                              len += section_length;
 691   4      
 692   4                              if (-1 == (section_length =
 693   4                                      decode_context_bitstring(&apdu[len], 1,
 694   4                                          &data->notificationParams.floatingLimit.
 695   4                                          statusFlags))) {
 696   5                                  return -1;
 697   5                              }
 698   4                              len += section_length;
 699   4                              if (-1 == (section_length =
 700   4                                      decode_context_real(&apdu[len], 2,
 701   4                                          &data->notificationParams.floatingLimit.
 702   4                                          setPointValue))) {
 703   5                                  return -1;
 704   5                              }
 705   4                              len += section_length;
 706   4      
 707   4                              if (-1 == (section_length =
 708   4                                      decode_context_real(&apdu[len], 3,
 709   4                                          &data->notificationParams.floatingLimit.
 710   4                                          errorLimit))) {
 711   5                                  return -1;
 712   5                              }
 713   4                              len += section_length;
 714   4                              break;
 715   4      
 716   4                          case EVENT_OUT_OF_RANGE:
 717   4                              if (-1 == (section_length =
 718   4                                      decode_context_real(&apdu[len], 0,
 719   4                                          &data->notificationParams.outOfRange.
 720   4                                          exceedingValue))) {
 721   5                                  return -1;
 722   5                              }
 723   4                              len += section_length;
 724   4      
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 13  

 725   4                              if (-1 == (section_length =
 726   4                                      decode_context_bitstring(&apdu[len], 1,
 727   4                                          &data->notificationParams.outOfRange.
 728   4                                          statusFlags))) {
 729   5                                  return -1;
 730   5                              }
 731   4                              len += section_length;
 732   4                              if (-1 == (section_length =
 733   4                                      decode_context_real(&apdu[len], 2,
 734   4                                          &data->notificationParams.outOfRange.
 735   4                                          deadband))) {
 736   5                                  return -1;
 737   5                              }
 738   4                              len += section_length;
 739   4      
 740   4                              if (-1 == (section_length =
 741   4                                      decode_context_real(&apdu[len], 3,
 742   4                                          &data->notificationParams.outOfRange.
 743   4                                          exceededLimit))) {
 744   5                                  return -1;
 745   5                              }
 746   4                              len += section_length;
 747   4                              break;
 748   4      
 749   4      
 750   4                          case EVENT_CHANGE_OF_LIFE_SAFETY:
 751   4                              if (-1 == (section_length =
 752   4                                      decode_context_enumerated(&apdu[len], 0,
 753   4                                          &value))) {
 754   5                                  return -1;
 755   5                              }
 756   4                              data->notificationParams.changeOfLifeSafety.newState =
 757   4                                  (BACNET_LIFE_SAFETY_STATE) value;
 758   4                              len += section_length;
 759   4      
 760   4                              if (-1 == (section_length =
 761   4                                      decode_context_enumerated(&apdu[len], 1,
 762   4                                          &value))) {
 763   5                                  return -1;
 764   5                              }
 765   4                              data->notificationParams.changeOfLifeSafety.newMode =
 766   4                                  (BACNET_LIFE_SAFETY_MODE) value;
 767   4                              len += section_length;
 768   4      
 769   4                              if (-1 == (section_length =
 770   4                                      decode_context_bitstring(&apdu[len], 2,
 771   4                                          &data->notificationParams.
 772   4                                          changeOfLifeSafety.statusFlags))) {
 773   5                                  return -1;
 774   5                              }
 775   4                              len += section_length;
 776   4      
 777   4                              if (-1 == (section_length =
 778   4                                      decode_context_enumerated(&apdu[len], 3,
 779   4                                          &value))) {
 780   5                                  return -1;
 781   5                              }
 782   4                              data->notificationParams.changeOfLifeSafety.
 783   4                                  operationExpected =
 784   4                                  (BACNET_LIFE_SAFETY_OPERATION) value;
 785   4                              len += section_length;
 786   4                              break;
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 14  

 787   4      
 788   4                          case EVENT_BUFFER_READY:
 789   4                              if (-1 == (section_length =
 790   4                                      bacapp_decode_context_device_obj_property_ref
 791   4                                      (&apdu[len], 0,
 792   4                                          &data->notificationParams.bufferReady.
 793   4                                          bufferProperty))) {
 794   5                                  return -1;
 795   5                              }
 796   4                              len += section_length;
 797   4      
 798   4                              if (-1 == (section_length =
 799   4                                      decode_context_unsigned(&apdu[len], 1,
 800   4                                          &data->notificationParams.bufferReady.
 801   4                                          previousNotification))) {
 802   5                                  return -1;
 803   5                              }
 804   4                              len += section_length;
 805   4      
 806   4                              if (-1 == (section_length =
 807   4                                      decode_context_unsigned(&apdu[len], 2,
 808   4                                          &data->notificationParams.bufferReady.
 809   4                                          currentNotification))) {
 810   5                                  return -1;
 811   5                              }
 812   4                              len += section_length;
 813   4                              break;
 814   4      
 815   4                          case EVENT_UNSIGNED_RANGE:
 816   4                              if (-1 == (section_length =
 817   4                                      decode_context_unsigned(&apdu[len], 0,
 818   4                                          &data->notificationParams.unsignedRange.
 819   4                                          exceedingValue))) {
 820   5                                  return -1;
 821   5                              }
 822   4                              len += section_length;
 823   4      
 824   4                              if (-1 == (section_length =
 825   4                                      decode_context_bitstring(&apdu[len], 1,
 826   4                                          &data->notificationParams.unsignedRange.
 827   4                                          statusFlags))) {
 828   5                                  return -1;
 829   5                              }
 830   4                              len += section_length;
 831   4      
 832   4                              if (-1 == (section_length =
 833   4                                      decode_context_unsigned(&apdu[len], 2,
 834   4                                          &data->notificationParams.unsignedRange.
 835   4                                          exceededLimit))) {
 836   5                                  return -1;
 837   5                              }
 838   4                              len += section_length;
 839   4                              break;
 840   4      
 841   4                          default:
 842   4                              return -1;
 843   4                      }
 844   3                      if (decode_is_closing_tag_number(&apdu[len],
 845   3                              (uint8_t) data->eventType)) {
 846   4                          len++;
 847   4                      } else {
 848   4                          return -1;
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 15  

 849   4                      }
 850   3                      if (decode_is_closing_tag_number(&apdu[len], 12)) {
 851   4                          len++;
 852   4                      } else {
 853   4                          return -1;
 854   4                      }
 855   3                      break;
 856   3                      /* In cases other than alarm and event
 857   3                         there's no data, so do not return an error
 858   3                         but continue normally */
 859   3                  case NOTIFY_ACK_NOTIFICATION:
 860   3                  default:
 861   3                      break;
 862   3              }
 863   2          }
 864   1      
 865   1          return len;
 866   1      }
 867          
 868          #ifdef  TEST
              
              #include <assert.h>
              #include <string.h>
              #include "ctest.h"
              
              
              BACNET_EVENT_NOTIFICATION_DATA data;
              BACNET_EVENT_NOTIFICATION_DATA data2;
              
              void testBaseEventState(
                  Test * pTest)
              {
                  ct_test(pTest, data.processIdentifier == data2.processIdentifier);
                  ct_test(pTest,
                      data.initiatingObjectIdentifier.instance ==
                      data2.initiatingObjectIdentifier.instance);
                  ct_test(pTest,
                      data.initiatingObjectIdentifier.type ==
                      data2.initiatingObjectIdentifier.type);
                  ct_test(pTest,
                      data.eventObjectIdentifier.instance ==
                      data2.eventObjectIdentifier.instance);
                  ct_test(pTest,
                      data.eventObjectIdentifier.type == data2.eventObjectIdentifier.type);
                  ct_test(pTest, data.notificationClass == data2.notificationClass);
                  ct_test(pTest, data.priority == data2.priority);
                  ct_test(pTest, data.notifyType == data2.notifyType);
                  ct_test(pTest, data.fromState == data2.fromState);
                  ct_test(pTest, data.toState == data2.toState);
                  ct_test(pTest, data.toState == data2.toState);
              
                  if (data.messageText != NULL && data2.messageText != NULL) {
                      ct_test(pTest,
                          data.messageText->encoding == data2.messageText->encoding);
                      ct_test(pTest, data.messageText->length == data2.messageText->length);
                      ct_test(pTest, strcmp(data.messageText->value,
                              data2.messageText->value) == 0);
                  }
              
                  ct_test(pTest, data.timeStamp.tag == data2.timeStamp.tag);
              
                  switch (data.timeStamp.tag) {
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 16  

                      case TIME_STAMP_SEQUENCE:
                          ct_test(pTest,
                              data.timeStamp.value.sequenceNum ==
                              data2.timeStamp.value.sequenceNum);
                          break;
              
                      case TIME_STAMP_DATETIME:
                          ct_test(pTest,
                              data.timeStamp.value.dateTime.time.hour ==
                              data2.timeStamp.value.dateTime.time.hour);
                          ct_test(pTest,
                              data.timeStamp.value.dateTime.time.min ==
                              data2.timeStamp.value.dateTime.time.min);
                          ct_test(pTest,
                              data.timeStamp.value.dateTime.time.sec ==
                              data2.timeStamp.value.dateTime.time.sec);
                          ct_test(pTest,
                              data.timeStamp.value.dateTime.time.hundredths ==
                              data2.timeStamp.value.dateTime.time.hundredths);
              
                          ct_test(pTest,
                              data.timeStamp.value.dateTime.date.day ==
                              data2.timeStamp.value.dateTime.date.day);
                          ct_test(pTest,
                              data.timeStamp.value.dateTime.date.month ==
                              data2.timeStamp.value.dateTime.date.month);
                          ct_test(pTest,
                              data.timeStamp.value.dateTime.date.wday ==
                              data2.timeStamp.value.dateTime.date.wday);
                          ct_test(pTest,
                              data.timeStamp.value.dateTime.date.year ==
                              data2.timeStamp.value.dateTime.date.year);
                          break;
              
                      case TIME_STAMP_TIME:
                          ct_test(pTest,
                              data.timeStamp.value.time.hour ==
                              data2.timeStamp.value.time.hour);
                          ct_test(pTest,
                              data.timeStamp.value.time.min ==
                              data2.timeStamp.value.time.min);
                          ct_test(pTest,
                              data.timeStamp.value.time.sec ==
                              data2.timeStamp.value.time.sec);
                          ct_test(pTest,
                              data.timeStamp.value.time.hundredths ==
                              data2.timeStamp.value.time.hundredths);
                          break;
              
                      default:
                          ct_fail(pTest, "Unknown type");
                          break;
                  }
              }
              
              void testEventEventState(
                  Test * pTest)
              {
                  uint8_t buffer[MAX_APDU];
                  int inLen;
                  int outLen;
                  BACNET_CHARACTER_STRING messageText;
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 17  

                  BACNET_CHARACTER_STRING messageText2;
                  characterstring_init_ansi(&messageText,
                      "This is a test of the message text\n");
              
                  data.messageText = &messageText;
                  data2.messageText = &messageText2;
              
                  data.processIdentifier = 1234;
                  data.initiatingObjectIdentifier.type = OBJECT_ANALOG_INPUT;
                  data.initiatingObjectIdentifier.instance = 100;
                  data.eventObjectIdentifier.type = OBJECT_ANALOG_INPUT;
                  data.eventObjectIdentifier.instance = 200;
                  data.timeStamp.value.sequenceNum = 1234;
                  data.timeStamp.tag = TIME_STAMP_SEQUENCE;
                  data.notificationClass = 50;
                  data.priority = 50;
                  data.notifyType = NOTIFY_ALARM;
                  data.fromState = EVENT_STATE_NORMAL;
                  data.toState = EVENT_STATE_OFFNORMAL;
              
                  data.eventType = EVENT_CHANGE_OF_STATE;
                  data.notificationParams.changeOfState.newState.tag = UNITS;
                  data.notificationParams.changeOfState.newState.state.units =
                      UNITS_SQUARE_METERS;
              
                  bitstring_init(&data.notificationParams.changeOfState.statusFlags);
                  bitstring_set_bit(&data.notificationParams.changeOfState.statusFlags,
                      STATUS_FLAG_IN_ALARM, true);
                  bitstring_set_bit(&data.notificationParams.changeOfState.statusFlags,
                      STATUS_FLAG_FAULT, false);
                  bitstring_set_bit(&data.notificationParams.changeOfState.statusFlags,
                      STATUS_FLAG_OVERRIDDEN, false);
                  bitstring_set_bit(&data.notificationParams.changeOfState.statusFlags,
                      STATUS_FLAG_OUT_OF_SERVICE, false);
              
              
                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
              
                  ct_test(pTest,
                      data.notificationParams.changeOfState.newState.tag ==
                      data2.notificationParams.changeOfState.newState.tag);
                  ct_test(pTest,
                      data.notificationParams.changeOfState.newState.state.units ==
                      data2.notificationParams.changeOfState.newState.state.units);
              
                  ct_test(pTest,
                      bitstring_same(&data.notificationParams.changeOfState.statusFlags,
                          &data2.notificationParams.changeOfState.statusFlags));
              
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
              
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 18  

                  /*
                   ** Same, but timestamp of
                   */
                  data.timeStamp.tag = TIME_STAMP_DATETIME;
                  data.timeStamp.value.dateTime.time.hour = 1;
                  data.timeStamp.value.dateTime.time.min = 2;
                  data.timeStamp.value.dateTime.time.sec = 3;
                  data.timeStamp.value.dateTime.time.hundredths = 4;
              
                  data.timeStamp.value.dateTime.date.day = 1;
                  data.timeStamp.value.dateTime.date.month = 1;
                  data.timeStamp.value.dateTime.date.wday = 1;
                  data.timeStamp.value.dateTime.date.year = 1945;
              
                  memset(buffer, 0, MAX_APDU);
                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  memset(&data2, 0, sizeof(data2));
                  data2.messageText = &messageText2;
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
                  ct_test(pTest,
                      data.notificationParams.changeOfState.newState.tag ==
                      data2.notificationParams.changeOfState.newState.tag);
                  ct_test(pTest,
                      data.notificationParams.changeOfState.newState.state.units ==
                      data2.notificationParams.changeOfState.newState.state.units);
              
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
              
                  /*
                   ** Event Type = EVENT_CHANGE_OF_BITSTRING
                   */
                  data.timeStamp.value.sequenceNum = 1234;
                  data.timeStamp.tag = TIME_STAMP_SEQUENCE;
              
                  data.eventType = EVENT_CHANGE_OF_BITSTRING;
              
                  bitstring_init(&data.notificationParams.changeOfBitstring.
                      referencedBitString);
                  bitstring_set_bit(&data.notificationParams.changeOfBitstring.
                      referencedBitString, 0, true);
                  bitstring_set_bit(&data.notificationParams.changeOfBitstring.
                      referencedBitString, 1, false);
                  bitstring_set_bit(&data.notificationParams.changeOfBitstring.
                      referencedBitString, 2, true);
                  bitstring_set_bit(&data.notificationParams.changeOfBitstring.
                      referencedBitString, 2, false);
              
                  bitstring_init(&data.notificationParams.changeOfBitstring.statusFlags);
              
                  bitstring_set_bit(&data.notificationParams.changeOfBitstring.statusFlags,
                      STATUS_FLAG_IN_ALARM, true);
                  bitstring_set_bit(&data.notificationParams.changeOfBitstring.statusFlags,
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 19  

                      STATUS_FLAG_FAULT, false);
                  bitstring_set_bit(&data.notificationParams.changeOfBitstring.statusFlags,
                      STATUS_FLAG_OVERRIDDEN, false);
                  bitstring_set_bit(&data.notificationParams.changeOfBitstring.statusFlags,
                      STATUS_FLAG_OUT_OF_SERVICE, false);
              
                  memset(buffer, 0, MAX_APDU);
                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  memset(&data2, 0, sizeof(data2));
                  data2.messageText = &messageText2;
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
              
                  ct_test(pTest,
                      bitstring_same(&data.notificationParams.
                          changeOfBitstring.referencedBitString,
                          &data2.notificationParams.changeOfBitstring.referencedBitString));
              
                  ct_test(pTest,
                      bitstring_same(&data.notificationParams.changeOfBitstring.statusFlags,
                          &data2.notificationParams.changeOfBitstring.statusFlags));
              
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                  /*
                   ** Event Type = EVENT_CHANGE_OF_VALUE - float value
                   */
              
                  data.eventType = EVENT_CHANGE_OF_VALUE;
                  data.notificationParams.changeOfValue.tag = CHANGE_OF_VALUE_REAL;
                  data.notificationParams.changeOfValue.newValue.changeValue = 1.23f;
              
                  bitstring_init(&data.notificationParams.changeOfValue.statusFlags);
              
                  bitstring_set_bit(&data.notificationParams.changeOfValue.statusFlags,
                      STATUS_FLAG_IN_ALARM, true);
                  bitstring_set_bit(&data.notificationParams.changeOfValue.statusFlags,
                      STATUS_FLAG_FAULT, false);
                  bitstring_set_bit(&data.notificationParams.changeOfValue.statusFlags,
                      STATUS_FLAG_OVERRIDDEN, false);
                  bitstring_set_bit(&data.notificationParams.changeOfValue.statusFlags,
                      STATUS_FLAG_OUT_OF_SERVICE, false);
              
                  memset(buffer, 0, MAX_APDU);
                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  memset(&data2, 0, sizeof(data2));
                  data2.messageText = &messageText2;
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
              
                  ct_test(pTest,
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 20  

                      bitstring_same(&data.notificationParams.changeOfValue.statusFlags,
                          &data2.notificationParams.changeOfValue.statusFlags));
              
                  ct_test(pTest,
                      data.notificationParams.changeOfValue.tag ==
                      data2.notificationParams.changeOfValue.tag);
              
                  ct_test(pTest,
                      data.notificationParams.changeOfValue.newValue.changeValue ==
                      data2.notificationParams.changeOfValue.newValue.changeValue);
              
              
              
                  /*
                   ** Event Type = EVENT_CHANGE_OF_VALUE - bitstring value
                   */
              
                  data.notificationParams.changeOfValue.tag = CHANGE_OF_VALUE_BITS;
              
                  bitstring_init(&data.notificationParams.changeOfValue.newValue.
                      changedBits);
                  bitstring_set_bit(&data.notificationParams.changeOfValue.newValue.
                      changedBits, 0, true);
                  bitstring_set_bit(&data.notificationParams.changeOfValue.newValue.
                      changedBits, 1, false);
                  bitstring_set_bit(&data.notificationParams.changeOfValue.newValue.
                      changedBits, 2, false);
                  bitstring_set_bit(&data.notificationParams.changeOfValue.newValue.
                      changedBits, 3, false);
              
                  memset(buffer, 0, MAX_APDU);
                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  memset(&data2, 0, sizeof(data2));
                  data2.messageText = &messageText2;
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
              
                  ct_test(pTest,
                      bitstring_same(&data.notificationParams.changeOfValue.statusFlags,
                          &data2.notificationParams.changeOfValue.statusFlags));
              
                  ct_test(pTest,
                      data.notificationParams.changeOfValue.tag ==
                      data2.notificationParams.changeOfValue.tag);
              
                  ct_test(pTest,
                      bitstring_same(&data.notificationParams.changeOfValue.
                          newValue.changedBits,
                          &data2.notificationParams.changeOfValue.newValue.changedBits));
              
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                  /*
                   ** Event Type = EVENT_FLOATING_LIMIT
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 21  

                   */
                  data.eventType = EVENT_FLOATING_LIMIT;
                  data.notificationParams.floatingLimit.referenceValue = 1.23f;
                  data.notificationParams.floatingLimit.setPointValue = 2.34f;
                  data.notificationParams.floatingLimit.errorLimit = 3.45f;
              
                  bitstring_init(&data.notificationParams.floatingLimit.statusFlags);
              
                  bitstring_set_bit(&data.notificationParams.floatingLimit.statusFlags,
                      STATUS_FLAG_IN_ALARM, true);
                  bitstring_set_bit(&data.notificationParams.floatingLimit.statusFlags,
                      STATUS_FLAG_FAULT, false);
                  bitstring_set_bit(&data.notificationParams.floatingLimit.statusFlags,
                      STATUS_FLAG_OVERRIDDEN, false);
                  bitstring_set_bit(&data.notificationParams.floatingLimit.statusFlags,
                      STATUS_FLAG_OUT_OF_SERVICE, false);
              
                  memset(buffer, 0, MAX_APDU);
                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  memset(&data2, 0, sizeof(data2));
                  data2.messageText = &messageText2;
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
              
                  ct_test(pTest,
                      data.notificationParams.floatingLimit.referenceValue ==
                      data2.notificationParams.floatingLimit.referenceValue);
              
                  ct_test(pTest,
                      data.notificationParams.floatingLimit.setPointValue ==
                      data2.notificationParams.floatingLimit.setPointValue);
              
                  ct_test(pTest,
                      data.notificationParams.floatingLimit.errorLimit ==
                      data2.notificationParams.floatingLimit.errorLimit);
                  ct_test(pTest,
                      bitstring_same(&data.notificationParams.floatingLimit.statusFlags,
                          &data2.notificationParams.floatingLimit.statusFlags));
              
              
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                  /*
                   ** Event Type = EVENT_OUT_OF_RANGE
                   */
                  data.eventType = EVENT_OUT_OF_RANGE;
                  data.notificationParams.outOfRange.exceedingValue = 3.45f;
                  data.notificationParams.outOfRange.deadband = 2.34f;
                  data.notificationParams.outOfRange.exceededLimit = 1.23f;
              
                  bitstring_init(&data.notificationParams.outOfRange.statusFlags);
              
                  bitstring_set_bit(&data.notificationParams.outOfRange.statusFlags,
                      STATUS_FLAG_IN_ALARM, true);
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 22  

                  bitstring_set_bit(&data.notificationParams.outOfRange.statusFlags,
                      STATUS_FLAG_FAULT, false);
                  bitstring_set_bit(&data.notificationParams.outOfRange.statusFlags,
                      STATUS_FLAG_OVERRIDDEN, false);
                  bitstring_set_bit(&data.notificationParams.outOfRange.statusFlags,
                      STATUS_FLAG_OUT_OF_SERVICE, false);
              
                  memset(buffer, 0, MAX_APDU);
                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  memset(&data2, 0, sizeof(data2));
                  data2.messageText = &messageText2;
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
              
                  ct_test(pTest,
                      data.notificationParams.outOfRange.deadband ==
                      data2.notificationParams.outOfRange.deadband);
              
                  ct_test(pTest,
                      data.notificationParams.outOfRange.exceededLimit ==
                      data2.notificationParams.outOfRange.exceededLimit);
              
                  ct_test(pTest,
                      data.notificationParams.outOfRange.exceedingValue ==
                      data2.notificationParams.outOfRange.exceedingValue);
                  ct_test(pTest,
                      bitstring_same(&data.notificationParams.outOfRange.statusFlags,
                          &data2.notificationParams.outOfRange.statusFlags));
              
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                  /*
                   ** Event Type = EVENT_CHANGE_OF_LIFE_SAFETY
                   */
                  data.eventType = EVENT_CHANGE_OF_LIFE_SAFETY;
                  data.notificationParams.changeOfLifeSafety.newState =
                      LIFE_SAFETY_STATE_ALARM;
                  data.notificationParams.changeOfLifeSafety.newMode =
                      LIFE_SAFETY_MODE_ARMED;
                  data.notificationParams.changeOfLifeSafety.operationExpected =
                      LIFE_SAFETY_OP_RESET;
              
                  bitstring_init(&data.notificationParams.changeOfLifeSafety.statusFlags);
              
                  bitstring_set_bit(&data.notificationParams.changeOfLifeSafety.statusFlags,
                      STATUS_FLAG_IN_ALARM, true);
                  bitstring_set_bit(&data.notificationParams.changeOfLifeSafety.statusFlags,
                      STATUS_FLAG_FAULT, false);
                  bitstring_set_bit(&data.notificationParams.changeOfLifeSafety.statusFlags,
                      STATUS_FLAG_OVERRIDDEN, false);
                  bitstring_set_bit(&data.notificationParams.changeOfLifeSafety.statusFlags,
                      STATUS_FLAG_OUT_OF_SERVICE, false);
              
                  memset(buffer, 0, MAX_APDU);
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 23  

                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  memset(&data2, 0, sizeof(data2));
                  data2.messageText = &messageText2;
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
              
                  ct_test(pTest,
                      data.notificationParams.changeOfLifeSafety.newMode ==
                      data2.notificationParams.changeOfLifeSafety.newMode);
              
                  ct_test(pTest,
                      data.notificationParams.changeOfLifeSafety.newState ==
                      data2.notificationParams.changeOfLifeSafety.newState);
              
                  ct_test(pTest,
                      data.notificationParams.changeOfLifeSafety.operationExpected ==
                      data2.notificationParams.changeOfLifeSafety.operationExpected);
              
                  ct_test(pTest,
                      bitstring_same(&data.notificationParams.changeOfLifeSafety.statusFlags,
                          &data2.notificationParams.changeOfLifeSafety.statusFlags));
              
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                  /*
                   ** Event Type = EVENT_UNSIGNED_RANGE
                   */
                  data.eventType = EVENT_UNSIGNED_RANGE;
                  data.notificationParams.unsignedRange.exceedingValue = 1234;
                  data.notificationParams.unsignedRange.exceededLimit = 2345;
              
                  bitstring_init(&data.notificationParams.unsignedRange.statusFlags);
              
                  bitstring_set_bit(&data.notificationParams.unsignedRange.statusFlags,
                      STATUS_FLAG_IN_ALARM, true);
                  bitstring_set_bit(&data.notificationParams.unsignedRange.statusFlags,
                      STATUS_FLAG_FAULT, false);
                  bitstring_set_bit(&data.notificationParams.unsignedRange.statusFlags,
                      STATUS_FLAG_OVERRIDDEN, false);
                  bitstring_set_bit(&data.notificationParams.unsignedRange.statusFlags,
                      STATUS_FLAG_OUT_OF_SERVICE, false);
              
                  memset(buffer, 0, MAX_APDU);
                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  memset(&data2, 0, sizeof(data2));
                  data2.messageText = &messageText2;
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
              
                  ct_test(pTest,
                      data.notificationParams.unsignedRange.exceedingValue ==
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 24  

                      data2.notificationParams.unsignedRange.exceedingValue);
              
                  ct_test(pTest,
                      data.notificationParams.unsignedRange.exceededLimit ==
                      data2.notificationParams.unsignedRange.exceededLimit);
              
                  ct_test(pTest,
                      bitstring_same(&data.notificationParams.unsignedRange.statusFlags,
                          &data2.notificationParams.unsignedRange.statusFlags));
              
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                      /**********************************************************************************/
                  /*
                   ** Event Type = EVENT_BUFFER_READY
                   */
                  data.eventType = EVENT_BUFFER_READY;
                  data.notificationParams.bufferReady.previousNotification = 1234;
                  data.notificationParams.bufferReady.currentNotification = 2345;
                  data.notificationParams.bufferReady.bufferProperty.deviceIndentifier.type =
                      OBJECT_DEVICE;
                  data.notificationParams.bufferReady.bufferProperty.deviceIndentifier.
                      instance = 500;
                  data.notificationParams.bufferReady.bufferProperty.objectIdentifier.type =
                      OBJECT_ANALOG_INPUT;
                  data.notificationParams.bufferReady.bufferProperty.objectIdentifier.
                      instance = 100;
                  data.notificationParams.bufferReady.bufferProperty.propertyIdentifier =
                      PROP_PRESENT_VALUE;
                  data.notificationParams.bufferReady.bufferProperty.arrayIndex = 0;
              
                  memset(buffer, 0, MAX_APDU);
                  inLen = event_notify_encode_service_request(&buffer[0], &data);
              
                  memset(&data2, 0, sizeof(data2));
                  data2.messageText = &messageText2;
                  outLen = event_notify_decode_service_request(&buffer[0], inLen, &data2);
              
                  ct_test(pTest, inLen == outLen);
                  testBaseEventState(pTest);
              
                  ct_test(pTest,
                      data.notificationParams.bufferReady.previousNotification ==
                      data2.notificationParams.bufferReady.previousNotification);
              
                  ct_test(pTest,
                      data.notificationParams.bufferReady.currentNotification ==
                      data2.notificationParams.bufferReady.currentNotification);
              
              
                  ct_test(pTest,
                      data.notificationParams.bufferReady.bufferProperty.deviceIndentifier.
                      type ==
                      data2.notificationParams.bufferReady.bufferProperty.deviceIndentifier.
                      type);
              
                  ct_test(pTest,
                      data.notificationParams.bufferReady.bufferProperty.deviceIndentifier.
C51 COMPILER V9.06   EVENT                                                                 01/29/2013 10:15:24 PAGE 25  

                      instance ==
                      data2.notificationParams.bufferReady.bufferProperty.deviceIndentifier.
                      instance);
              
                  ct_test(pTest,
                      data.notificationParams.bufferReady.bufferProperty.objectIdentifier.
                      instance ==
                      data2.notificationParams.bufferReady.bufferProperty.objectIdentifier.
                      instance);
              
                  ct_test(pTest,
                      data.notificationParams.bufferReady.bufferProperty.objectIdentifier.
                      type ==
                      data2.notificationParams.bufferReady.bufferProperty.objectIdentifier.
                      type);
              
                  ct_test(pTest,
                      data.notificationParams.bufferReady.bufferProperty.
                      propertyIdentifier ==
                      data2.notificationParams.bufferReady.bufferProperty.
                      propertyIdentifier);
              
                  ct_test(pTest,
                      data.notificationParams.bufferReady.bufferProperty.arrayIndex ==
                      data2.notificationParams.bufferReady.bufferProperty.arrayIndex);
              }
              
              #ifdef TEST_EVENT
              
              int main(
                  void)
              {
                  Test *pTest;
                  bool rc;
              
                  pTest = ct_create("BACnet Event", NULL);
                  /* individual tests */
                  rc = ct_addTestFunction(pTest, testEventEventState);
                  assert(rc);
              
                  ct_setStream(pTest, stdout);
                  ct_run(pTest);
                  (void) ct_report(pTest);
                  ct_destroy(pTest);
              
                  return 0;
              }
              
              #endif /* TEST_EVENT */
              #endif /* TEST */

C51 COMPILATION COMPLETE.  0 WARNING(S),  6 ERROR(S)

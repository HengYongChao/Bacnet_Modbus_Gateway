C51 COMPILER V9.06   INDTEXT                                                               03/13/2013 09:32:32 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE INDTEXT
OBJECT MODULE PLACED IN .\indtext.obj
COMPILER INVOKED BY: d:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\bacnet\indtext.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020
                    -) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\
                    -;..\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC
                    -\buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;
                    -..\Src\FreeRTOSSource\include\;..\Src\schedule\) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\indtext.lst) OBJECT(.\ind
                    -text.obj)

line level    source

   1          /*####COPYRIGHTBEGIN####
   2           -------------------------------------------
   3           Copyright (C) 2005 Steve Karg
   4          
   5           This program is free software; you can redistribute it and/or
   6           modify it under the terms of the GNU General Public License
   7           as published by the Free Software Foundation; either version 2
   8           of the License, or (at your option) any later version.
   9          
  10           This program is distributed in the hope that it will be useful,
  11           but WITHOUT ANY WARRANTY; without even the implied warranty of
  12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13           GNU General Public License for more details.
  14          
  15           You should have received a copy of the GNU General Public License
  16           along with this program; if not, write to 
  17           The Free Software Foundation, Inc.
  18           59 Temple Place - Suite 330 
  19           Boston, MA  02111-1307, USA.
  20          
  21           As a special exception, if other files instantiate templates or
  22           use macros or inline functions from this file, or you compile
  23           this file and link it with other works to produce a work based
  24           on this file, this file does not by itself cause the resulting
  25           work to be covered by the GNU General Public License. However
  26           the source code for this file must still be made available in
  27           accordance with section (3) of the GNU General Public License.
  28          
  29           This exception does not invalidate any other reasons why a work
  30           based on this file might be covered by the GNU General Public
  31           License.
  32           -------------------------------------------
  33          ####COPYRIGHTEND####*/
  34          #include <stdbool.h>
  35          #include <string.h>
  36          #include "../include/indtext.h"
  37          
  38          /** @file indtext.c  Maps text strings and indices of type INDTEXT_DATA */
  39          
  40          #if !defined(__BORLANDC__) && !defined(_MSC_VER)
  41          #include <ctype.h>
  42          int stricmp(
  43              const char *s1,
  44              const char *s2)
  45          {
  46   1          unsigned char c1, c2;
  47   1      
  48   1          do {
  49   2              c1 = (unsigned char) *s1;
  50   2              c2 = (unsigned char) *s2;
C51 COMPILER V9.06   INDTEXT                                                               03/13/2013 09:32:32 PAGE 2   

  51   2              c1 = (unsigned char) tolower(c1);
  52   2              c2 = (unsigned char) tolower(c2);
  53   2              s1++;
  54   2              s2++;
  55   2          } while ((c1 == c2) && (c1 != '\0'));
  56   1      
  57   1          return (int) c1 - c2;
  58   1      }
  59          #endif
  60          
  61          bool indtext_by_string(
  62              INDTEXT_DATA * data_list,
  63              const char *search_name,
  64              unsigned *found_index)
  65          {
  66   1          bool found = false;
  67   1          unsigned index = 0;
  68   1      
  69   1          if (data_list && search_name) {
  70   2              while (data_list->pString) {
  71   3                  if (strcmp(data_list->pString, search_name) == 0) {
  72   4                      index = data_list->index;
  73   4                      found = true;
  74   4                      break;
  75   4                  }
  76   3                  data_list++;
  77   3              }
  78   2          }
  79   1      
  80   1          if (found && found_index)
  81   1              *found_index = index;
  82   1      
  83   1          return found;
  84   1      }
  85          
  86          /* case insensitive version */
  87          bool indtext_by_istring(
  88              INDTEXT_DATA * data_list,
  89              const char *search_name,
  90              unsigned *found_index)
  91          {
  92   1          bool found = false;
  93   1          unsigned index = 0;
  94   1      
  95   1          if (data_list && search_name) {
  96   2              while (data_list->pString) {
  97   3                  if (stricmp(data_list->pString, search_name) == 0) {
  98   4                      index = data_list->index;
  99   4                      found = true;
 100   4                      break;
 101   4                  }
 102   3                  data_list++;
 103   3              }
 104   2          }
 105   1      
 106   1          if (found && found_index)
 107   1              *found_index = index;
 108   1      
 109   1          return found;
 110   1      }
 111          
 112          unsigned indtext_by_string_default(
C51 COMPILER V9.06   INDTEXT                                                               03/13/2013 09:32:32 PAGE 3   

 113              INDTEXT_DATA * data_list,
 114              const char *search_name,
 115              unsigned default_index)
 116          {
 117   1          unsigned index = 0;
 118   1      
 119   1          if (!indtext_by_string(data_list, search_name, &index))
 120   1              index = default_index;
 121   1      
 122   1          return index;
 123   1      }
 124          
 125          unsigned indtext_by_istring_default(
 126              INDTEXT_DATA * data_list,
 127              const char *search_name,
 128              unsigned default_index)
 129          {
 130   1          unsigned index = 0;
 131   1      
 132   1          if (!indtext_by_istring(data_list, search_name, &index))
 133   1              index = default_index;
 134   1      
 135   1          return index;
 136   1      }
 137          
 138          const char *indtext_by_index_default(
 139              INDTEXT_DATA * data_list,
 140              unsigned index,
 141              const char *default_string)
 142          {
 143   1          const char *pString = NULL;
 144   1      
 145   1          if (data_list) {
 146   2              while (data_list->pString) {
 147   3                  if (data_list->index == index) {
 148   4                      pString = data_list->pString;
 149   4                      break;
 150   4                  }
 151   3                  data_list++;
 152   3              }
 153   2          }
 154   1      
 155   1          return pString ? pString : default_string;
 156   1      }
 157          
 158          const char *indtext_by_index_split_default(
 159              INDTEXT_DATA * data_list,
 160              unsigned index,
 161              unsigned split_index,
 162              const char *before_split_default_name,
 163              const char *default_name)
 164          {
 165   1          if (index < split_index)
 166   1              return indtext_by_index_default(data_list, index,
 167   1                  before_split_default_name);
 168   1          else
 169   1              return indtext_by_index_default(data_list, index, default_name);
 170   1      }
 171          
 172          
 173          const char *indtext_by_index(
 174              INDTEXT_DATA * data_list,
C51 COMPILER V9.06   INDTEXT                                                               03/13/2013 09:32:32 PAGE 4   

 175              unsigned index)
 176          {
 177   1          return indtext_by_index_default(data_list, index, NULL);
 178   1      }
 179          
 180          unsigned indtext_count(
 181              INDTEXT_DATA * data_list)
 182          {
 183   1          unsigned count = 0; /* return value */
 184   1      
 185   1          if (data_list) {
 186   2              while (data_list->pString) {
 187   3                  count++;
 188   3                  data_list++;
 189   3              }
 190   2          }
 191   1          return count;
 192   1      }
 193          
 194          #ifdef TEST
              #include <assert.h>
              #include "ctest.h"
              
              static INDTEXT_DATA data_list[] = {
                  {1, "Joshua"},
                  {2, "Mary"},
                  {3, "Anna"},
                  {4, "Christopher"},
                  {5, "Patricia"},
                  {0, NULL}
              };
              
              void testIndexText(
                  Test * pTest)
              {
                  unsigned i; /*counter */
                  const char *pString;
                  unsigned index;
                  bool valid;
                  unsigned count = 0;
              
                  for (i = 0; i < 10; i++) {
                      pString = indtext_by_index(data_list, i);
                      if (pString) {
                          count++;
                          valid = indtext_by_string(data_list, pString, &index);
                          ct_test(pTest, valid == true);
                          ct_test(pTest, index == i);
                          ct_test(pTest, index == indtext_by_string_default(data_list,
                                  pString, index));
                      }
                  }
                  ct_test(pTest, indtext_count(data_list) == count);
                  ct_test(pTest, indtext_by_string(data_list, "Harry", NULL) == false);
                  ct_test(pTest, indtext_by_string(data_list, NULL, NULL) == false);
                  ct_test(pTest, indtext_by_string(NULL, NULL, NULL) == false);
                  ct_test(pTest, indtext_by_index(data_list, 0) == NULL);
                  ct_test(pTest, indtext_by_index(data_list, 10) == NULL);
                  ct_test(pTest, indtext_by_index(NULL, 10) == NULL);
                  /* case insensitive versions */
                  ct_test(pTest, indtext_by_istring(data_list, "JOSHUA", NULL) == true);
                  ct_test(pTest, indtext_by_istring(data_list, "joshua", NULL) == true);
C51 COMPILER V9.06   INDTEXT                                                               03/13/2013 09:32:32 PAGE 5   

                  valid = indtext_by_istring(data_list, "ANNA", &index);
                  ct_test(pTest, index == indtext_by_istring_default(data_list, "ANNA",
                          index));
              }
              #endif
 242          
 243          #ifdef TEST_INDEX_TEXT
              int main(
                  void)
              {
                  Test *pTest;
                  bool rc;
              
                  pTest = ct_create("index text", NULL);
              
                  /* individual tests */
                  rc = ct_addTestFunction(pTest, testIndexText);
                  assert(rc);
              
                  ct_setStream(pTest, stdout);
                  ct_run(pTest);
                  (void) ct_report(pTest);
              
                  ct_destroy(pTest);
              
                  return 0;
              }
              #endif /* TEST_INDEX_TEXT */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1100    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      81
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

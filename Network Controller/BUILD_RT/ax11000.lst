C51 COMPILER V9.06   AX11000                                                               05/28/2013 10:15:27 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE AX11000
OBJECT MODULE PLACED IN .\ax11000.obj
COMPILER INVOKED BY: E:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\cpu\ax11000.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) I
                    -NCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;..
                    -\SRC\debug\;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\SRC\flash\;..\SRC\bu
                    -ffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v100;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..\
                    -Src\FreeRTOSSource\include\;..\Src\schedule\;..\src\bacnet;..\src\include;..\src\LCD;..\src\version;..\src\modbusTCP;..\
                    -src\gs2e;..\src\adpter1;..\src\scan;..\src\gsm;..\src\dyndns) DEFINE(KEIL_AX11000) VARBANKING DEBUG PRINT(.\ax11000.lst)
                    - OBJECT(.\ax11000.obj)

line level    source

   1          /*
   2           *********************************************************************************
   3           *     Copyright (c) 2005   ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           *********************************************************************************
  10           */
  11          /*================================================================================
  12           * Module Name : ax11000.c
  13           * Purpose     : AX11000 initialization and globe values setting.
  14           * Author      : Robin Lee
  15           * Date        : 2005-12-27
  16           * Notes       : In the initial function, all external interrupt are disable in
  17           *               default. User must enable a specific interrupt in its module.
  18           *               Several system values are initial in beginning
  19           * $Log: ax11000.c,v $
  20           * Revision 1.3  2006/07/20 03:50:52  robin6633
  21           * 1.Change the header file name "reg80390.h" to "ax110xx.h".
  22           *
  23           * Revision 1.2  2006/04/20 01:19:06  robin6633
  24           * 1.Added watchdog setting.
  25           * 2.Changed the wait state to fit real chip.
  26           *
  27           * Revision 1.1  2006/04/07 11:36:17  robin6633
  28           * no message
  29           *
  30           *================================================================================
  31           */
  32          
  33          /* INCLUDE FILE DECLARATIONS */
  34          #include        "ax110xx.h"
  35          #include        "types.h"
  36          #include        "interrupt.h"
  37          #include        "ax11000.h"
  38          
  39          
  40          /* STATIC VARIABLE DECLARATIONS */
  41          static U8_T     swResetOn = 0;
  42          static U8_T             globeInt = 0;
  43          static U8_T             cpuSysClk = 0;
  44          static U8_T             memShadow = 0;
  45          static U8_T             progWtst = 0;
  46          static U8_T             dataStretch = 0;
  47          
  48          U32_T   CPU_FREQUENCY;
  49          
C51 COMPILER V9.06   AX11000                                                               05/28/2013 10:15:27 PAGE 2   

  50          /* LOCAL SUBPROGRAM DECLARATIONS */
  51          
  52          
  53          /* LOCAL SUBPROGRAM BODIES */
  54          
  55          
  56          /* EXPORTED SUBPROGRAM BODIES */
  57          
  58          /*
  59           *--------------------------------------------------------------------------------
  60           * void AX11000_Init(void)
  61           * Purpose : Initiation of the AX11000 core.
  62           * Params  : None
  63           * Returns : None
  64           * Note    : None
  65           *--------------------------------------------------------------------------------
  66           */
  67          void AX11000_Init(void)
  68          {
  69   1              EA = 0; // turn off globe interrupt
  70   1      
  71   1              /* Check program wait-state and data memory wait-state */
  72   1              if (CSREPR & PMS)
  73   1              {
  74   2                      memShadow = 1;
  75   2      
  76   2                      /* for real chip */
  77   2                      switch (CSREPR & (BIT6|BIT7))
  78   2                      {
  79   3                              case SCS_100M :
  80   3                                      cpuSysClk = SCS_100M;
  81   3                                      WTST = 0x01;
  82   3                                      CKCON = 0x01;
  83   3                                      break;
  84   3                              case SCS_50M :
  85   3                                      cpuSysClk = SCS_50M;
  86   3                                      WTST = 0x00;
  87   3                                      CKCON = 0x01;
  88   3                                      break;
  89   3                              case SCS_25M :
  90   3                                      cpuSysClk = SCS_25M;
  91   3                                      WTST = 0x00;
  92   3                                      CKCON = 0x01;
  93   3                                      break;
  94   3                      }
  95   2              }
  96   1              else
  97   1              {
  98   2                      memShadow = 0;
  99   2      
 100   2                      /* for real chip */
 101   2                      switch (CSREPR & (BIT6|BIT7))
 102   2                      {
 103   3                              case SCS_100M :
 104   3                                      cpuSysClk = SCS_100M;
 105   3                                      WTST = 0x07;
 106   3                                      CKCON = 0x01;
 107   3                                      break;
 108   3                              case SCS_50M :
 109   3                                      cpuSysClk = SCS_50M;
 110   3                                      WTST = 0x03;
 111   3                                      CKCON = 0x01;
C51 COMPILER V9.06   AX11000                                                               05/28/2013 10:15:27 PAGE 3   

 112   3                                      break;
 113   3                              case SCS_25M :
 114   3                                      cpuSysClk = SCS_25M;
 115   3                                      WTST = 0x01;
 116   3                                      CKCON = 0x01;
 117   3                                      break;
 118   3                      }
 119   2              }
 120   1      
 121   1              if(cpuSysClk == SCS_100M)
 122   1                      CPU_FREQUENCY = 100000000;
 123   1              else if(cpuSysClk == SCS_50M)
 124   1                      CPU_FREQUENCY = 50000000;
 125   1              else if(cpuSysClk == SCS_25M)
 126   1                      CPU_FREQUENCY = 25000000;
 127   1              else
 128   1                      CPU_FREQUENCY = 25000000;
 129   1      
 130   1      
 131   1      
 132   1              progWtst = WTST & 0x07;
 133   1              dataStretch = CKCON & 0x07;
 134   1      
 135   1              PCON    &= ~SWB_;       // Turn off switchback function.
 136   1      
 137   1              EIF             &= ~INT5F;      // Clear the flag of interrupt 5.
 138   1              EIF             &= ~INT6F;      // Clear the flag of interrupt 6.
 139   1              if (WTRF)
 140   1              {
 141   2                      CSREPR |= SW_RBT;
 142   2                      WTRF    = 0;            // Clear Watch Dog Time Out Reset Flag.
 143   2              }
 144   1      
 145   1              if (swResetOn == TRUE)
 146   1              {
 147   2                      I2CDR = BIT4;
 148   2                      I2CCIR = 0x04;
 149   2                      do {
 150   3                              I2CCIR =0x06;
 151   3                              swResetOn = I2CDR;
 152   3                      } while (swResetOn & BIT3);
 153   2      
 154   2                      swResetOn = 0;
 155   2              }
 156   1      
 157   1              PINT2   = 1;            // INT2 priority is at high level for DMA request.
 158   1      
 159   1              EXTINT0(OFF);           // EINT0 interrupt.
 160   1              EXTINT1(OFF);           // EINT1 interrupt.
 161   1              EXTINT2(OFF);           // EINT2 interrupt for DMA request.
 162   1              EXTINT3(OFF);           // EINT3 interrupt for PCA.
 163   1              EXTINT4(ON);            // EINT4 interrupt for peripheral device.
 164   1              EXTINT5(OFF);           // EINT5 interrupt for software timer.
 165   1              EXTINT6(ON);            // EINT6 interrupt for wake-up of power management mode and stop mode.
 166   1      
 167   1              if (globeInt & BIT7)
 168   1                      EA = globeInt & BIT0;
 169   1              else
 170   1                      EA = 1;         // Enable the globe interrupt.
 171   1      }
 172          
 173          /*
C51 COMPILER V9.06   AX11000                                                               05/28/2013 10:15:27 PAGE 4   

 174           *--------------------------------------------------------------------------------
 175           * U8_T AX11000_GetSysClk(void)
 176           * Purpose : Get system clock of AX11000 in initial.
 177           * Params  : None
 178           * Returns : cpuSysClk - system clock of AX11000
 179           * Note    : None
 180           *--------------------------------------------------------------------------------
 181           */
 182          #if GET_SYS_VALUE
 183          U8_T AX11000_GetSysClk(void)
 184          {
 185   1              return cpuSysClk;
 186   1      }
 187          #endif
 188          
 189          /*
 190           *--------------------------------------------------------------------------------
 191           * U8_T AX11000_GetMemSdw(void)
 192           * Purpose : Get system memory shadow setting in initial.
 193           * Params  : None
 194           * Returns : memshadow - memory shadow mode
 195           * Note    : None
 196           *--------------------------------------------------------------------------------
 197           */
 198          #if GET_SYS_VALUE
 199          U8_T AX11000_GetMemSdw(void)
 200          {
 201   1              return memShadow;
 202   1      }
 203          #endif
 204          
 205          /*
 206           *--------------------------------------------------------------------------------
 207           * U8_T AX11000_GetProgWst(void)
 208           * Purpose : Get system program wait state in initial.
 209           * Params  : None
 210           * Returns : progwtst - system program wait state of cpu AX11000
 211           * Note    : None
 212           *--------------------------------------------------------------------------------
 213           */
 214          #if GET_SYS_VALUE
 215          U8_T AX11000_GetProgWst(void)
 216          {
 217   1              return progWtst;
 218   1      }
 219          #endif
 220          
 221          /*
 222           *--------------------------------------------------------------------------------
 223           * U8_T AX11000_GetDataSth(void)
 224           * Purpose : Get system data stretch in initial.
 225           * Params  : None
 226           * Returns : datastretch - data stretch cycle of cpu AX11000
 227           * Note    : None
 228           *--------------------------------------------------------------------------------
 229           */
 230          #if GET_SYS_VALUE
 231          U8_T AX11000_GetDataSth(void)
 232          {
 233   1              return dataStretch;
 234   1      }
 235          #endif
C51 COMPILER V9.06   AX11000                                                               05/28/2013 10:15:27 PAGE 5   

 236          
 237          #if AX_SWRST_ENB
 238          /*
 239           *--------------------------------------------------------------------------------
 240           * void AX11000_SoftReset(void)
 241           * Purpose : Software reset to reset CPU core.
 242           * Params  : None
 243           * Returns : None
 244           * Note    : None
 245           *--------------------------------------------------------------------------------
 246           */
 247          void AX11000_SoftReset(void)
 248          {
 249   1              if (EA)
 250   1                      globeInt = BIT0 | BIT7; // BIT0:EA bit record ; BIT7:Software reset record.
 251   1              else
 252   1                      globeInt = BIT7;
 253   1      
 254   1              EA = 0;
 255   1      
 256   1              swResetOn = TRUE;
 257   1              CSREPR |= SW_RST;
 258   1      }
 259          #endif
 260          
 261          #if AX_SWRBT_ENB
 262          /*
 263           *--------------------------------------------------------------------------------
 264           * void AX11000_SoftReboot(void)
 265           * Purpose : Software reboot to restart hardware core of all.
 266           * Params  : None
 267           * Returns : None
 268           * Note    : None
 269           *--------------------------------------------------------------------------------
 270           */
 271          void AX11000_SoftReboot(void)
 272          {
 273   1              CSREPR |= SW_RBT;
 274   1      }
 275          #endif
 276          
 277          #if AX_WATCHDOG_ENB
 278          /*
 279           *--------------------------------------------------------------------------------
 280           * void AX11000_WatchDogSetting(U8_T wdIntrEnb, U8_T wdRstEnb, U8_T wdPrty, U8_T wdTime)
 281           * Purpose : Enable the Watchdog timer.
 282           * Params  : None
 283           * Returns : None
 284           * Note    : None
 285           *--------------------------------------------------------------------------------
 286           */
 287          void AX11000_WatchDogSetting(U8_T wdIntrEnb, U8_T wdRstEnb, U8_T wdPrty, U8_T wdTime)
 288          {
 289   1              CKCON |= wdTime;
 290   1      
 291   1              if (wdIntrEnb & WD_INTR_ENABLE)
 292   1              {
 293   2                      EWDI = 1;
 294   2              }
 295   1              else
 296   1              {
 297   2                      EWDI = 0;
C51 COMPILER V9.06   AX11000                                                               05/28/2013 10:15:27 PAGE 6   

 298   2              }
 299   1      
 300   1              if (wdRstEnb & WD_RESET_ENABLE)
 301   1              {
 302   2                      TA = 0xAA;
 303   2                      TA = 0x55;
 304   2                      EWT = 1;
 305   2              }
 306   1              else
 307   1              {
 308   2                      TA = 0xAA;
 309   2                      TA = 0x55;
 310   2                      EWT = 0;
 311   2              }
 312   1      
 313   1              if (wdPrty & WD_HIGH_PRIORITY)
 314   1              {
 315   2                      PWDI = 1;
 316   2              }
 317   1              else
 318   1              {
 319   2                      PWDI = 0;
 320   2              }
 321   1              
 322   1              TA = 0xAA;
 323   1              TA = 0x55;
 324   1              RWT = 1;
 325   1              WTRF = 0;
 326   1              WDIF = 0;
 327   1      }
 328          #endif
 329          
 330          
 331          /* End of ax11000.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    384    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

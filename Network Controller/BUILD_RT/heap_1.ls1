AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE     1


MACRO ASSEMBLER AX51 V3.07c
OBJECT MODULE PLACED IN .\heap_1.OBJ
ASSEMBLER INVOKED BY: E:\Keil_4_9.06\C51\BIN\AX51.EXE .\heap_1.src PR(.\heap_1.ls1) EP DEBUG MOD_CONT

LOC    OBJ             LINE     SOURCE

                          1     ; .\heap_1.SRC generated from: ..\src\FreeRtossource\portable\MemMang\heap_1.c
                          2     ; COMPILER INVOKED BY:
                          3     ;        E:\Keil_4_9.06\C51\BIN\C51.EXE ..\src\FreeRtossource\portable\MemMang\heap_1.c 
                               LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X6020) INCDIR(..\SRC\cpu\;..\SRC\ethernet\;..\SRC\
                               swdma\;..\SRC\mstimer\;..\SRC\uart\;..\SRC\main\;..\SRC\tcpip\;..\SRC\hsur\;..\SRC\debug\
                               ;..\SRC\dhcp\;..\SRC\dns\;..\SRC\adapter\;..\SRC\pppoe\;..\SRC\management;..\SRC\i2c\;..\
                               SRC\flash\;..\SRC\buffer\;..\SRC\onewire\;..\SRC\http\;..\SRC\web\;..\SRC\AX110xx_SNTP_v1
                               00;..\Src\FreeRTOSSource\portable\Keil\AX11000\;..\Src\FreeRTOSSource\include\;..\Src\sch
                               edule\;..\src\bacnet;..\src\include;..\src\LCD;..\src\version;..\src\modbusTCP;..\src\gs2
                               e;..\src\adpter1;..\src\scan;..\src\gsm;..\src\dyndns) DEFINE(KEIL_AX11000) VARBANKING DE
                               BUG PRINT(.\heap_1.lst) SRC(.\heap_1.SRC)
                          4     
                          5     $mod_cont 
                          6     $nomod51 
                          7     
                          8     NAME    HEAP_1
                          9     
 0098.3                  10     TB08    BIT     098H.3
 00C0.3                  11     TB18    BIT     0C0H.3
 0080                    12     P0      DATA    080H
 0098.7                  13     SM00    BIT     098H.7
 0090                    14     P1      DATA    090H
 00C0.7                  15     SM10    BIT     0C0H.7
 0098.6                  16     SM01    BIT     098H.6
 00A0                    17     P2      DATA    0A0H
 00C0.6                  18     SM11    BIT     0C0H.6
 0098.5                  19     SM02    BIT     098H.5
 00B0                    20     P3      DATA    0B0H
 00D0.6                  21     AC      BIT     0D0H.6
 00C0.5                  22     SM12    BIT     0C0H.5
 00B0.4                  23     T0      BIT     0B0H.4
 00CF                    24     SPIDR   DATA    0CFH
 00B0.5                  25     T1      BIT     0B0H.5
 00A8.7                  26     EA      BIT     0A8H.7
 00D6                    27     OWCIR   DATA    0D6H
 00C5                    28     CH      DATA    0C5H
 0083                    29     DPH0    DATA    083H
 00A8                    30     IE      DATA    0A8H
 0085                    31     DPH1    DATA    085H
 00C4                    32     CL      DATA    0C4H
 0080.0                  33     P0_0    BIT     080H.0
 0090.0                  34     P1_0    BIT     090H.0
 0080.1                  35     P0_1    BIT     080H.1
 00B9                    36     CCAPH0  DATA    0B9H
 0082                    37     DPL0    DATA    082H
 00A0.0                  38     P2_0    BIT     0A0H.0
 0090.1                  39     P1_1    BIT     090H.1
 0080.2                  40     P0_2    BIT     080H.2
 00BA                    41     CCAPH1  DATA    0BAH
 0084                    42     DPL1    DATA    084H
 00B0.0                  43     P3_0    BIT     0B0H.0
 00A0.1                  44     P2_1    BIT     0A0H.1
 0090.2                  45     P1_2    BIT     090H.2
 0080.3                  46     P0_3    BIT     080H.3
 00E2                    47     UR2_DLH DATA    0E2H
 00BB                    48     CCAPH2  DATA    0BBH
 00A7                    49     XMRHR   DATA    0A7H
 00B0.1                  50     P3_1    BIT     0B0H.1
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE     2

 00A0.2                  51     P2_2    BIT     0A0H.2
 0090.3                  52     P1_3    BIT     090H.3
 0080.4                  53     P0_4    BIT     080H.4
 00BC                    54     CCAPH3  DATA    0BCH
 00B0.2                  55     P3_2    BIT     0B0H.2
 00A0.3                  56     P2_3    BIT     0A0H.3
 0090.4                  57     P1_4    BIT     090H.4
 0080.5                  58     P0_5    BIT     080H.5
 00EB                    59     TA      DATA    0EBH
 00BD                    60     CCAPH4  DATA    0BDH
 00B1                    61     CCAPL0  DATA    0B1H
 00C8.6                  62     EXF2    BIT     0C8H.6
 00B0.7                  63     RD      BIT     0B0H.7
 00B0.3                  64     P3_3    BIT     0B0H.3
 00A0.4                  65     P2_4    BIT     0A0H.4
 0098.4                  66     REN0    BIT     098H.4
 0090.5                  67     P1_5    BIT     090H.5
 0080.6                  68     P0_6    BIT     080H.6
 00E3                    69     UR2_FCR DATA    0E3H
 00D1                    70     CCAPM0  DATA    0D1H
 00C9                    71     T2IF    DATA    0C9H
 00B2                    72     CCAPL1  DATA    0B2H
 00C0.4                  73     REN1    BIT     0C0H.4
 00B0.4                  74     P3_4    BIT     0B0H.4
 00A0.5                  75     P2_5    BIT     0A0H.5
 0090.6                  76     P1_6    BIT     090H.6
 0080.7                  77     P0_7    BIT     080H.7
 00E1                    78     UR2_DLL DATA    0E1H
 00D2                    79     CCAPM1  DATA    0D2H
 00B3                    80     CCAPL2  DATA    0B3H
 00A6                    81     XMRLR   DATA    0A6H
 00B0.5                  82     P3_5    BIT     0B0H.5
 00A0.6                  83     P2_6    BIT     0A0H.6
 0090.7                  84     P1_7    BIT     090H.7
 00D3                    85     CCAPM2  DATA    0D3H
 00B4                    86     CCAPL3  DATA    0B4H
 00A5                    87     XMWHR   DATA    0A5H
 00B0.6                  88     P3_6    BIT     0B0H.6
 00A0.7                  89     P2_7    BIT     0A0H.7
 00D4                    90     CCAPM3  DATA    0D4H
 00B8                    91     IP      DATA    0B8H
 00B5                    92     CCAPL4  DATA    0B5H
 00B0.7                  93     P3_7    BIT     0B0H.7
 00D5                    94     CCAPM4  DATA    0D5H
 009A                    95     DBAR    DATA    09AH
 00E2                    96     UR2_IER DATA    0E2H
 00D0.7                  97     CY      BIT     0D0H.7
 00B0.2                  98     INT0    BIT     0B0H.2
 00E4                    99     UR2_LCR DATA    0E4H
 00A4                   100     XMWLR   DATA    0A4H
 00B0.3                 101     INT1    BIT     0B0H.3
 00E5                   102     UR2_MCR DATA    0E5H
 0093                   103     DPX0    DATA    093H
 0096                   104     I2CCIR  DATA    096H
 0095                   105     DPX1    DATA    095H
 00E3                   106     UR2_IIR DATA    0E3H
 00E1                   107     UR2_RBR DATA    0E1H
 009D                   108     ACON    DATA    09DH
 009B                   109     DCIR    DATA    09BH
 0081                   110     SP      DATA    081H
 00C3                   111     CCON    DATA    0C3H
 00C2                   112     CMOD    DATA    0C2H
 00D0.2                 113     OV      BIT     0D0H.2
 00B0.6                 114     WR      BIT     0B0H.6
 00E1                   115     UR2_THR DATA    0E1H
 00E8.5                 116     EWDI    BIT     0E8H.5
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE     3

 00D8.3                 117     WDIF    BIT     0D8H.3
 00CB                   118     RLDH    DATA    0CBH
 00BE                   119     EPCR    DATA    0BEH
 00AA                   120     LDHR    DATA    0AAH
 00E6                   121     UR2_LSR DATA    0E6H
 00BF                   122     EPDR    DATA    0BFH
 00B6                   123     MCIR    DATA    0B6H
 00C8.5                 124     RCLK    BIT     0C8H.5
 00E7                   125     UR2_MSR DATA    0E7H
 00C8.4                 126     TCLK    BIT     0C8H.4
 00CA                   127     RLDL    DATA    0CAH
 00A9                   128     LDLR    DATA    0A9H
 0087                   129     PCON    DATA    087H
 00DE                   130     CANCIR  DATA    0DEH
 00AE                   131     TCIR    DATA    0AEH
 00F8.5                 132     PWDI    BIT     0F8H.5
 00A2                   133     LSCR    DATA    0A2H
 0089                   134     TMOD    DATA    089H
 0088                   135     TCON    DATA    088H
 00D7                   136     OWDR    DATA    0D7H
 0088.1                 137     IE0     BIT     088H.1
 0088.3                 138     IE1     BIT     088H.3
 00EA                   139     MXAX    DATA    0EAH
 00A1                   140     LMSR    DATA    0A1H
 00F9                   141     MD0     DATA    0F9H
 00F0                   142     B       DATA    0F0H
 00FA                   143     MD1     DATA    0FAH
 00A1                   144     LSAIER  DATA    0A1H
 00FB                   145     MD2     DATA    0FBH
 00D8.2                 146     WTRF    BIT     0D8H.2
 00FC                   147     MD3     DATA    0FCH
 009E                   148     PISSR1  DATA    09EH
 00FD                   149     MD4     DATA    0FDH
 00A3                   150     LSSR    DATA    0A3H
 009F                   151     PISSR2  DATA    09FH
 00FE                   152     MD5     DATA    0FEH
 00E0                   153     ACC     DATA    0E0H
 00A8.4                 154     ES0     BIT     0A8H.4
 00C8.1                 155     CT2     BIT     0C8H.1
 00A8.6                 156     ES1     BIT     0A8H.6
 00A8.1                 157     ET0     BIT     0A8H.1
 00A8.3                 158     ET1     BIT     0A8H.3
 0088.5                 159     TF0     BIT     088H.5
 00A8.5                 160     ET2     BIT     0A8H.5
 0098.0                 161     RI0     BIT     098H.0
 0088.7                 162     TF1     BIT     088H.7
 00C8.7                 163     TF2     BIT     0C8H.7
 00C0.0                 164     RI1     BIT     0C0H.0
 00CE                   165     SPICIR  DATA    0CEH
 008C                   166     TH0     DATA    08CH
 00A8.0                 167     EX0     BIT     0A8H.0
 0098.1                 168     TI0     BIT     098H.1
 0088.0                 169     IT0     BIT     088H.0
 008D                   170     TH1     DATA    08DH
 00C0.1                 171     TI1     BIT     0C0H.1
 00A8.2                 172     EX1     BIT     0A8H.2
 0088.2                 173     IT1     BIT     088H.2
 00CD                   174     TH2     DATA    0CDH
 00D0.0                 175     P       BIT     0D0H.0
 008A                   176     TL0     DATA    08AH
 008F                   177     CSREPR  DATA    08FH
 008B                   178     TL1     DATA    08BH
 00CC                   179     TL2     DATA    0CCH
 00B8.4                 180     PS0     BIT     0B8H.4
 00E8                   181     EIE     DATA    0E8H
 0092                   182     WTST    DATA    092H
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE     4

 00B8.6                 183     PS1     BIT     0B8H.6
 00B8.1                 184     PT0     BIT     0B8H.1
 0091                   185     EIF     DATA    091H
 00D0.3                 186     RS0     BIT     0D0H.3
 00B8.3                 187     PT1     BIT     0B8H.3
 0097                   188     I2CDR   DATA    097H
 00D0.4                 189     RS1     BIT     0D0H.4
 00B8.5                 190     PT2     BIT     0B8H.5
 0088.4                 191     TR0     BIT     088H.4
 0088.6                 192     TR1     BIT     088H.6
 00C8.2                 193     TR2     BIT     0C8H.2
 00B8.0                 194     PX0     BIT     0B8H.0
 00B8.2                 195     PX1     BIT     0B8H.2
 009C                   196     DDR     DATA    09CH
 0083                   197     DPH     DATA    083H
 00F8                   198     EIP     DATA    0F8H
 0082                   199     DPL     DATA    082H
 00A2                   200     LCR     DATA    0A2H
 0099                   201     SBUF0   DATA    099H
 00C1                   202     SBUF1   DATA    0C1H
 00E8.0                 203     EINT2   BIT     0E8H.0
 00C8.3                 204     EXEN2   BIT     0C8H.3
 00B7                   205     MDR     DATA    0B7H
 00E8.1                 206     EINT3   BIT     0E8H.1
 00C8.0                 207     CPRL2   BIT     0C8H.0
 0098                   208     SCON0   DATA    098H
 00E8.2                 209     EINT4   BIT     0E8H.2
 00C0                   210     SCON1   DATA    0C0H
 0094                   211     SDSTSR  DATA    094H
 00E8.3                 212     EINT5   BIT     0E8H.3
 00E9                   213     STATUS  DATA    0E9H
 00E8.4                 214     EINT6   BIT     0E8H.4
 00C8                   215     T2CON   DATA    0C8H
 0086                   216     DPS     DATA    086H
 00DF                   217     CANDR   DATA    0DFH
 00AF                   218     TDR     DATA    0AFH
 00A5                   219     LDAHR   DATA    0A5H
 0093                   220     DPX     DATA    093H
 00AD                   221     DMAHR   DATA    0ADH
 00F8.0                 222     PINT2   BIT     0F8H.0
 00B0.0                 223     RXD     BIT     0B0H.0
 00F8.1                 224     PINT3   BIT     0F8H.1
 008E                   225     CKCON   DATA    08EH
 00F8.2                 226     PINT4   BIT     0F8H.2
 00D8.1                 227     EWT     BIT     0D8H.1
 00B0.1                 228     TXD     BIT     0B0H.1
 00A4                   229     LDALR   DATA    0A4H
 00F8.3                 230     PINT5   BIT     0F8H.3
 00AB                   231     DMALR   DATA    0ABH
 00A3                   232     LSR     DATA    0A3H
 00F8.4                 233     PINT6   BIT     0F8H.4
 00AC                   234     DMAMR   DATA    0ACH
 00FF                   235     ARCON   DATA    0FFH
 00D0.5                 236     F0      BIT     0D0H.5
 00D0.1                 237     F1      BIT     0D0H.1
 00A6                   238     LDCSR   DATA    0A6H
 00D0                   239     PSW     DATA    0D0H
 0098.2                 240     RB08    BIT     098H.2
 00D8                   241     WDCON   DATA    0D8H
 00D8.0                 242     RWT     BIT     0D8H.0
 00C0.2                 243     RB18    BIT     0C0H.2
------                  244     ?PR?_?pvPortMalloc?HEAP_1                SEGMENT ECODE INSEG 
------                  245     ?PR?_?vPortFree?HEAP_1                   SEGMENT ECODE INSEG 
------                  246     ?PR?_?vPortInitialiseBlocks?HEAP_1       SEGMENT ECODE INSEG 
------                  247     ?C_INITSEG           SEGMENT CODE 
------                  248     ?XD?HEAP_1           SEGMENT XDATA 
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE     5

                        249             EXTRN   CODE (_?cTaskResumeAll)
                        250             EXTRN   CODE (_?vTaskSuspendAll)
                        251             EXTRN   CODE (?C?ADDXBP)
                        252             EXTRN   DATA (?C_XBP)
                        253             EXTRN   NUMBER (?C?XDATASEG)
                        254             EXTRN   CODE (?C?XBPOFF)
                        255             PUBLIC  _?vPortInitialiseBlocks
                        256             PUBLIC  _?vPortFree
                        257             PUBLIC  _?pvPortMalloc
                        258     
------                  259             RSEG  ?XD?HEAP_1
000000                  260      usNextFreeByte:   DS   2
000002                  261               xHeap:   DS   20484
                        262     
------                  263             RSEG  ?C_INITSEG
000000 42               264             DB      042H
000001 0000       F     265             DW      usNextFreeByte
000003 0000             266             DW      00000H
                        267     
                        268     ; /*
                        269     ;       FreeRTOS V2.6.0 - Copyright (C) 2003 - 2005 Richard Barry.
                        270     ; 
                        271     ;       This file is part of the FreeRTOS distribution.
                        272     ; 
                        273     ;       FreeRTOS is free software; you can redistribute it and/or modify
                        274     ;       it under the terms of the GNU General Public License as published by
                        275     ;       the Free Software Foundation; either version 2 of the License, or
                        276     ;       (at your option) any later version.
                        277     ; 
                        278     ;       FreeRTOS is distributed in the hope that it will be useful,
                        279     ;       but WITHOUT ANY WARRANTY; without even the implied warranty of
                        280     ;       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        281     ;       GNU General Public License for more details.
                        282     ; 
                        283     ;       You should have received a copy of the GNU General Public License
                        284     ;       along with FreeRTOS; if not, write to the Free Software
                        285     ;       Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
                        286     ; 
                        287     ;       A special exception to the GPL can be applied should you wish to distribute
                        288     ;       a combined work that includes FreeRTOS, without being obliged to provide
                        289     ;       the source code for any proprietary components.  See the licensing section 
                        290     ;       of http://www.FreeRTOS.org for full details of how and when the exception
                        291     ;       can be applied.
                        292     ; 
                        293     ;       ***************************************************************************
                        294     ;       See http://www.FreeRTOS.org for documentation, latest information, license 
                        295     ;       and contact details.  Please ensure to read the configuration and relevant 
                        296     ;       port sections of the online documentation.
                        297     ;       ***************************************************************************
                        298     ; */
                        299     ; 
                        300     ; /* 
                        301     ; 
                        302     ; Changes between V2.5.1 and V2.5.1
                        303     ; 
                        304     ;       + The memory pool has been defined within a struct to ensure correct memory
                        305     ;         alignment on 32bit systems.
                        306     ; */
                        307     ; 
                        308     ; 
                        309     ; /*
                        310     ;  * The simplest possible implementation of pvPortMalloc().  Note that this
                        311     ;  * implementation does NOT allow allocated memory to be freed again.
                        312     ;  *
                        313     ;  * See heap_2.c and heap_3.c for alternative implementations, and the memory
                        314     ;  * management pages of http://www.FreeRTOS.org for more information.
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE     6

                        315     ;  */
                        316     ; #include <stdlib.h>
                        317     ; #include "projdefs.h"
                        318     ; #include "portable.h"
                        319     ; #include "task.h"
                        320     ; 
                        321     ; /* Setup the correct byte alignment mask for the defined byte alignment. */
                        322     ; #if portBYTE_ALIGNMENT == 4
                        323     ;       #define heapBYTE_ALIGNMENT_MASK ( ( unsigned portSHORT ) 0x0003 )
                        324     ; #endif
                        325     ; 
                        326     ; #if portBYTE_ALIGNMENT == 2
                        327     ;       #define heapBYTE_ALIGNMENT_MASK ( ( unsigned portSHORT ) 0x0001 )
                        328     ; #endif
                        329     ; 
                        330     ; #if portBYTE_ALIGNMENT == 1 
                        331     ;       #define heapBYTE_ALIGNMENT_MASK ( ( unsigned portSHORT ) 0x0000 )
                        332     ; #endif
                        333     ; 
                        334     ; #ifndef heapBYTE_ALIGNMENT_MASK
                        335     ;       #error "Invalid portBYTE_ALIGNMENT definition"
                        336     ; #endif
                        337     ; 
                        338     ; /* Allocate the memory for the heap.  The struct is used to force byte
                        339     ; alignment without using any non-portable code. */
                        340     ; static struct xRTOS_HEAP
                        341     ; {
                        342     ;       unsigned portLONG ulDummy;
                        343     ;       unsigned portCHAR ucHeap[ portTOTAL_HEAP_SIZE ];
                        344     ; } xHeap;
                        345     ; 
                        346     ; static unsigned portSHORT usNextFreeByte = ( unsigned portSHORT ) 0;
                        347     ; /*-----------------------------------------------------------*/
                        348     ; 
                        349     ; void *pvPortMalloc( unsigned portSHORT usWantedSize ) reentrant
                        350     
------                  351             RSEG  ?PR?_?pvPortMalloc?HEAP_1
000000                  352     _?pvPortMalloc:
                        353             USING   0
                        354                             ; SOURCE LINE # 82
000000 9000FFFE         355             MOV     DPTR,#0FFFEH
000004 12000000   E     356             LCALL   ?C?ADDXBP
000008 EE               357             MOV     A,R6
000009 F0               358             MOVX    @DPTR,A
00000A A3               359             INC     DPTR
00000B EF               360             MOV     A,R7
00000C F0               361             MOVX    @DPTR,A
00000D 9000FFFD         362             MOV     DPTR,#0FFFDH
000011 12000000   E     363             LCALL   ?C?ADDXBP
                        364     ; {
                        365     ; void *pvReturn = NULL;
                        366                             ; SOURCE LINE # 84
000015 850083     E     367             MOV     DPH,?C_XBP
000018 850082     E     368             MOV     DPL,?C_XBP+01H
00001B 759300     E     369             MOV     DPX,#?C?XDATASEG
00001E E4               370             CLR     A
00001F F0               371             MOVX    @DPTR,A
000020 A3               372             INC     DPTR
000021 F0               373             MOVX    @DPTR,A
000022 A3               374             INC     DPTR
000023 F0               375             MOVX    @DPTR,A
                        376     ; 
                        377     ;       /* Ensure that blocks are always aligned to the required number of bytes. */
                        378     ;       if( usWantedSize & heapBYTE_ALIGNMENT_MASK )
                        379                             ; SOURCE LINE # 87
                        380     ;       {
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE     7

                        381                             ; SOURCE LINE # 88
                        382     ;               /* Byte alignment required. */
                        383     ;               usWantedSize += ( portBYTE_ALIGNMENT - ( usWantedSize & heapBYTE_ALIGNME
                               NT_MASK ) );
                        384                             ; SOURCE LINE # 90
                        385     ;       }
                        386                             ; SOURCE LINE # 91
000024                  387     ?C0001:
                        388     ; 
                        389     ;       vTaskSuspendAll();
                        390                             ; SOURCE LINE # 93
000024 12000000   E     391             LCALL   _?vTaskSuspendAll
                        392     ;       {
                        393                             ; SOURCE LINE # 94
                        394     ;               /* Check there is enough room left for the allocation. */
                        395     ;               if( ( usNextFreeByte + usWantedSize ) < portTOTAL_HEAP_SIZE )
                        396                             ; SOURCE LINE # 96
000028 90000003         397             MOV     DPTR,#03H
00002C 12000000   E     398             LCALL   ?C?XBPOFF
000030 E0               399             MOVX    A,@DPTR
000031 FE               400             MOV     R6,A
000032 A3               401             INC     DPTR
000033 E0               402             MOVX    A,@DPTR
000034 FF               403             MOV     R7,A
000035 90000000   F     404             MOV     DPTR,#usNextFreeByte
000039 E0               405             MOVX    A,@DPTR
00003A FC               406             MOV     R4,A
00003B A3               407             INC     DPTR
00003C E0               408             MOVX    A,@DPTR
00003D FD               409             MOV     R5,A
00003E 2F               410             ADD     A,R7
00003F EC               411             MOV     A,R4
000040 3E               412             ADDC    A,R6
000041 C3               413             CLR     C
000042 9450             414             SUBB    A,#050H
000044 5035             415             JNC     ?C0002
                        416     ;               {
                        417                             ; SOURCE LINE # 97
                        418     ;                       /* Return the next free byte then increment the index past this
                        419     ;                       block. */
                        420     ;                       pvReturn = &( xHeap.ucHeap[ usNextFreeByte ] );
                        421                             ; SOURCE LINE # 100
000046 7400       F     422             MOV     A,#LOW (xHeap+04H)
000048 2D               423             ADD     A,R5
000049 F9               424             MOV     R1,A
00004A 7400       F     425             MOV     A,#HIGH (xHeap+04H)
00004C 3C               426             ADDC    A,R4
00004D FA               427             MOV     R2,A
00004E 850083     E     428             MOV     DPH,?C_XBP
000051 850082     E     429             MOV     DPL,?C_XBP+01H
000054 759300     E     430             MOV     DPX,#?C?XDATASEG
000057 7400       F     431             MOV     A,#MBYTE (xHeap)
000059 F0               432             MOVX    @DPTR,A
00005A A3               433             INC     DPTR
00005B EA               434             MOV     A,R2
00005C F0               435             MOVX    @DPTR,A
00005D A3               436             INC     DPTR
00005E E9               437             MOV     A,R1
00005F F0               438             MOVX    @DPTR,A
                        439     ;                       usNextFreeByte += usWantedSize;                 
                        440                             ; SOURCE LINE # 101
000060 90000003         441             MOV     DPTR,#03H
000064 12000000   E     442             LCALL   ?C?XBPOFF
000068 E0               443             MOVX    A,@DPTR
000069 FE               444             MOV     R6,A
00006A A3               445             INC     DPTR
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE     8

00006B E0               446             MOVX    A,@DPTR
00006C FF               447             MOV     R7,A
00006D 90000000   F     448             MOV     DPTR,#usNextFreeByte+01H
000071 E0               449             MOVX    A,@DPTR
000072 2F               450             ADD     A,R7
000073 F0               451             MOVX    @DPTR,A
000074 90000000   F     452             MOV     DPTR,#usNextFreeByte
000078 E0               453             MOVX    A,@DPTR
000079 3E               454             ADDC    A,R6
00007A F0               455             MOVX    @DPTR,A
                        456     ;               }       
                        457                             ; SOURCE LINE # 102
00007B                  458     ?C0002:
                        459     ;       }
                        460                             ; SOURCE LINE # 103
                        461     ;       cTaskResumeAll();
                        462                             ; SOURCE LINE # 104
00007B 12000000   E     463             LCALL   _?cTaskResumeAll
                        464     ; 
                        465     ;       return pvReturn;
                        466                             ; SOURCE LINE # 106
00007F 850083     E     467             MOV     DPH,?C_XBP
000082 850082     E     468             MOV     DPL,?C_XBP+01H
000085 759300     E     469             MOV     DPX,#?C?XDATASEG
000088 E0               470             MOVX    A,@DPTR
000089 FB               471             MOV     R3,A
00008A A3               472             INC     DPTR
00008B E0               473             MOVX    A,@DPTR
00008C FA               474             MOV     R2,A
00008D A3               475             INC     DPTR
00008E E0               476             MOVX    A,@DPTR
00008F F9               477             MOV     R1,A
                        478     ; }
                        479                             ; SOURCE LINE # 107
000090                  480     ?C0003:
000090 90000005         481             MOV     DPTR,#05H
000094 02000000   E     482             LJMP    ?C?ADDXBP
                        483     ; END OF _?pvPortMalloc
                        484     
                        485     ; /*-----------------------------------------------------------*/
                        486     ; 
                        487     ; void vPortFree( void *pv ) reentrant
                        488     
------                  489             RSEG  ?PR?_?vPortFree?HEAP_1
000000                  490     _?vPortFree:
                        491             USING   0
                        492                             ; SOURCE LINE # 110
000000 9000FFFD         493             MOV     DPTR,#0FFFDH
000004 12000000   E     494             LCALL   ?C?ADDXBP
000008 EB               495             MOV     A,R3
000009 F0               496             MOVX    @DPTR,A
00000A A3               497             INC     DPTR
00000B EA               498             MOV     A,R2
00000C F0               499             MOVX    @DPTR,A
00000D A3               500             INC     DPTR
00000E E9               501             MOV     A,R1
00000F F0               502             MOVX    @DPTR,A
                        503     ; {
                        504     ;       /* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
                        505     ;       for alternative implementations, and the memory management pages of 
                        506     ;       http://www.FreeRTOS.org for more information. */
                        507     ;       pv = pv;
                        508                             ; SOURCE LINE # 115
000010 850083     E     509             MOV     DPH,?C_XBP
000013 850082     E     510             MOV     DPL,?C_XBP+01H
000016 759300     E     511             MOV     DPX,#?C?XDATASEG
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE     9

000019 E0               512             MOVX    A,@DPTR
00001A F9               513             MOV     R1,A
00001B A3               514             INC     DPTR
00001C E0               515             MOVX    A,@DPTR
00001D FA               516             MOV     R2,A
00001E A3               517             INC     DPTR
00001F E0               518             MOVX    A,@DPTR
000020 850083     E     519             MOV     DPH,?C_XBP
000023 850082     E     520             MOV     DPL,?C_XBP+01H
000026 759300     E     521             MOV     DPX,#?C?XDATASEG
000029 C9               522             XCH     A,R1
00002A F0               523             MOVX    @DPTR,A
00002B A3               524             INC     DPTR
00002C EA               525             MOV     A,R2
00002D F0               526             MOVX    @DPTR,A
00002E A3               527             INC     DPTR
00002F E9               528             MOV     A,R1
000030 F0               529             MOVX    @DPTR,A
                        530     ; }
                        531                             ; SOURCE LINE # 116
000031 90000003         532             MOV     DPTR,#03H
000035 02000000   E     533             LJMP    ?C?ADDXBP
                        534     ; END OF _?vPortFree
                        535     
                        536     ; /*-----------------------------------------------------------*/
                        537     ; 
                        538     ; void vPortInitialiseBlocks( void ) reentrant
                        539     
------                  540             RSEG  ?PR?_?vPortInitialiseBlocks?HEAP_1
000000                  541     _?vPortInitialiseBlocks:
                        542             USING   0
                        543                             ; SOURCE LINE # 119
                        544     ; {
                        545     ;       /* Only required when static memory is not cleared. */
                        546     ;       usNextFreeByte = ( unsigned portSHORT ) 0;
                        547                             ; SOURCE LINE # 122
000000 E4               548             CLR     A
000001 90000000   F     549             MOV     DPTR,#usNextFreeByte
000005 F0               550             MOVX    @DPTR,A
000006 A3               551             INC     DPTR
000007 F0               552             MOVX    @DPTR,A
                        553     ; }
                        554                             ; SOURCE LINE # 123
000008 22               555             RET     
                        556     ; END OF _?vPortInitialiseBlocks
                        557     
                        558             END
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE    10

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E     ATTRIBUTES

?C0001. . . . . . . . . . . . . . . . .    EC ADDR  0024H     R   SEG=?PR?_?PVPORTMALLOC?HEAP_1
?C0002. . . . . . . . . . . . . . . . .    EC ADDR  007BH     R   SEG=?PR?_?PVPORTMALLOC?HEAP_1
?C0003. . . . . . . . . . . . . . . . .    EC ADDR  0090H     R   SEG=?PR?_?PVPORTMALLOC?HEAP_1
?C?ADDXBP . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XBPOFF . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?XDATASEG . . . . . . . . . . . . . .    N  NUMB  -------       EXT
?C_INITSEG. . . . . . . . . . . . . . .    C  SEG   000005H       REL=UNIT, ALN=BYTE
?C_XBP. . . . . . . . . . . . . . . . .    D  ADDR  -------       EXT
?PR?_?PVPORTMALLOC?HEAP_1 . . . . . . .    EC SEG   000098H       REL=INSEG, ALN=BYTE
?PR?_?VPORTFREE?HEAP_1. . . . . . . . .    EC SEG   000039H       REL=INSEG, ALN=BYTE
?PR?_?VPORTINITIALISEBLOCKS?HEAP_1. . .    EC SEG   000009H       REL=INSEG, ALN=BYTE
?XD?HEAP_1. . . . . . . . . . . . . . .    X  SEG   005006H       REL=UNIT, ALN=BYTE
_?CTASKRESUMEALL. . . . . . . . . . . .    C  ADDR  -------       EXT
_?PVPORTMALLOC. . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?PVPORTMALLOC?HEAP_1
_?VPORTFREE . . . . . . . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VPORTFREE?HEAP_1
_?VPORTINITIALISEBLOCKS . . . . . . . .    EC ADDR  0000H     R   SEG=?PR?_?VPORTINITIALISEBLOCKS?HEAP_1
_?VTASKSUSPENDALL . . . . . . . . . . .    C  ADDR  -------       EXT
AC. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.6   A   
ACC . . . . . . . . . . . . . . . . . .    D  ADDR  00E0H     A   
ACON. . . . . . . . . . . . . . . . . .    D  ADDR  009DH     A   
ARCON . . . . . . . . . . . . . . . . .    D  ADDR  00FFH     A   
B . . . . . . . . . . . . . . . . . . .    D  ADDR  00F0H     A   
CANCIR. . . . . . . . . . . . . . . . .    D  ADDR  00DEH     A   
CANDR . . . . . . . . . . . . . . . . .    D  ADDR  00DFH     A   
CCAPH0. . . . . . . . . . . . . . . . .    D  ADDR  00B9H     A   
CCAPH1. . . . . . . . . . . . . . . . .    D  ADDR  00BAH     A   
CCAPH2. . . . . . . . . . . . . . . . .    D  ADDR  00BBH     A   
CCAPH3. . . . . . . . . . . . . . . . .    D  ADDR  00BCH     A   
CCAPH4. . . . . . . . . . . . . . . . .    D  ADDR  00BDH     A   
CCAPL0. . . . . . . . . . . . . . . . .    D  ADDR  00B1H     A   
CCAPL1. . . . . . . . . . . . . . . . .    D  ADDR  00B2H     A   
CCAPL2. . . . . . . . . . . . . . . . .    D  ADDR  00B3H     A   
CCAPL3. . . . . . . . . . . . . . . . .    D  ADDR  00B4H     A   
CCAPL4. . . . . . . . . . . . . . . . .    D  ADDR  00B5H     A   
CCAPM0. . . . . . . . . . . . . . . . .    D  ADDR  00D1H     A   
CCAPM1. . . . . . . . . . . . . . . . .    D  ADDR  00D2H     A   
CCAPM2. . . . . . . . . . . . . . . . .    D  ADDR  00D3H     A   
CCAPM3. . . . . . . . . . . . . . . . .    D  ADDR  00D4H     A   
CCAPM4. . . . . . . . . . . . . . . . .    D  ADDR  00D5H     A   
CCON. . . . . . . . . . . . . . . . . .    D  ADDR  00C3H     A   
CH. . . . . . . . . . . . . . . . . . .    D  ADDR  00C5H     A   
CKCON . . . . . . . . . . . . . . . . .    D  ADDR  008EH     A   
CL. . . . . . . . . . . . . . . . . . .    D  ADDR  00C4H     A   
CMOD. . . . . . . . . . . . . . . . . .    D  ADDR  00C2H     A   
CPRL2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CSREPR. . . . . . . . . . . . . . . . .    D  ADDR  008FH     A   
CT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CY. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.7   A   
DBAR. . . . . . . . . . . . . . . . . .    D  ADDR  009AH     A   
DCIR. . . . . . . . . . . . . . . . . .    D  ADDR  009BH     A   
DDR . . . . . . . . . . . . . . . . . .    D  ADDR  009CH     A   
DMAHR . . . . . . . . . . . . . . . . .    D  ADDR  00ADH     A   
DMALR . . . . . . . . . . . . . . . . .    D  ADDR  00ABH     A   
DMAMR . . . . . . . . . . . . . . . . .    D  ADDR  00ACH     A   
DPH . . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH0. . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH1. . . . . . . . . . . . . . . . . .    D  ADDR  0085H     A   
DPL . . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL0. . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL1. . . . . . . . . . . . . . . . . .    D  ADDR  0084H     A   
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE    11

DPS . . . . . . . . . . . . . . . . . .    D  ADDR  0086H     A   
DPX . . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX0. . . . . . . . . . . . . . . . . .    D  ADDR  0093H     A   
DPX1. . . . . . . . . . . . . . . . . .    D  ADDR  0095H     A   
EA. . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.7   A   
EIE . . . . . . . . . . . . . . . . . .    D  ADDR  00E8H     A   
EIF . . . . . . . . . . . . . . . . . .    D  ADDR  0091H     A   
EINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.0   A   
EINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.1   A   
EINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.2   A   
EINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.3   A   
EINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.4   A   
EIP . . . . . . . . . . . . . . . . . .    D  ADDR  00F8H     A   
EPCR. . . . . . . . . . . . . . . . . .    D  ADDR  00BEH     A   
EPDR. . . . . . . . . . . . . . . . . .    D  ADDR  00BFH     A   
ES0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.4   A   
ES1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.6   A   
ET0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.1   A   
ET1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.3   A   
ET2 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.5   A   
EWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.5   A   
EWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.1   A   
EX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.0   A   
EX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.2   A   
EXEN2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.3   A   
EXF2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.6   A   
F0. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.5   A   
F1. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.1   A   
HEAP_1. . . . . . . . . . . . . . . . .    -- ----  -------       
I2CCIR. . . . . . . . . . . . . . . . .    D  ADDR  0096H     A   
I2CDR . . . . . . . . . . . . . . . . .    D  ADDR  0097H     A   
IE. . . . . . . . . . . . . . . . . . .    D  ADDR  00A8H     A   
IE0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.1   A   
IE1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.3   A   
INT0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
INT1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
IP. . . . . . . . . . . . . . . . . . .    D  ADDR  00B8H     A   
IT0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.0   A   
IT1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.2   A   
LCR . . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LDAHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
LDALR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
LDCSR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
LDHR. . . . . . . . . . . . . . . . . .    D  ADDR  00AAH     A   
LDLR. . . . . . . . . . . . . . . . . .    D  ADDR  00A9H     A   
LMSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSAIER. . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
LSCR. . . . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
LSR . . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
LSSR. . . . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
MCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00B6H     A   
MD0 . . . . . . . . . . . . . . . . . .    D  ADDR  00F9H     A   
MD1 . . . . . . . . . . . . . . . . . .    D  ADDR  00FAH     A   
MD2 . . . . . . . . . . . . . . . . . .    D  ADDR  00FBH     A   
MD3 . . . . . . . . . . . . . . . . . .    D  ADDR  00FCH     A   
MD4 . . . . . . . . . . . . . . . . . .    D  ADDR  00FDH     A   
MD5 . . . . . . . . . . . . . . . . . .    D  ADDR  00FEH     A   
MDR . . . . . . . . . . . . . . . . . .    D  ADDR  00B7H     A   
MXAX. . . . . . . . . . . . . . . . . .    D  ADDR  00EAH     A   
OV. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.2   A   
OWCIR . . . . . . . . . . . . . . . . .    D  ADDR  00D6H     A   
OWDR. . . . . . . . . . . . . . . . . .    D  ADDR  00D7H     A   
P . . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.0   A   
P0. . . . . . . . . . . . . . . . . . .    D  ADDR  0080H     A   
P0_0. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
P0_1. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE    12

P0_2. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
P0_3. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
P0_4. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
P0_5. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
P0_6. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
P0_7. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
P1. . . . . . . . . . . . . . . . . . .    D  ADDR  0090H     A   
P1_0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
P1_1. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
P1_2. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
P1_3. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.3   A   
P1_4. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.4   A   
P1_5. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.5   A   
P1_6. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.6   A   
P1_7. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.7   A   
P2. . . . . . . . . . . . . . . . . . .    D  ADDR  00A0H     A   
P2_0. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.0   A   
P2_1. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.1   A   
P2_2. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.2   A   
P2_3. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.3   A   
P2_4. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.4   A   
P2_5. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.5   A   
P2_6. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
P2_7. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.7   A   
P3. . . . . . . . . . . . . . . . . . .    D  ADDR  00B0H     A   
P3_0. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
P3_1. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
P3_2. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.2   A   
P3_3. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.3   A   
P3_4. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
P3_5. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
P3_6. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
P3_7. . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
PCON. . . . . . . . . . . . . . . . . .    D  ADDR  0087H     A   
PINT2 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.0   A   
PINT3 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.1   A   
PINT4 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.2   A   
PINT5 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.3   A   
PINT6 . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.4   A   
PISSR1. . . . . . . . . . . . . . . . .    D  ADDR  009EH     A   
PISSR2. . . . . . . . . . . . . . . . .    D  ADDR  009FH     A   
PS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.4   A   
PS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.6   A   
PSW . . . . . . . . . . . . . . . . . .    D  ADDR  00D0H     A   
PT0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.1   A   
PT1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.3   A   
PT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.5   A   
PWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.5   A   
PX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.0   A   
PX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.2   A   
RB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.2   A   
RB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.2   A   
RCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.5   A   
RD. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.7   A   
REN0. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.4   A   
REN1. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.4   A   
RI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.0   A   
RI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.0   A   
RLDH. . . . . . . . . . . . . . . . . .    D  ADDR  00CBH     A   
RLDL. . . . . . . . . . . . . . . . . .    D  ADDR  00CAH     A   
RS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.3   A   
RS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.4   A   
RWT . . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.0   A   
RXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.0   A   
SBUF0 . . . . . . . . . . . . . . . . .    D  ADDR  0099H     A   
SBUF1 . . . . . . . . . . . . . . . . .    D  ADDR  00C1H     A   
AX51 MACRO ASSEMBLER  HEAP_1                                                                05/28/13 16:07:30 PAGE    13

SCON0 . . . . . . . . . . . . . . . . .    D  ADDR  0098H     A   
SCON1 . . . . . . . . . . . . . . . . .    D  ADDR  00C0H     A   
SDSTSR. . . . . . . . . . . . . . . . .    D  ADDR  0094H     A   
SM00. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.7   A   
SM01. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.6   A   
SM02. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.5   A   
SM10. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.7   A   
SM11. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.6   A   
SM12. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.5   A   
SP. . . . . . . . . . . . . . . . . . .    D  ADDR  0081H     A   
SPICIR. . . . . . . . . . . . . . . . .    D  ADDR  00CEH     A   
SPIDR . . . . . . . . . . . . . . . . .    D  ADDR  00CFH     A   
STATUS. . . . . . . . . . . . . . . . .    D  ADDR  00E9H     A   
T0. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.4   A   
T1. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.5   A   
T2CON . . . . . . . . . . . . . . . . .    D  ADDR  00C8H     A   
T2IF. . . . . . . . . . . . . . . . . .    D  ADDR  00C9H     A   
TA. . . . . . . . . . . . . . . . . . .    D  ADDR  00EBH     A   
TB08. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.3   A   
TB18. . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.3   A   
TCIR. . . . . . . . . . . . . . . . . .    D  ADDR  00AEH     A   
TCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.4   A   
TCON. . . . . . . . . . . . . . . . . .    D  ADDR  0088H     A   
TDR . . . . . . . . . . . . . . . . . .    D  ADDR  00AFH     A   
TF0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.5   A   
TF1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.7   A   
TF2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.7   A   
TH0 . . . . . . . . . . . . . . . . . .    D  ADDR  008CH     A   
TH1 . . . . . . . . . . . . . . . . . .    D  ADDR  008DH     A   
TH2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CDH     A   
TI0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.1   A   
TI1 . . . . . . . . . . . . . . . . . .    B  ADDR  00C0H.1   A   
TL0 . . . . . . . . . . . . . . . . . .    D  ADDR  008AH     A   
TL1 . . . . . . . . . . . . . . . . . .    D  ADDR  008BH     A   
TL2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CCH     A   
TMOD. . . . . . . . . . . . . . . . . .    D  ADDR  0089H     A   
TR0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.4   A   
TR1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.6   A   
TR2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.2   A   
TXD . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.1   A   
UR2_DLH . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_DLL . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
UR2_FCR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_IER . . . . . . . . . . . . . . . .    D  ADDR  00E2H     A   
UR2_IIR . . . . . . . . . . . . . . . .    D  ADDR  00E3H     A   
UR2_LCR . . . . . . . . . . . . . . . .    D  ADDR  00E4H     A   
UR2_LSR . . . . . . . . . . . . . . . .    D  ADDR  00E6H     A   
UR2_MCR . . . . . . . . . . . . . . . .    D  ADDR  00E5H     A   
UR2_MSR . . . . . . . . . . . . . . . .    D  ADDR  00E7H     A   
UR2_RBR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
UR2_THR . . . . . . . . . . . . . . . .    D  ADDR  00E1H     A   
USNEXTFREEBYTE. . . . . . . . . . . . .    X  ADDR  0000H     R   SEG=?XD?HEAP_1
WDCON . . . . . . . . . . . . . . . . .    D  ADDR  00D8H     A   
WDIF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.3   A   
WR. . . . . . . . . . . . . . . . . . .    B  ADDR  00B0H.6   A   
WTRF. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.2   A   
WTST. . . . . . . . . . . . . . . . . .    D  ADDR  0092H     A   
XHEAP . . . . . . . . . . . . . . . . .    X  ADDR  0002H     R   SEG=?XD?HEAP_1
XMRHR . . . . . . . . . . . . . . . . .    D  ADDR  00A7H     A   
XMRLR . . . . . . . . . . . . . . . . .    D  ADDR  00A6H     A   
XMWHR . . . . . . . . . . . . . . . . .    D  ADDR  00A5H     A   
XMWLR . . . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).
